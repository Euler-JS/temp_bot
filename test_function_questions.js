// test_function_questions.js - Teste espec√≠fico para perguntas sobre fun√ß√£o do bot
require('dotenv').config();
const OPENAI = require('./open_ai/open_ai');

async function testFunctionQuestions() {
    console.log('üîç TESTANDO PERGUNTAS SOBRE FUN√á√ÉO DO BOT\n');

    const openaiService = new OPENAI();

    console.log('üßπ Usando an√°lises frescas - cache ser√° renovado automaticamente\n');

    // Perguntas que estavam sendo mal classificadas
    const functionQuestions = [
        "O que voc√™ faz?",
        "Que √© a tua fun√ß√£o?",
        "Para que serves?",
        "Qual √© a tua fun√ß√£o?",
        "O que fazes?",
        "Que bot √© este?",
        "Quem te criou?",
        "Como te chamas?"
    ];

    console.log('ü§ñ TESTANDO PERGUNTAS SOBRE FUN√á√ÉO DO BOT:');
    console.log('‚ïê'.repeat(60));

    let correctClassifications = 0;
    let totalQuestions = functionQuestions.length;

    for (let i = 0; i < functionQuestions.length; i++) {
        const question = functionQuestions[i];
        console.log(`\n${i + 1}Ô∏è‚É£ Pergunta: "${question}"`);

        try {
            const analysisResult = await openaiService.analyzeMessage(question, {
                preferredCity: 'Beira',
                queryCount: 0
            });

            if (analysisResult.success) {
                const analysis = analysisResult.analysis;
                const isWeatherQuery = openaiService.isWeatherRelatedQuery(analysis);

                console.log(`   üìä Intent: ${analysis.intent}`);
                console.log(`   üéØ Confidence: ${analysis.confidence}`);
                console.log(`   üß† Reasoning: ${analysis.reasoning}`);
                console.log(`   üå§Ô∏è √â sobre clima: ${isWeatherQuery ? 'SIM' : 'N√ÉO'}`);
                console.log(`   ‚úÖ Requires weather data: ${analysis.requires_weather_data}`);

                // Verificar se foi classificada corretamente (N√ÉO sobre clima)
                if (!isWeatherQuery && analysis.requires_weather_data === false) {
                    console.log(`   ‚úÖ CLASSIFICA√á√ÉO CORRETA - general_help`);
                    correctClassifications++;

                    // Testar resposta da Joana Bot
                    try {
                        const friendlyResponse = await openaiService.generateFriendlyMozambicanResponse(
                            question,
                            analysis,
                            { queryCount: 0, expertiseLevel: 'basic' }
                        );

                        if (friendlyResponse.success) {
                            console.log(`   üí¨ Resposta: "${friendlyResponse.message.substring(0, 80)}..."`);
                        }
                    } catch (responseError) {
                        console.log(`   ‚ö†Ô∏è Erro na resposta: ${responseError.message}`);
                    }
                } else {
                    console.log(`   ‚ùå CLASSIFICA√á√ÉO INCORRETA - deveria ser general_help, n√£o clima`);
                }
            } else {
                console.log(`   ‚ùå An√°lise falhou: ${analysisResult.error || 'Erro desconhecido'}`);
            }

        } catch (error) {
            console.log(`   ‚ùå Erro: ${error.message}`);
        }
    }

    console.log('\n' + '‚ïê'.repeat(60));
    console.log('üìä RESULTADOS DA CLASSIFICA√á√ÉO:');
    console.log(`‚úÖ Corretas: ${correctClassifications}/${totalQuestions}`);
    console.log(`üìà Taxa de sucesso: ${Math.round((correctClassifications / totalQuestions) * 100)}%`);

    if (correctClassifications === totalQuestions) {
        console.log('üéâ PERFEITO! Todas as perguntas sobre fun√ß√£o foram classificadas corretamente!');
    } else {
        console.log('‚ö†Ô∏è Algumas perguntas ainda est√£o sendo mal classificadas.');
        console.log('üîß √â necess√°rio ajustar mais o prompt de an√°lise.');
    }

    // Teste espec√≠fico das duas perguntas que falhavam
    console.log('\nüéØ TESTE ESPEC√çFICO DAS PERGUNTAS PROBLEM√ÅTICAS:');
    console.log('‚ïê'.repeat(50));

    const problematicQuestions = ["O que voc√™ faz?", "Que √© a tua fun√ß√£o?"];

    for (const question of problematicQuestions) {
        console.log(`\nüîç Testando: "${question}"`);

        try {
            const result = await openaiService.analyzeMessage(question, {
                preferredCity: 'Beira',
                queryCount: 0
            });

            if (result.success) {
                const analysis = result.analysis;
                const isWeatherQuery = openaiService.isWeatherRelatedQuery(analysis);

                console.log(`   Intent: ${analysis.intent}`);
                console.log(`   Confidence: ${analysis.confidence}`);
                console.log(`   √â sobre clima: ${isWeatherQuery ? 'SIM ‚ùå' : 'N√ÉO ‚úÖ'}`);
                console.log(`   Requires weather data: ${analysis.requires_weather_data}`);
                console.log(`   Reasoning: ${analysis.reasoning}`);

                if (!isWeatherQuery) {
                    console.log('   ‚úÖ AGORA EST√Å CORRETO!');
                } else {
                    console.log('   ‚ùå AINDA EST√Å INCORRETO!');
                }
            }
        } catch (error) {
            console.error(`   ‚ùå Erro: ${error.message}`);
        }
    }

    console.log('\nüéØ TESTE DE PERGUNTAS SOBRE FUN√á√ÉO CONCLU√çDO!');
}

// Executar o teste
testFunctionQuestions().catch(console.error);
