// whatsapp_api/connection.js - Adaptado para Temperature Bot
require('dotenv').config();
const axios = require("axios");


class WhatsAppApi {
    constructor(token, phoneNumberID) {
        this.token = token;
        this.phoneNumberID = phoneNumberID;
        this.tokenExpirationTime = null;
        this.isRefreshing = false;
        this.refreshPromise = null;
        // console.log('WhatsAppApi initialized with token:', this.token, 'and phoneNumberID:', this.phoneNumberID);
    }

    // ===============================================
    // SISTEMA DE RENOVA√á√ÉO AUTOM√ÅTICA DO TOKEN
    // ===============================================

    // M√©todo para atualizar o token
    updateToken(newToken) {
        this.token = newToken;
        this.tokenExpirationTime = Date.now() + (60 * 60 * 1000); // 1 hora
        console.log('‚úÖ Token atualizado com sucesso');
    }

    // Detecta se o token expirou baseado na resposta da API
    isTokenExpired(error) {
        if (!error || !error.response) return false;

        const status = error.response.status;
        const data = error.response.data;

        // C√≥digos de erro que indicam token expirado/inv√°lido
        const expiredErrorCodes = [401, 403];
        const expiredMessages = [
            'invalid access token',
            'access token has expired',
            'token is invalid',
            'authentication failed'
        ];

        if (expiredErrorCodes.includes(status)) return true;

        if (data && typeof data === 'object') {
            const errorMessage = JSON.stringify(data).toLowerCase();
            return expiredMessages.some(msg => errorMessage.includes(msg));
        }

        return false;
    }

    // Renovar token usando Facebook Graph API
    async renewToken() {
        if (this.isRefreshing) {
            // Se j√° est√° renovando, aguarda a renova√ß√£o atual
            return this.refreshPromise;
        }

        this.isRefreshing = true;
        console.log('üîÑ Iniciando renova√ß√£o do token...');

        this.refreshPromise = this._performTokenRenewal();

        try {
            const result = await this.refreshPromise;
            return result;
        } finally {
            this.isRefreshing = false;
            this.refreshPromise = null;
        }
    }

    async _performTokenRenewal() {
        try {
            const appId = process.env.FACEBOOK_APP_ID;
            const appSecret = process.env.FACEBOOK_APP_SECRET;

            console.log('üîç Verificando configura√ß√µes de renova√ß√£o...');
            console.log('üì± App ID dispon√≠vel:', appId ? '‚úÖ' : '‚ùå');
            console.log('üîê App Secret dispon√≠vel:', appSecret ? '‚úÖ' : '‚ùå');
            console.log('üîÑ Refresh Token dispon√≠vel:', process.env.FACEBOOK_REFRESH_TOKEN ? '‚úÖ' : '‚ùå');

            if (!appId || !appSecret) {
                throw new Error('Facebook App ID e App Secret s√£o necess√°rios para renovar o token. Configure FACEBOOK_APP_ID e FACEBOOK_APP_SECRET no .env');
            }

            // M√©todo 1: Usar refresh token se dispon√≠vel
            if (process.env.FACEBOOK_REFRESH_TOKEN) {
                console.log('üîÑ Tentando renovar com refresh token...');
                const newToken = await this._renewWithRefreshToken(appId, appSecret);
                if (newToken) {
                    this.updateToken(newToken);
                    return newToken;
                }
            }

            // M√©todo 2: Trocar token de curta dura√ß√£o por longa dura√ß√£o
            console.log('üîÑ Tentando estender token de longa dura√ß√£o...');
            const extendedToken = await this._extendAccessToken(appId, appSecret);
            if (extendedToken) {
                this.updateToken(extendedToken);
                return extendedToken;
            }

            throw new Error('N√£o foi poss√≠vel renovar o token automaticamente');

        } catch (error) {
            console.error('‚ùå Erro ao renovar token:', error.message);
            throw error;
        }
    }

    async _renewWithRefreshToken(appId, appSecret) {
        try {
            const response = await axios.post('https://graph.facebook.com/oauth/access_token', {
                grant_type: 'refresh_token',
                refresh_token: process.env.FACEBOOK_REFRESH_TOKEN,
                client_id: appId,
                client_secret: appSecret
            });

            return response.data.access_token;
        } catch (error) {
            console.log('‚ö†Ô∏è Renova√ß√£o com refresh token falhou:', error.message);
            return null;
        }
    }

    async _extendAccessToken(appId, appSecret) {
        try {
            const response = await axios.get('https://graph.facebook.com/oauth/access_token', {
                params: {
                    grant_type: 'fb_exchange_token',
                    client_id: appId,
                    client_secret: appSecret,
                    fb_exchange_token: this.token
                }
            });

            return response.data.access_token;
        } catch (error) {
            console.log('‚ö†Ô∏è Extens√£o do token falhou:', error.message);

            // Log adicional para debug
            if (error.response) {
                console.log('üìä Status da resposta:', error.response.status);
                console.log('üìÑ Dados da resposta:', JSON.stringify(error.response.data, null, 2));
            }

            return null;
        }
    }

    // Wrapper para requisi√ß√µes com renova√ß√£o autom√°tica
    async makeAuthenticatedRequest(requestFn) {
        try {
            return await requestFn();
        } catch (error) {
            if (this.isTokenExpired(error)) {
                console.log('üîÑ Token expirado detectado, tentando renovar...');

                try {
                    await this.renewToken();
                    console.log('‚úÖ Token renovado com sucesso, tentando novamente...');
                    return await requestFn();
                } catch (renewError) {
                    console.error('‚ùå Falha na renova√ß√£o autom√°tica:', renewError.message);
                    console.log('‚ö†Ô∏è Continuando com token atual. Verifique as configura√ß√µes do Facebook App.');

                    // Em vez de falhar completamente, tenta enviar com o token atual
                    // e retorna um erro mais informativo
                    throw new Error(`Token possivelmente expirado. Verifique o token manualmente. Erro original: ${error.message}`);
                }
            }
            throw error;
        }
    }

    // M√©todo alternativo que tenta enviar sem renova√ß√£o autom√°tica
    async sendMessageWithoutAutoRenewal(mensagem, numeroCelular) {
        try {
            const response = await axios.post(
                `https://graph.facebook.com/v21.0/${this.phoneNumberID}/messages`,
                {
                    messaging_product: "whatsapp",
                    to: numeroCelular,
                    text: { body: mensagem }
                },
                {
                    headers: {
                        Authorization: `Bearer ${this.token}`,
                        "Content-Type": "application/json"
                    }
                }
            );

            console.log('‚úÖ Mensagem enviada com sucesso (sem renova√ß√£o autom√°tica)');
            return response.data;
        } catch (error) {
            console.log('‚ùå Falha ao enviar mensagem:', error.message);
            throw error;
        }
    }

    // M√©todo principal para enviar mensagens de texto
    async enviarMensagemUsandoWhatsappAPI(mensagem, numeroCelular) {
        console.log('Enviando mensagem:', mensagem, 'para:', numeroCelular);

        if (!mensagem?.messaging_product) {
            mensagem = {
                messaging_product: 'whatsapp',
                to: numeroCelular,
                text: {
                    body: mensagem.replace(/<\/?[^>]+(>|$)/g, "")
                }
            }
        }

        const messageData = mensagem;

        try {
            return await this.makeAuthenticatedRequest(async () => {
                const response = await axios.post(
                    `https://graph.facebook.com/v19.0/${this.phoneNumberID}/messages`,
                    messageData,
                    {
                        headers: {
                            'Authorization': `Bearer ${this.token}`,
                            'Content-Type': 'application/json'
                        }
                    }
                );
                console.log('Message sent successfully:', response.data);
                return response.data;
            });
        } catch (error) {
            // Se a renova√ß√£o autom√°tica falhar, tenta enviar direto
            if (error.message.includes('Token possivelmente expirado')) {
                console.log('‚ö†Ô∏è Tentando enviar mensagem sem renova√ß√£o autom√°tica...');
                try {
                    return await this.sendMessageWithoutAutoRenewal(
                        typeof mensagem === 'string' ? mensagem : mensagem.text.body,
                        numeroCelular
                    );
                } catch (fallbackError) {
                    console.log('‚ùå Fallback tamb√©m falhou:', fallbackError.message);
                    throw new Error(`Falha ao enviar mensagem. Verifique se o token WhatsApp est√° v√°lido. Erro: ${fallbackError.message}`);
                }
            }
            throw error;
        }
    }

    // M√©todo para enviar templates (√∫til para mensagens de boas-vindas)
    async enviarMensagemUsandoTemplateWhatsappAPI(templateName, numeroCelular, language = 'pt_BR') {
        const messageData = {
            messaging_product: "whatsapp",
            to: numeroCelular,
            type: "template",
            template: {
                name: templateName,
                language: {
                    code: language
                }
            }
        };

        return await this.makeAuthenticatedRequest(async () => {
            const response = await axios.post(
                `https://graph.facebook.com/v19.0/${this.phoneNumberID}/messages`,
                messageData,
                {
                    headers: {
                        'Authorization': `Bearer ${this.token}`,
                        'Content-Type': 'application/json'
                    }
                }
            );
            console.log("Template message sent successfully:", response.data);
            return response.data;
        });
    }

    // M√©todo principal para enviar mensagens interativas
    async enviarMensagemInterativaUsandoWhatsappAPI(mensagemInterativa) {
        return await this.makeAuthenticatedRequest(async () => {
            const response = await axios.post(
                `https://graph.facebook.com/v19.0/${this.phoneNumberID}/messages`,
                mensagemInterativa,
                {
                    headers: {
                        'Authorization': `Bearer ${this.token}`,
                        'Content-Type': 'application/json'
                    }
                }
            );
            console.log('Interactive message sent successfully:', response.data);
            return response.data;
        });
    }

    // **NOVO** - Menu de configura√ß√µes do Temperature Bot
    async enviarMenuConfiguracoes(numeroCelular, usuario = {}) {
        const configMenu = {
            messaging_product: 'whatsapp',
            recipient_type: "individual",
            to: numeroCelular,
            type: "interactive",
            interactive: {
                type: "list",
                header: {
                    type: "text",
                    text: "‚öôÔ∏è Configura√ß√µes"
                },
                body: {
                    text: "Configure suas prefer√™ncias do bot de temperatura:"
                },
                footer: {
                    text: "Selecione uma op√ß√£o"
                },
                action: {
                    button: "Configurar",
                    sections: [
                        {
                            title: "Prefer√™ncias Gerais",
                            rows: [
                                {
                                    id: "set_city",
                                    title: "Cidade Padr√£o",
                                    description: `Atual: ${usuario?.preferredCity || 'N√£o definida'}`
                                },
                                {
                                    id: "set_units",
                                    title: "Unidade de Temperatura",
                                    description: `Atual: ${usuario?.units === 'fahrenheit' ? 'Fahrenheit' : 'Celsius'}`
                                },
                                {
                                    id: "set_language",
                                    title: "Idioma",
                                    description: `Atual: ${usuario?.language === 'en' ? 'English' : 'Portugu√™s'}`
                                }
                            ]
                        },
                        {
                            title: "Notifica√ß√µes",
                            rows: [
                                {
                                    id: "toggle_notifications",
                                    title: "Alertas de Clima",
                                    description: `${usuario?.notifications ? 'Ativado' : 'Desativado'}`
                                }
                            ]
                        }
                    ]
                }
            }
        };

        return await this.enviarMensagemInterativaUsandoWhatsappAPI(configMenu);
    }

    // **NOVO** - Menu de sele√ß√£o de unidades de temperatura
    async enviarMenuUnidades(numeroCelular) {
        const unitsMenu = {
            messaging_product: 'whatsapp',
            recipient_type: "individual",
            to: numeroCelular,
            type: "interactive",
            interactive: {
                type: "button",
                header: {
                    type: "text",
                    text: "üå°Ô∏è Unidade de Temperatura"
                },
                body: {
                    text: "Escolha sua unidade de temperatura preferida:"
                },
                action: {
                    buttons: [
                        {
                            type: "reply",
                            reply: {
                                id: "units_celsius",
                                title: "Celsius (¬∞C)"
                            }
                        },
                        {
                            type: "reply",
                            reply: {
                                id: "units_fahrenheit",
                                title: "Fahrenheit (¬∞F)"
                            }
                        }
                    ]
                }
            }
        };

        return await this.enviarMensagemInterativaUsandoWhatsappAPI(unitsMenu);
    }

    // **NOVO** - Menu de sele√ß√£o de idioma
    async enviarMenuIdiomas(numeroCelular) {
        const languageMenu = {
            messaging_product: 'whatsapp',
            recipient_type: "individual",
            to: numeroCelular,
            type: "interactive",
            interactive: {
                type: "button",
                header: {
                    type: "text",
                    text: "üåç Selecionar Idioma"
                },
                body: {
                    text: "Choose your preferred language / Escolha seu idioma preferido:"
                },
                action: {
                    buttons: [
                        {
                            type: "reply",
                            reply: {
                                id: "lang_pt",
                                title: "üáßüá∑ Portugu√™s"
                            }
                        },
                        {
                            type: "reply",
                            reply: {
                                id: "lang_en",
                                title: "üá∫üá∏ English"
                            }
                        }
                    ]
                }
            }
        };

        return await this.enviarMensagemInterativaUsandoWhatsappAPI(languageMenu);
    }

    // **NOVO** - Bot√µes de a√ß√£o r√°pida para clima
    async enviarBotoesAcaoRapida(numeroCelular, cidade) {
        const quickActions = {
            messaging_product: 'whatsapp',
            recipient_type: "individual",
            to: numeroCelular,
            type: "interactive",
            interactive: {
                type: "button",
                header: {
                    type: "text",
                    text: `üå§Ô∏è A√ß√µes para ${cidade}`
                },
                body: {
                    text: "O que voc√™ gostaria de fazer?"
                },
                action: {
                    buttons: [
                        {
                            type: "reply",
                            reply: {
                                id: `forecast_${cidade}`,
                                title: "üìÖ Previs√£o 7 dias"
                            }
                        },
                        // {
                        //     type: "reply",
                        //     reply: {
                        //         id: `alerts_${cidade}`,
                        //         title: "üö® Configurar Alertas"
                        //     }
                        // },
                        // {
                        //     type: "reply",
                        //     reply: {
                        //         id: "share_weather",
                        //         title: "üì§ Compartilhar"
                        //     }
                        // }
                    ]
                }
            }
        };

        return await this.enviarMensagemInterativaUsandoWhatsappAPI(quickActions);
    }

    // **NOVO** - Lista de cidades sugeridas
    async enviarListaCidadesSugeridas(numeroCelular, cidades, pais = 'Mo√ßambique') {
        if (!cidades || cidades.length === 0) {
            return await this.enviarMensagemUsandoWhatsappAPI(
                "‚ùå Nenhuma cidade encontrada. Tente digitar de forma diferente.",
                numeroCelular
            );
        }

        const sections = [
            {
                title: `Cidades em ${pais}`,
                rows: cidades.slice(0, 10).map((city, index) => ({
                    id: `city_${city.name.replace(/\s+/g, '_')}`,
                    title: city.name.length > 24 ? city.name.substring(0, 21) + '...' : city.name,
                    description: `${city.region}, ${city.country}`
                }))
            }
        ];

        const cityMenu = {
            messaging_product: 'whatsapp',
            recipient_type: "individual",
            to: numeroCelular,
            type: "interactive",
            interactive: {
                type: "list",
                header: {
                    type: "text",
                    text: "üèôÔ∏è Selecionar Cidade"
                },
                body: {
                    text: "Encontrei v√°rias cidades. Selecione a correta:"
                },
                footer: {
                    text: "Toque para selecionar"
                },
                action: {
                    button: "Ver Cidades",
                    sections: sections
                }
            }
        };

        return await this.enviarMensagemInterativaUsandoWhatsappAPI(cityMenu);
    }

    // **NOVO** - Menu principal do bot
    async enviarMenuPrincipal(numeroCelular, nomeUsuario = '') {
        const mainMenu = {
            messaging_product: 'whatsapp',
            recipient_type: "individual",
            to: numeroCelular,
            type: "interactive",
            interactive: {
                type: "button",
                header: {
                    type: "text",
                    text: `üå°Ô∏è Temperature Bot${nomeUsuario ? ` - Ol√°, ${nomeUsuario}!` : ''}`
                },
                body: {
                    text: "Bem-vindo ao seu assistente de clima! O que voc√™ gostaria de fazer?"
                },
                action: {
                    buttons: [
                        {
                            type: "reply",
                            reply: {
                                id: "quick_weather",
                                title: "üå§Ô∏è Clima Agora"
                            }
                        },
                        {
                            type: "reply",
                            reply: {
                                id: "forecast_7days",
                                title: "üìÖ Previs√£o 7 Dias"
                            }
                        },
                        {
                            type: "reply",
                            reply: {
                                id: "settings_menu",
                                title: "‚öôÔ∏è Configura√ß√µes"
                            }
                        }
                    ]
                }
            }
        };

        return await this.enviarMensagemInterativaUsandoWhatsappAPI(mainMenu);
    }

    // **ADAPTADO** - Fun√ß√£o para enviar conte√∫do em partes (para previs√µes longas)
    async enviarConteudoPorPartes(conteudo, numeroCelular, maxLength = 4000) {
        const partes = [];
        let parteAtual = '';

        const linhas = conteudo.split('\n');

        for (const linha of linhas) {
            if ((parteAtual + linha + '\n').length > maxLength) {
                if (parteAtual) {
                    partes.push(parteAtual.trim());
                    parteAtual = linha + '\n';
                } else {
                    // Linha muito longa, dividir for√ßadamente
                    partes.push(linha.substring(0, maxLength));
                    parteAtual = linha.substring(maxLength) + '\n';
                }
            } else {
                parteAtual += linha + '\n';
            }
        }

        if (parteAtual.trim()) {
            partes.push(parteAtual.trim());
        }

        // Enviar cada parte com um pequeno delay
        for (let i = 0; i < partes.length; i++) {
            await this.enviarMensagemUsandoWhatsappAPI(partes[i], numeroCelular);

            // Delay entre mensagens para evitar rate limiting
            if (i < partes.length - 1) {
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }
    }

    // **NOVO** - Enviar mensagem com emoji animado (loading)
    async enviarMensagemCarregamento(numeroCelular, acao = 'Processando') {
        const loadingMessage = `‚è≥ ${acao}...\n\n_Aguarde um momento_`;
        return await this.enviarMensagemUsandoWhatsappAPI(loadingMessage, numeroCelular);
    }

    // **NOVO** - Enviar erro formatado
    async enviarMensagemErro(numeroCelular, erro, sugestao = '') {
        let errorMessage = `‚ùå *Ops! Algo deu errado*\n\n`;
        errorMessage += `${erro}\n\n`;

        if (sugestao) {
            errorMessage += `üí° *Sugest√£o:* ${sugestao}\n\n`;
        }

        errorMessage += `Se o problema persistir, digite */ajuda* para ver os comandos dispon√≠veis.`;

        return await this.enviarMensagemUsandoWhatsappAPI(errorMessage, numeroCelular);
    }

    // **NOVO** - Enviar sucesso formatado
    async enviarMensagemSucesso(numeroCelular, mensagem, emoji = '‚úÖ') {
        const successMessage = `${emoji} *Sucesso!*\n\n${mensagem}`;
        return await this.enviarMensagemUsandoWhatsappAPI(successMessage, numeroCelular);
    }

    // **NOVO** - Sugest√µes inteligentes baseadas no contexto
    async enviarSugestoesInteligentes(numeroCelular, sugestoes, contexto = {}) {
        if (!sugestoes || sugestoes.length === 0) return;

        const { cidade, aspectoClima, nivelUsuario } = contexto;

        const headerText = nivelUsuario === 'advanced' ?
            "üß† An√°lises Relacionadas" :
            "üí° Voc√™ pode se interessar por";

        const suggestionMenu = {
            messaging_product: 'whatsapp',
            recipient_type: "individual",
            to: numeroCelular,
            type: "interactive",
            interactive: {
                type: "list",
                header: {
                    type: "text",
                    text: headerText
                },
                body: {
                    text: `Baseado na sua consulta${cidade ? ` sobre ${cidade}` : ''}, aqui est√£o algumas sugest√µes:`
                },
                footer: {
                    text: "Toque para explorar"
                },
                action: {
                    button: "Ver Sugest√µes",
                    sections: [
                        {
                            title: "Sugest√µes Personalizadas",
                            rows: sugestoes.slice(0, 10).map((sugestao, index) => ({
                                id: `smart_suggestion_${index}`,
                                title: sugestao.length > 24 ? sugestao.substring(0, 21) + '...' : sugestao,
                                description: this.getContextualDescription(sugestao, contexto)
                            }))
                        }
                    ]
                }
            }
        };

        return await this.enviarMensagemInterativaUsandoWhatsappAPI(suggestionMenu);
    }

    // **NOVO** - Bot√µes de a√ß√£o contextual baseados na expertise do usu√°rio
    async enviarAcoesContextuais(numeroCelular, dados, nivelUsuario = 'basic') {
        const { cidade, temperatura, condicoes } = dados;

        let botoes = [];

        // Bot√µes b√°sicos para todos
        botoes.push({
            type: "reply",
            reply: {
                id: `forecast_${cidade}`,
                title: "üìÖ Previs√£o 7 dias"
            }
        });

        // Bot√µes intermedi√°rios
        if (nivelUsuario === 'intermediate' || nivelUsuario === 'advanced') {
            botoes.push({
                type: "reply",
                reply: {
                    id: `compare_cities`,
                    title: "‚öñÔ∏è Comparar Cidades"
                }
            });
        }

        // Bot√µes avan√ßados
        if (nivelUsuario === 'advanced') {
            botoes.push({
                type: "reply",
                reply: {
                    id: `detailed_analysis`,
                    title: "üìä An√°lise T√©cnica"
                }
            });
        } else {
            botoes.push({
                type: "reply",
                reply: {
                    id: `weather_tips`,
                    title: "üí° Dicas Pr√°ticas"
                }
            });
        }

        const contextualActions = {
            messaging_product: 'whatsapp',
            recipient_type: "individual",
            to: numeroCelular,
            type: "interactive",
            interactive: {
                type: "button",
                header: {
                    type: "text",
                    text: `üå§Ô∏è A√ß√µes para ${cidade}`
                },
                body: {
                    text: `${temperatura}¬∞C, ${condicoes}\n\nO que voc√™ gostaria de fazer agora?`
                },
                action: {
                    buttons: botoes.slice(0, 3) // WhatsApp permite m√°ximo 3 bot√µes
                }
            }
        };

        return await this.enviarMensagemInterativaUsandoWhatsappAPI(contextualActions);
    }

    // **NOVO** - Menu de compara√ß√£o de cidades inteligente
    async enviarMenuComparacaoCidades(numeroCelular, cidadeAtual, cidadesSugeridas = []) {
        const sections = [
            {
                title: "Comparar com",
                rows: cidadesSugeridas.slice(0, 8).map((cidade, index) => ({
                    id: `compare_${cidadeAtual}_${cidade.replace(/\s+/g, '_')}`,
                    title: cidade,
                    description: `${cidadeAtual} vs ${cidade}`
                }))
            }
        ];

        // Adicionar op√ß√£o personalizada
        sections[0].rows.push({
            id: "compare_custom",
            title: "Outra cidade",
            description: "Digite o nome da cidade"
        });

        const comparisonMenu = {
            messaging_product: 'whatsapp',
            recipient_type: "individual",
            to: numeroCelular,
            type: "interactive",
            interactive: {
                type: "list",
                header: {
                    type: "text",
                    text: "‚öñÔ∏è Compara√ß√£o Clim√°tica"
                },
                body: {
                    text: `Com qual cidade voc√™ gostaria de comparar ${cidadeAtual}?`
                },
                footer: {
                    text: "Selecione uma op√ß√£o"
                },
                action: {
                    button: "Comparar",
                    sections: sections
                }
            }
        };

        return await this.enviarMensagemInterativaUsandoWhatsappAPI(comparisonMenu);
    }

    // **NOVO** - Alertas personalizados baseados no perfil
    async enviarAlertaPersonalizado(numeroCelular, tipoAlerta, dados, perfilUsuario = {}) {
        const { nivelUsuario, preferencias } = perfilUsuario;
        let emoji, titulo, mensagem;

        switch (tipoAlerta) {
            case 'chuva_iminente':
                emoji = 'üåßÔ∏è';
                titulo = 'Alerta de Chuva';
                mensagem = nivelUsuario === 'advanced' ?
                    `Probabilidade de precipita√ß√£o >80% nas pr√≥ximas 2h em ${dados.cidade}. Sistema de baixa press√£o aproximando-se.` :
                    `Vai chover em breve em ${dados.cidade}! Leve guarda-chuva se for sair.`;
                break;

            case 'temperatura_extrema':
                emoji = dados.temperatura > 35 ? 'üî•' : 'üßä';
                titulo = dados.temperatura > 35 ? 'Calor Extremo' : 'Frio Intenso';
                mensagem = nivelUsuario === 'advanced' ?
                    `Temperatura ${dados.temperatura}¬∞C (${dados.temperatura > 35 ? 'acima' : 'abaixo'} da m√©dia hist√≥rica). √çndice UV elevado.` :
                    `${dados.temperatura > 35 ? 'Muito calor' : 'Muito frio'} hoje em ${dados.cidade}! ${dados.temperatura > 35 ? 'Beba √°gua e procure sombra' : 'Vista-se bem aquecido'}.`;
                break;

            case 'vento_forte':
                emoji = 'üí®';
                titulo = 'Alerta de Vento';
                mensagem = `Ventos fortes previstos para ${dados.cidade}. ${nivelUsuario === 'advanced' ? `Velocidade: ${dados.velocidadeVento}km/h.` : 'Cuidado com objetos soltos!'}`;
                break;
        }

        const alertMessage = `${emoji} *${titulo}*\n\n${mensagem}\n\n‚è∞ ${new Date().toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' })}`;

        return await this.enviarMensagemUsandoWhatsappAPI(alertMessage, numeroCelular);
    }

    // **NOVO** - Resumo semanal inteligente
    async enviarResumoSemanal(numeroCelular, dadosSemana, nivelUsuario = 'basic') {
        const { cidade, temperaturaMedia, diasChuva, melhorDia, piorDia } = dadosSemana;

        let resumo = `üìä *Resumo Semanal - ${cidade}*\n\n`;

        if (nivelUsuario === 'basic') {
            resumo += `üå°Ô∏è Temperatura m√©dia: ${temperaturaMedia}¬∞C\n`;
            resumo += `‚òî Dias com chuva: ${diasChuva}\n`;
            resumo += `‚ú® Melhor dia: ${melhorDia.dia} (${melhorDia.temperatura}¬∞C)\n`;
            resumo += `üòî Pior dia: ${piorDia.dia} (${piorDia.condicoes})\n\n`;
            resumo += `üí° *Dica da semana:* ${this.gerarDicaSemanal(dadosSemana)}`;
        } else if (nivelUsuario === 'intermediate') {
            resumo += `üìà *An√°lise da Semana:*\n`;
            resumo += `‚Ä¢ Temperatura: ${temperaturaMedia}¬∞C (varia√ß√£o: ${dadosSemana.variacao}¬∞C)\n`;
            resumo += `‚Ä¢ Precipita√ß√£o: ${diasChuva} dias, ${dadosSemana.totalChuva}mm\n`;
            resumo += `‚Ä¢ Umidade m√©dia: ${dadosSemana.umidadeMedia}%\n\n`;
            resumo += `üéØ *Tend√™ncia:* ${dadosSemana.tendencia}\n`;
            resumo += `üîÆ *Pr√≥xima semana:* ${dadosSemana.previsaoProxima}`;
        } else {
            resumo += `üìä *An√°lise Meteorol√≥gica Detalhada:*\n\n`;
            resumo += `üå°Ô∏è Temperatura: ${temperaturaMedia}¬∞C (Œ¥: ${dadosSemana.desvio}¬∞C)\n`;
            resumo += `üíß Precipita√ß√£o acumulada: ${dadosSemana.totalChuva}mm\n`;
            resumo += `üí® Vento m√©dio: ${dadosSemana.ventoMedio}km/h\n`;
            resumo += `üåÄ Press√£o m√©dia: ${dadosSemana.pressaoMedia}hPa\n\n`;
            resumo += `üìà *Padr√µes identificados:*\n${dadosSemana.padroes.join('\n')}\n\n`;
            resumo += `üî¨ *An√°lise sin√≥ptica:* ${dadosSemana.analiseSinoptica}`;
        }

        return await this.enviarMensagemUsandoWhatsappAPI(resumo, numeroCelular);
    }

    // **NOVO** - Quiz educativo meteorol√≥gico
    async enviarQuizEducativo(numeroCelular, nivelDificuldade = 'basic') {
        const quizzes = {
            basic: {
                pergunta: "ü§î *Quiz do Clima*\n\nO que causa a chuva?",
                opcoes: [
                    { id: "quiz_a", title: "A) Nuvens pesadas" },
                    { id: "quiz_b", title: "B) Evapora√ß√£o da √°gua" }, // Correto
                    { id: "quiz_c", title: "C) Vento forte" }
                ]
            },
            intermediate: {
                pergunta: "üß† *Quiz Meteorol√≥gico*\n\nQual √© a principal causa da forma√ß√£o de ciclones tropicais?",
                opcoes: [
                    { id: "quiz_a", title: "A) Temperatura oce√¢nica >26¬∞C" }, // Correto
                    { id: "quiz_b", title: "B) Ventos al√≠sios" },
                    { id: "quiz_c", title: "C) Baixa umidade" }
                ]
            },
            advanced: {
                pergunta: "üéì *Quiz Avan√ßado*\n\nO efeito Coriolis √© mais intenso em qual latitude?",
                opcoes: [
                    { id: "quiz_a", title: "A) Equador (0¬∞)" },
                    { id: "quiz_b", title: "B) P√≥los (90¬∞)" }, // Correto
                    { id: "quiz_c", title: "C) Tr√≥picos (23¬∞)" }
                ]
            }
        };

        const quiz = quizzes[nivelDificuldade];

        const quizMenu = {
            messaging_product: 'whatsapp',
            recipient_type: "individual",
            to: numeroCelular,
            type: "interactive",
            interactive: {
                type: "button",
                header: {
                    type: "text",
                    text: "üéØ Quiz Meteorol√≥gico"
                },
                body: {
                    text: quiz.pergunta
                },
                action: {
                    buttons: quiz.opcoes
                }
            }
        };

        return await this.enviarMensagemInterativaUsandoWhatsappAPI(quizMenu);
    }

    // **NOVO** - Configura√ß√µes avan√ßadas do usu√°rio
    async enviarMenuConfiguracaoAvancada(numeroCelular, perfilUsuario = {}) {
        const { nivelUsuario, preferencias, notificacoes } = perfilUsuario;

        const configMenu = {
            messaging_product: 'whatsapp',
            recipient_type: "individual",
            to: numeroCelular,
            type: "interactive",
            interactive: {
                type: "list",
                header: {
                    type: "text",
                    text: "‚öôÔ∏è Configura√ß√µes Avan√ßadas"
                },
                body: {
                    text: "Personalize sua experi√™ncia meteorol√≥gica:"
                },
                footer: {
                    text: "Selecione uma categoria"
                },
                action: {
                    button: "Configurar",
                    sections: [
                        {
                            title: "Personaliza√ß√£o",
                            rows: [
                                {
                                    id: "config_expertise",
                                    title: "N√≠vel de Expertise",
                                    description: `Atual: ${nivelUsuario || 'basic'}`
                                },
                                {
                                    id: "config_style",
                                    title: "Estilo de Resposta",
                                    description: `Atual: ${preferencias?.estilo || 'casual'}`
                                },
                                {
                                    id: "config_interests",
                                    title: "Interesses Clim√°ticos",
                                    description: "Personalizar t√≥picos"
                                }
                            ]
                        },
                        {
                            title: "Notifica√ß√µes Inteligentes",
                            rows: [
                                {
                                    id: "config_alerts",
                                    title: "Alertas Autom√°ticos",
                                    description: `${notificacoes?.alertas ? 'Ativado' : 'Desativado'}`
                                },
                                {
                                    id: "config_schedule",
                                    title: "Hor√°rios de Notifica√ß√£o",
                                    description: `${notificacoes?.horario || '08:00'}`
                                },
                                {
                                    id: "config_frequency",
                                    title: "Frequ√™ncia de Resumos",
                                    description: `${notificacoes?.frequencia || 'Semanal'}`
                                }
                            ]
                        }
                    ]
                }
            }
        };

        return await this.enviarMensagemInterativaUsandoWhatsappAPI(configMenu);
    }

    // **UTILIT√ÅRIOS AUXILIARES**

    getContextualDescription(sugestao, contexto) {
        const { aspectoClima, nivelUsuario } = contexto;

        if (sugestao.includes('previs√£o')) return 'Ver pr√≥ximos dias';
        if (sugestao.includes('comparar')) return 'An√°lise comparativa';
        if (sugestao.includes('que √©')) return 'Explica√ß√£o educativa';
        if (nivelUsuario === 'advanced' && sugestao.includes('an√°lise')) return 'Dados t√©cnicos';

        return 'Informa√ß√£o relacionada';
    }

    gerarDicaSemanal(dadosSemana) {
        if (dadosSemana.diasChuva > 3) {
            return "Semana chuvosa! Tenha sempre guarda-chuva √† m√£o.";
        } else if (dadosSemana.temperaturaMedia > 30) {
            return "Semana quente! Mantenha-se hidratado e evite sol das 11h-15h.";
        } else if (dadosSemana.temperaturaMedia < 20) {
            return "Semana fresca! Roupas em camadas s√£o uma boa op√ß√£o.";
        } else {
            return "Semana com clima agrad√°vel! Aproveite para atividades ao ar livre.";
        }
    }
}

module.exports = WhatsAppApi;