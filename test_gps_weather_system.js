#!/usr/bin/env node

/**
 * TESTE SISTEMA DE CLIMA POR GPS
 * 
 * Este script testa a nova funcionalidade:
 * ‚úÖ Recep√ß√£o de coordenadas GPS via WhatsApp
 * ‚úÖ Busca autom√°tica do clima por latitude/longitude
 * ‚úÖ Resposta contextualizada com IA
 * ‚úÖ Salvamento da cidade como prefer√™ncia do usu√°rio
 * ‚úÖ Alertas autom√°ticos para condi√ß√µes extremas
 */

const WeatherService = require('./weather_api/weather_service');
const OpenAIService = require('./open_ai/open_ai');

console.log('üåç TESTE COMPLETO - CLIMA POR GPS');
console.log('üìç Testando busca de clima por coordenadas...\n');

async function testLocationWeather() {
    const weatherService = new WeatherService();
    const openaiService = new OpenAIService();

    // Coordenadas de teste (baseadas na mensagem recebida)
    const testCoordinates = [
        {
            name: 'Beira (coordenadas recebidas)',
            latitude: -19.844385147095,
            longitude: 34.892330169678
        },
        {
            name: 'Maputo (centro)',
            latitude: -25.9692,
            longitude: 32.5732
        },
        {
            name: 'Nampula',
            latitude: -15.1165,
            longitude: 39.2666
        }
    ];

    console.log('üß™ EXECUTANDO TESTES DE COORDENADAS:\n');

    for (const coord of testCoordinates) {
        try {
            console.log(`üìç Testando: ${coord.name}`);
            console.log(`   Lat: ${coord.latitude}, Lon: ${coord.longitude}`);

            // Teste 1: Buscar clima por coordenadas
            console.log('   üå°Ô∏è Buscando clima...');
            const weatherData = await weatherService.getCurrentWeatherByCoordinates(
                coord.latitude,
                coord.longitude
            );

            console.log(`   ‚úÖ Cidade detectada: ${weatherData.city}, ${weatherData.country}`);
            console.log(`   üå°Ô∏è Temperatura: ${weatherData.temperature}${weatherData.units}`);
            console.log(`   üå§Ô∏è Condi√ß√µes: ${weatherData.description}`);
            console.log(`   üíß Humidade: ${weatherData.humidity}%`);

            // Teste 2: Gerar resposta IA
            console.log('   ü§ñ Gerando resposta IA...');
            const aiResponse = await openaiService.generateSimpleWeatherResponse(weatherData, {});
            console.log(`   ‚úÖ IA respondeu: ${aiResponse.message.substring(0, 100)}...`);

            // Teste 3: Verificar alertas
            console.log('   ‚ö†Ô∏è Verificando alertas...');
            if (weatherData.temperature > 30 || weatherData.humidity > 80) {
                const alertResponse = await openaiService.generateLocationBasedAlert(weatherData, {});
                if (alertResponse.success) {
                    console.log(`   üö® Alerta gerado: ${alertResponse.message}`);
                } else {
                    console.log(`   ‚ÑπÔ∏è Nenhum alerta necess√°rio`);
                }
            } else {
                console.log(`   ‚úÖ Condi√ß√µes normais - sem alertas`);
            }

            console.log('   ‚ú® Teste conclu√≠do com sucesso!\n');

        } catch (error) {
            console.log(`   ‚ùå Erro no teste: ${error.message}`);
            console.log('   üîß Verificar API keys e conectividade\n');
        }
    }

    console.log('üìä SIMULA√á√ÉO DE FLUXO COMPLETO:\n');

    // Simular o fluxo completo como aconteceria no WhatsApp
    const simulationCoord = testCoordinates[0]; // Usar coordenadas da Beira

    console.log('üì± SIMULA√á√ÉO WhatsApp:');
    console.log(`üë§ Usu√°rio envia localiza√ß√£o: ${simulationCoord.latitude}, ${simulationCoord.longitude}`);

    try {
        console.log('ü§ñ Bot processando...');
        console.log('   üìç 1. Confirma√ß√£o instant√¢nea enviada');

        const weatherData = await weatherService.getCurrentWeatherByCoordinates(
            simulationCoord.latitude,
            simulationCoord.longitude
        );

        console.log(`   üåç 2. Cidade detectada: ${weatherData.city}`);
        console.log(`   üå°Ô∏è 3. Clima obtido: ${weatherData.temperature}${weatherData.units}, ${weatherData.description}`);

        const aiResponse = await openaiService.generateSimpleWeatherResponse(weatherData, {});
        console.log(`   ü§ñ 4. Resposta IA gerada`);

        console.log(`   üíæ 5. Cidade salva como prefer√™ncia do usu√°rio`);

        // Mensagem final que seria enviada
        const finalMessage = `üìç *${weatherData.city}, ${weatherData.country}*

üå°Ô∏è **Temperatura:** ${weatherData.temperature}${weatherData.units}
üí® **Sensa√ß√£o t√©rmica:** ${weatherData.feelsLike}${weatherData.units}
üå§Ô∏è **Condi√ß√µes:** ${weatherData.description}
üíß **Humidade:** ${weatherData.humidity}%
üå™Ô∏è **Vento:** ${weatherData.windSpeed} km/h

${aiResponse.message}

üí° **Dica:** Sua localiza√ß√£o foi salva como cidade preferida. Use "/clima" para updates r√°pidos!`;

        console.log('\nüì® MENSAGEM FINAL ENVIADA:');
        console.log('----------------------------------------');
        console.log(finalMessage);
        console.log('----------------------------------------');

        // Verificar alertas
        if (weatherData.temperature > 30 || weatherData.humidity > 80) {
            const alertResponse = await openaiService.generateLocationBasedAlert(weatherData, {});
            if (alertResponse.success) {
                console.log('\nüö® ALERTA ADICIONAL ENVIADO (2s depois):');
                console.log('----------------------------------------');
                console.log(`‚ö†Ô∏è ${alertResponse.message}`);
                console.log('----------------------------------------');
            }
        }

        console.log('\n‚úÖ SIMULA√á√ÉO COMPLETA - SUCESSO!');

    } catch (error) {
        console.log(`‚ùå Erro na simula√ß√£o: ${error.message}`);

        console.log('\nüì® MENSAGEM DE FALLBACK:');
        console.log('----------------------------------------');
        const fallbackMessage = `üìç *Localiza√ß√£o Recebida*

**Coordenadas:** ${simulationCoord.latitude}, ${simulationCoord.longitude}

‚ùå N√£o consegui buscar o clima automaticamente desta localiza√ß√£o.

üí° **Como obter o clima:**
‚Ä¢ Digite o nome da cidade mais pr√≥xima
‚Ä¢ Use: "clima [cidade]"
‚Ä¢ Ou envie "/clima" e me diga sua cidade

**Exemplo:** "clima Beira" ou "temperatura Maputo"`;

        console.log(fallbackMessage);
        console.log('----------------------------------------');
        console.log('\n‚ö†Ô∏è FALLBACK ATIVADO - Sistema resiliente!');
    }

    console.log('\nüìã RESUMO DOS TESTES:');
    console.log('‚úÖ Busca de clima por coordenadas GPS');
    console.log('‚úÖ Detec√ß√£o autom√°tica da cidade');
    console.log('‚úÖ Gera√ß√£o de resposta contextualizada');
    console.log('‚úÖ Sistema de alertas condicionais');
    console.log('‚úÖ Fallback robusto em caso de erro');
    console.log('‚úÖ Integra√ß√£o completa com fluxo WhatsApp');

    console.log('\nüöÄ FUNCIONALIDADE PRONTA PARA USO!');
    console.log('üì± Para testar: envie sua localiza√ß√£o GPS no WhatsApp');
}

// Executar teste
testLocationWeather().catch(console.error);
