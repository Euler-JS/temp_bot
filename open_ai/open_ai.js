require('dotenv').config();
const axios = require('axios');
const AIBasedSuggestionsHandler = require('./suggestions_handler_ai');

class OPENAI {
    constructor() {
        this.token = process.env.OPEN_AI;
        this.baseURL = 'https://api.openai.com/v1';
        this.model = 'gpt-4o-mini';
        this.maxTokens = 300;

        // Inicializar handler de sugest√µes 100% AI
        this.suggestionsHandler = new AIBasedSuggestionsHandler(this.token);

        // Cache para an√°lises frequentes
        this.analysisCache = new Map();
        this.cacheExpiry = 1800000; // 30 minutos

        if (!this.token) {
            console.warn('‚ö†Ô∏è Token OpenAI n√£o encontrado - modo limitado');
        } else {
            console.log('ü§ñ Joana Bot - Assistente Meteorol√≥gico IA inicializado');
        }

        // Informa√ß√µes sobre a identidade da Joana Bot
        this.botIdentity = {
            name: 'Joana Bot',
            fullName: 'Joana Bot - Assistente Meteorol√≥gico Inteligente',
            description: 'Chatbot avan√ßado via WhatsApp para comunidades mo√ßambicanas',
            specialization: 'Informa√ß√µes meteorol√≥gicas personalizadas na cidade da Beira',
            creator: 'Associa√ß√£o FACE',
            creatorDescription: 'Organiza√ß√£o sem fins lucrativos na √°rea de √Ågua, Saneamento, Gest√£o de Res√≠duos s√≥lidos e Prote√ß√£o Ambiental'
        };
    }

    // ===============================================
    // IDENTIDADE E APRESENTA√á√ÉO DA JOANA BOT
    // ===============================================

    getBotIdentityContext() {
        return `Sou a ${this.botIdentity.name}, ${this.botIdentity.description} desenvolvida especialmente para a nossa comunidade mo√ßambicana, com foco na cidade da Beira.

ü§ñ SOBRE MIM:
- Nome: ${this.botIdentity.name}
- Especialidade: ${this.botIdentity.specialization}
- Desenvolvida pela: ${this.botIdentity.creator}
- Miss√£o: Tornar informa√ß√µes meteorol√≥gicas acess√≠veis para todos os n√≠veis de usu√°rios usando linguagem mo√ßambicana familiar

üìç A ${this.botIdentity.creator} √© uma organiza√ß√£o sem fins lucrativos vocacionada na implementa√ß√£o de programas e projetos na √°rea de √Ågua, Saneamento, Gest√£o de Res√≠duos s√≥lidos e Prote√ß√£o Ambiental.

üí° COMO AJUDO:
- Informa√ß√µes meteorol√≥gicas em portugu√™s mo√ßambicano natural
- Conselhos de seguran√ßa baseados no clima
- Dicas pr√°ticas para o dia a dia
- Sugest√µes personalizadas conforme o teu perfil`;
    }

    getIntroductionMessage(includeCommands = true) {
        let intro = `üëã Ol√°! Sou a ${this.botIdentity.name}! 

üå§Ô∏è Sou a tua assistente meteorol√≥gica aqui na nossa terra mo√ßambicana, especialmente para quem est√° na Beira e arredores.

${includeCommands ? `üí° *Comandos especiais:*
‚Ä¢ \`/sugestoes\` - Dicas personalizadas baseadas no tempo atual
‚Ä¢ \`/conselhos\` - Conselhos de seguran√ßa importantes

üó£Ô∏è *Podes perguntar:*
‚Ä¢ "Como est√° o tempo em Maputo?"
‚Ä¢ "Vai chover hoje?"
‚Ä¢ "Que roupa usar?"
‚Ä¢ "Dicas para o calor"

` : ''}üè¢ Desenvolvida com carinho pela **${this.botIdentity.creator}** para servir a nossa comunidade!

ü§î Em que posso ajudar-te hoje?`;

        return intro;
    }

    // ===============================================
    // DETEC√á√ÉO DE INTEN√á√ÉO CLIM√ÅTICA VS GERAL
    // ===============================================

    isWeatherRelatedQuery(analysis) {
        // Lista de intents que s√£o claramente relacionados ao clima
        const weatherIntents = [
            'weather_query_current',
            'weather_query_forecast',
            'activity_recommendation',
            'clothing_advice',
            'weather_tips',
            'city_comparison',
            'weather_education',
            'safety_zones',
            'tempo_atual',
            'futuro',
            'ideias_de_atividades',
            'querem conselhos de roupa',
            'tipo_de_atividade',
            'conselhos_de_roupa'
        ];

        // Lista de intents que s√£o claramente N√ÉO relacionados ao clima
        const nonWeatherIntents = [
            'greeting',
            'general_help',
            'off_topic',
            'thanks',
            'goodbye',
            'personal_question',
            'education_non_weather',
            'politics',
            'food',
            'shopping',
            'time_question',
            'positive_feedback'  // Adicionado feedback positivo como n√£o-clim√°tico
        ];

        // Se √© explicitamente n√£o-clim√°tico, retornar false
        if (nonWeatherIntents.includes(analysis.intent)) {
            console.log(`‚ùå Intent explicitamente n√£o-clim√°tico: ${analysis.intent}`);
            return false;
        }

        // Se √© explicitamente clim√°tico, retornar true
        if (weatherIntents.includes(analysis.intent)) {
            console.log(`‚úÖ Intent explicitamente clim√°tico: ${analysis.intent}`);
            return true;
        }

        // Para intents gen√©ricos, usar an√°lise mais rigorosa
        if (analysis.intent === 'o_que_eles_realmente_querem') {
            // Verificar se o reasoning menciona clima/tempo
            const reasoning = (analysis.reasoning || '').toLowerCase();
            const isWeatherReasoning = reasoning.includes('tempo') ||
                reasoning.includes('clima') ||
                reasoning.includes('temperatura') ||
                reasoning.includes('chuva') ||
                reasoning.includes('atividade') ||
                reasoning.includes('roupa');

            console.log(`üîç Intent gen√©rico - Reasoning menciona clima: ${isWeatherReasoning}`);
            console.log(`üìù Reasoning: "${reasoning}"`);

            return isWeatherReasoning;
        }

        // Para outros casos, verificar se realmente precisa de dados meteorol√≥gicos
        const requiresWeatherData = analysis.requires_weather_data === true;

        console.log(`üîç An√°lise final:
- Intent: ${analysis.intent}
- √â intent clim√°tico: false (n√£o est√° na lista)
- Requer dados clima: ${requiresWeatherData}`);

        return requiresWeatherData;
    }

    // ===============================================
    // RESPOSTA GERAL AMIG√ÅVEL EM PORTUGU√äS MO√áAMBICANO
    // ===============================================

    async generateFriendlyMozambicanResponse(message, analysis, userContext = {}) {
        try {
            console.log('üí¨ Gerando resposta amig√°vel em portugu√™s mo√ßambicano');

            if (!this.token) {
                return this.generateBasicFriendlyResponse(message, analysis);
            }

            const prompt = this.buildFriendlyResponsePrompt(message, analysis, userContext);
            const response = await this.callOpenAI(prompt, 0.8);

            return {
                success: true,
                message: response.trim(),
                type: 'friendly_general',
                method: 'ai_powered'
            };

        } catch (error) {
            console.error('‚ùå Erro resposta amig√°vel:', error.message);
            return {
                success: true,
                message: this.generateBasicFriendlyResponse(message, analysis),
                type: 'friendly_general',
                method: 'fallback'
            };
        }
    }

    buildFriendlyResponsePrompt(message, analysis, userContext) {
        return `${this.getBotIdentityContext()}

A pessoa me disse: "${message}"

Contexto da conversa:
- J√° conversamos ${userContext.queryCount || 0} vezes
- √öltima cidade que mencionou: ${userContext.lastCity || 'nenhuma'}
- N√≠vel de experi√™ncia: ${userContext.expertiseLevel || 'est√° come√ßando'}

A an√°lise da pergunta mostra que:
- Intent: ${analysis.intent}
- Confian√ßa: ${analysis.confidence}
- Reasoning: ${analysis.reasoning}

Esta pergunta N√ÉO √© sobre clima/tempo, ent√£o quero dar uma resposta amig√°vel e √∫til como a Joana Bot em portugu√™s de Mo√ßambique.

INSTRU√á√ïES:
- Identifica-te como Joana Bot quando apropriado (especialmente em primeiras intera√ß√µes)
- Usa linguagem mo√ßambicana natural ("Eh p√°", "fixes", "eish", etc.)
- Seja √∫til e amig√°vel
- Se n√£o souber sobre o t√≥pico, admite honestly mas oferece ajuda meteorol√≥gica
- M√°ximo 150 palavras
- Inclui emojis apropriados
- Se a pessoa cumprimentar, apresenta-te brevemente
- Sempre oferece ajuda meteorol√≥gica como alternativa

EXEMPLOS:
- Se disser "Ol√°" ‚Üí "Eh p√°, ol√°! Sou a Joana Bot, a tua assistente meteorol√≥gica! Como posso ajudar-te com o tempo hoje?"
- Se perguntar sobre comida ‚Üí "Eish, sobre restaurantes n√£o sei muito, mas posso ajudar-te a saber o clima para decidir onde comer!"
- Se for primeira conversa ‚Üí Inclui breve apresenta√ß√£o da Joana Bot

Minha resposta amig√°vel como Joana Bot:`;
    }

    generateBasicFriendlyResponse(message, analysis) {
        const lowerMessage = message.toLowerCase();

        if (lowerMessage.includes('ol√°') || lowerMessage.includes('oi') || lowerMessage.includes('bom dia')) {
            return `üëã Ol√°! Sou a ${this.botIdentity.name}, a tua assistente meteorol√≥gica aqui na nossa terra mo√ßambicana! 

üå§Ô∏è Especializo-me em informa√ß√µes do tempo para comunidades da Beira e arredores.

üí° *Posso ajudar-te com:*
‚Ä¢ Temperatura actual de qualquer cidade
‚Ä¢ Previs√µes meteorol√≥gicas  
‚Ä¢ Dicas baseadas no clima
‚Ä¢ Sugest√µes de atividades
‚Ä¢ Conselhos de seguran√ßa

üí¨ √â s√≥ perguntares algo como "Como est√° o tempo em Maputo?" ou usar "/sugestoes" para dicas personalizadas!

üè¢ Desenvolvida pela **${this.botIdentity.creator}** para servir a nossa comunidade.`;
        }

        if (lowerMessage.includes('ajuda') || lowerMessage.includes('help') || lowerMessage.includes('quem √©s')) {
            return `ÔøΩ Sou a ${this.botIdentity.name}! ${this.botIdentity.description} desenvolvida especialmente para a nossa comunidade mo√ßambicana.

üéØ *Sou especialista em:*
‚Ä¢ üå°Ô∏è Temperatura e clima
‚Ä¢ üåßÔ∏è Previs√µes de chuva  
‚Ä¢ üëï Que roupa usar
‚Ä¢ üèÉ Atividades para o tempo
‚Ä¢ üèôÔ∏è Comparar cidades
‚Ä¢ ‚ö†Ô∏è Conselhos de seguran√ßa

üí° *Comandos especiais:*
‚Ä¢ \`/sugestoes\` - Dicas personalizadas
‚Ä¢ \`/conselhos\` - Conselhos de seguran√ßa

üè¢ Criada pela **${this.botIdentity.creator}** - organiza√ß√£o dedicada ao ambiente e saneamento em Mo√ßambique.

üí¨ Experimenta perguntar: "Tempo em Beira hoje" ou "/sugestoes"`;
        }

        return `üòä Sou a ${this.botIdentity.name}, percebi que perguntaste: "${message}"

ü§î Sobre esse t√≥pico espec√≠fico n√£o sou especialista, mas sou muito boa com o tempo e clima!

üå§Ô∏è *Posso ajudar-te com:*
‚Ä¢ Como est√° o tempo na tua cidade
‚Ä¢ Que roupa usar hoje
‚Ä¢ Atividades para fazer baseadas no clima
‚Ä¢ Previs√µes meteorol√≥gicas
‚Ä¢ Conselhos de seguran√ßa clim√°tica

üí¨ Que tal perguntares algo sobre o clima? Tipo "Como est√° o tempo?" ou usar "/sugestoes" para dicas personalizadas?

Estou aqui para te ajudar! üá≤üáø`;
    }

    // ===============================================
    // AN√ÅLISE PRINCIPAL DE MENSAGENS COM AI
    // ===============================================

    async analyzeMessage(message, context = {}) {
        try {
            console.log(`üß† Analisando mensagem com AI: "${message}"`);

            // Verificar cache
            const cacheKey = this.getCacheKey(message, context);
            const cached = this.getCachedAnalysis(cacheKey);
            if (cached) {
                return cached;
            }

            // An√°lise completa com AI
            const analysis = await this.performAIAnalysis(message, context);

            // Cache do resultado
            this.setCachedAnalysis(cacheKey, analysis);

            return analysis;

        } catch (error) {
            console.error('‚ùå Erro na an√°lise AI:', error.message);
            return this.createFallbackAnalysis(message, context);
        }
    }

    async performAIAnalysis(message, context) {
        if (!this.token) {
            return this.performRuleBasedAnalysis(message, context);
        }

        const prompt = this.buildAnalysisPrompt(message, context);

        try {
            const response = await this.callOpenAI(prompt, 0.3);
            const analysis = JSON.parse(response);

            return {
                success: true,
                analysis: analysis,
                method: 'ai_powered',
                originalMessage: message
            };

        } catch (error) {
            console.error('‚ùå Erro AI analysis:', error.message);
            return this.performRuleBasedAnalysis(message, context);
        }
    }

    buildAnalysisPrompt(message, context) {
        return `Eh p√°, sou um assistente que entende bem como os mo√ßambicanos falam sobre o tempo.

A pessoa escreveu: "${message}"

Contexto da conversa:
- J√° fizeram ${context.queryCount || 0} perguntas antes
- √öltima cidade que mencionaram: ${context.lastCity || 'nenhuma ainda'}
- Onde est√£o agora: ${context.currentLocation || 'n√£o sei'}

Preciso perceber o que eles realmente querem. SEJA MUITO PRECISO:

PERGUNTAS SOBRE CLIMA/TEMPO:
- "Maputo", "como est√° l√°", "tempo hoje" ‚Üí tempo_atual (requires_weather_data: true)
- "amanh√£", "previs√£o", "vai chover" ‚Üí futuro (requires_weather_data: true)
- "o que fazer", "h√° atividade", "onde ir" ‚Üí ideias_de_atividades (requires_weather_data: true)
- "que roupa", "como vestir" ‚Üí conselhos_de_roupa (requires_weather_data: true)
- "calor", "frio", "dicas clima" ‚Üí weather_tips (requires_weather_data: true)
- "zonas de risco", "√°reas perigosas", "seguran√ßa", "inunda√ß√£o", "ciclone" ‚Üí safety_zones (requires_weather_data: true)

PERGUNTAS N√ÉO SOBRE CLIMA:
- "ol√°", "bom dia", "como est√°s" ‚Üí greeting (requires_weather_data: false)
- "ajuda", "n√£o entendo", "comandos" ‚Üí general_help (requires_weather_data: false)
- "obrigado", "muito obrigado" ‚Üí thanks (requires_weather_data: false)
- "muito bom", "muito boa", "perfeito", "excelente", "√≥ptimo" ‚Üí positive_feedback (requires_weather_data: false)
- "pol√≠tica", "governo", "elei√ß√µes" ‚Üí politics (requires_weather_data: false)
- "comida", "onde comer", "restaurante" ‚Üí food (requires_weather_data: false)
- "comprar", "loja", "shopping" ‚Üí shopping (requires_weather_data: false)
- "que horas", "hora actual" ‚Üí time_question (requires_weather_data: false)
- "capital", "geografia", "hist√≥ria" ‚Üí education_non_weather (requires_weather_data: false)

PERGUNTAS SOBRE IDENTIDADE DO BOT - SEMPRE N√ÉO-CLIM√ÅTICAS:
- "que voc√™ √©", "quem √© voc√™", "quem √©s", "o que √©" ‚Üí general_help (requires_weather_data: false)
- "o que voc√™ faz", "que √© a tua fun√ß√£o", "para que serves" ‚Üí general_help (requires_weather_data: false)
- "qual √© o teu nome", "como te chamas", "que bot √© este" ‚Üí general_help (requires_weather_data: false)
- "quem te criou", "qual √© a tua fun√ß√£o", "o que fazes" ‚Üí general_help (requires_weather_data: false)
- Qualquer pergunta sobre identidade, fun√ß√£o, nome ou criador do bot ‚Üí general_help (requires_weather_data: false)

REGRA CR√çTICA: Se a pergunta √© sobre O QUE O BOT √â ou FAZ, √© SEMPRE general_help e NUNCA sobre clima!

Responde s√≥ o JSON:

{
    "intent": "categoria_espec√≠fica_da_lista_acima",
    "confidence": 0.85,
    "entities": {
        "cities": ["s√≥_se_mencionaram_cidades_para_clima"],
        "timeframe": "quando_querem_saber",
        "weather_aspect": "s√≥_se_for_sobre_clima",
        "activity_type": "s√≥_se_for_atividade_baseada_no_clima"
    },
    "reasoning": "porque_penso_isso_e_se_√©_ou_n√£o_sobre_clima",
    "response_type": "como_responder",
    "priority": "urg√™ncia",
    "requires_weather_data": true_ou_false_baseado_na_pergunta,
    "suggested_followup": "o_que_sugerir_depois"
}`;
    }

    // ===============================================
    // M√âTODO DE COMPATIBILIDADE PARA RESPOSTA CONTEXTUAL
    // ===============================================

    async generateContextualResponse(analysis, weatherData, userContext = {}) {
        try {
            console.log('ü§ñ Gerando resposta contextual baseada em AI');

            // Se n√£o h√° dados meteorol√≥gicos, retornar erro
            if (!weatherData || !weatherData.temperature) {
                return {
                    success: false,
                    message: "Dados meteorol√≥gicos n√£o dispon√≠veis"
                };
            }

            // Gerar resposta contextual baseada no intent e dados
            const response = await this.generateWeatherResponse(analysis, weatherData, userContext);

            // Gerar sugest√µes inteligentes
            const suggestions = await this.generateSmartSuggestions(userContext, weatherData);

            return {
                success: true,
                message: response,
                suggestions: suggestions.suggestions || [],
                weatherData: weatherData,
                analysis: analysis
            };

        } catch (error) {
            console.error('‚ùå Erro na resposta contextual:', error.message);
            return {
                success: false,
                message: "Erro ao processar resposta",
                error: error.message
            };
        }
    }

    async generateWeatherResponse(analysis, weatherData, userContext) {
        try {
            // Se √© uma pergunta sobre zonas de risco, usar fun√ß√£o espec√≠fica
            if (analysis.intent === 'safety_zones') {
                return await this.generateSafetyZonesResponse(analysis, weatherData, userContext);
            }

            if (!this.token) {
                return this.generateBasicWeatherResponse(weatherData, analysis);
            }

            const prompt = this.buildWeatherResponsePrompt(analysis, weatherData, userContext);
            const response = await this.callOpenAI(prompt, 0.7);

            return response.trim();

        } catch (error) {
            console.error('‚ùå Erro AI weather response:', error.message);
            return this.generateBasicWeatherResponse(weatherData, analysis);
        }
    }

    buildWeatherResponsePrompt(analysis, weatherData, userContext) {
        const temp = parseInt(weatherData.temperature);
        const city = weatherData.city;
        const isActivityRequest = analysis.intent === 'ideias_de_atividades' ||
            analysis.intent === 'activity_recommendation' ||
            analysis.intent === 'tipo_de_atividade';

        if (city.toLowerCase() === 'beira' && isActivityRequest) {
            return `A pessoa perguntou onde pode ir hoje em Beira. Com ${temp}¬∞C e ${weatherData.description}, quero dar uma resposta completa e estruturada.

FORMATO IDEAL DA RESPOSTA:

üó∫Ô∏è *Eh p√°, vou te dar umas ideias fixes de locais para ires hoje em Beira!*

üå§Ô∏è *Como est√° o tempo:*
‚Ä¢ ${temp}¬∞C - ${weatherData.description}
‚Ä¢ Humidade: ${weatherData.humidity}%

[Depois escolher uma das categorias baseada na temperatura]:

${this.getLocationCategoryForTemperature(temp, weatherData.description)}

ÔøΩÔ∏è *Locais espec√≠ficos da Beira:*
üìç ‚Ä¢ Mac√∫ti - zona da praia
üìç ‚Ä¢ Manga - centro comercial
üìç ‚Ä¢ Goto - bairro residencial
üìç ‚Ä¢ Munhava - zona movimentada

üí¨ *Quer saber mais sobre algum local espec√≠fico?*
Exemplo: "Como est√° o Mac√∫ti hoje?" ou "Restaurantes no Manga"

Responde exatamente neste formato, adaptando s√≥ a parte da temperatura:`;
        } else {
            return `Eh p√°, vou te ajudar com informa√ß√µes fixes sobre ${city}!

PERGUNTA: ${analysis.intent}
TEMPO ATUAL em ${city}:
- ${temp}¬∞C (${temp > 30 ? 'bem quente!' : temp < 18 ? 'fresquinho' : 'temperatura boa'})
- ${weatherData.description}
- Humidade: ${weatherData.humidity}%

Quero dar uma resposta natural e pr√°tica como um mo√ßambicano daria. Se perguntaram sobre locais, dar locais espec√≠ficos. Se perguntaram sobre tempo, dar detalhes do tempo.

Use linguagem mo√ßambicana casual, emojis apropriados, m√°ximo 300 palavras.

Minha resposta:`;
        }
    }

    getLocationCategoryForTemperature(temp, description) {
        if (description.toLowerCase().includes('chuva')) {
            return `‚òî *Com chuva, melhor locais cobertos:*
üè¨ ‚Ä¢ Shopping centers (Beira Shopping)
üçΩÔ∏è ‚Ä¢ Restaurantes com cobertura
üé¨ ‚Ä¢ Cinema ou lugares fechados
üìö ‚Ä¢ Bibliotecas ou centros culturais
‚òï ‚Ä¢ Caf√©s aconchegantes

üí° *Dica:* Leva guarda-chuva se tiveres que sair!`;
        } else if (temp > 30) {
            return `üî• *Com ${temp}¬∞C, locais fresquinhos s√£o melhores:*
üèñÔ∏è ‚Ä¢ Praia do Mac√∫ti (com sombra)
üå≥ ‚Ä¢ Parques com √°rvores grandes
üè¨ ‚Ä¢ Shopping centers (ar condicionado)
üç® ‚Ä¢ Gelatarias para refrescar
üèä ‚Ä¢ Piscinas ou clubes

üí° *Dica:* Vai de manh√£ cedo ou final da tarde!`;
        } else if (temp > 25) {
            return `üòä *Com ${temp}¬∞C, tens muitas op√ß√µes boas:*
üèñÔ∏è ‚Ä¢ Praia do Mac√∫ti
üö∂ ‚Ä¢ Centro da cidade (Manga)
üå≥ ‚Ä¢ Jardins municipais
üõçÔ∏è ‚Ä¢ Mercado central
üçΩÔ∏è ‚Ä¢ Restaurantes com esplanada
‚õµ ‚Ä¢ Porto da Beira

üí° *Dica:* Tempo perfeito para qualquer atividade!`;
        } else if (temp > 20) {
            return `üå§Ô∏è *Com ${temp}¬∞C fresquinho, ideais:*
üö∂ ‚Ä¢ Caminhadas pelo centro
‚òï ‚Ä¢ Caf√©s ao ar livre
üèõÔ∏è ‚Ä¢ Museus e centros culturais
üõçÔ∏è ‚Ä¢ Compras no centro
üå≥ ‚Ä¢ Parques para relaxar

üí° *Dica:* Leva um casaco leve!`;
        } else {
            return `üßä *Com ${temp}¬∞C, melhor locais quentinhos:*
‚òï ‚Ä¢ Caf√©s fechados e aquecidos
üè¨ ‚Ä¢ Shopping centers
üçΩÔ∏è ‚Ä¢ Restaurantes com ambiente fechado
üé¨ ‚Ä¢ Cinema
üìö ‚Ä¢ Bibliotecas

üí° *Dica:* Vista-te bem quente!`;
        }
    }

    generateBasicWeatherResponse(weatherData, analysis) {
        const temp = parseInt(weatherData.temperature);
        const city = weatherData.city;
        const condition = weatherData.description || 'tempo normal';

        let tempDescription = '';
        if (temp > 30) {
            tempDescription = 'est√° bem quente';
        } else if (temp > 25) {
            tempDescription = 'est√° agrad√°vel';
        } else if (temp > 20) {
            tempDescription = 'est√° fresco';
        } else {
            tempDescription = 'est√° frio';
        }

        return `üå§Ô∏è **Clima em ${city}**

Agora ${tempDescription} com ${temp}¬∞C.

üå°Ô∏è **Condi√ß√µes atuais:**
‚Ä¢ Temperatura: ${temp}¬∞C
‚Ä¢ Estado: ${condition}
‚Ä¢ Humidade: ${weatherData.humidity || 'N/A'}%

${this.getTemperatureTip(temp)}`;
    }

    getTemperatureTip(temperature) {
        if (temperature > 30) {
            return 'üí° **Dica:** Mantenha-se hidratado e procure sombra!';
        } else if (temperature > 25) {
            return 'üí° **Dica:** Tempo ideal para atividades ao ar livre!';
        } else if (temperature > 20) {
            return 'üí° **Dica:** Leve um casaco leve se sair √† noite!';
        } else {
            return 'üí° **Dica:** Vista roupas quentes e mantenha-se aquecido!';
        }
    }

    // ===============================================
    // INFORMA√á√ïES SOBRE ZONAS DE RISCO CLIM√ÅTICO
    // ===============================================

    async generateSafetyZonesResponse(analysis, weatherData, userContext) {
        try {
            if (!this.token) {
                return this.generateBasicSafetyZonesResponse(weatherData);
            }

            const prompt = this.buildSafetyZonesPrompt(analysis, weatherData, userContext);
            const response = await this.callOpenAI(prompt, 0.7);

            return response.trim();

        } catch (error) {
            console.error('‚ùå Erro AI safety zones response:', error.message);
            return this.generateBasicSafetyZonesResponse(weatherData);
        }
    }

    buildSafetyZonesPrompt(analysis, weatherData, userContext) {
        const temp = parseInt(weatherData.temperature);
        const city = weatherData.city.toLowerCase();
        const condition = weatherData.description;

        return `A pessoa perguntou sobre zonas de risco na ${city} relacionadas ao clima. Com ${temp}¬∞C e ${condition}, preciso dar informa√ß√µes importantes de seguran√ßa.

INFORMA√á√ïES SOBRE ZONAS DE RISCO EM ${city.toUpperCase()}:

${city === 'beira' ? `
üèôÔ∏è *BEIRA - Zonas de Risco Clim√°tico:*

‚ö†Ô∏è *ZONAS DE ALTO RISCO:*
‚Ä¢ Mac√∫ti/Costa - vulner√°vel a ciclones e mar√©s altas
‚Ä¢ Munhava baixa - √°reas de inunda√ß√£o frequente  
‚Ä¢ Manga baixa - zona baixa sujeita a alagamentos
‚Ä¢ Marromeu - √°reas rurais pr√≥ximas ao Zambeze
‚Ä¢ Estaquinha - zona costeira exposta

üî¥ *RISCOS PRINCIPAIS:*
‚Ä¢ Ciclones tropicais (Nov-Abril)
‚Ä¢ Inunda√ß√µes do Rio Zambeze
‚Ä¢ Eros√£o costeira e mar√©s altas
‚Ä¢ Ventos fortes durante tempestades

` : `
üèôÔ∏è *${city.toUpperCase()} - Zonas de Risco Clim√°tico:*

‚ö†Ô∏è *RISCOS COMUNS EM MO√áAMBIQUE:*
‚Ä¢ Zonas baixas - risco de inunda√ß√£o
‚Ä¢ √Åreas pr√≥ximas a rios - cheias sazonais
‚Ä¢ Costa - ciclones e mar√©s altas
‚Ä¢ Zonas rurais - isolamento durante tempestades
`}

üå¶Ô∏è *BASEADO NO TEMPO ATUAL (${temp}¬∞C, ${condition}):*
${this.getCurrentWeatherRiskAssessment(temp, condition)}

üõ°Ô∏è *MEDIDAS DE PREVEN√á√ÉO:*
‚Ä¢ Mantenha-se informado sobre previs√µes meteorol√≥gicas
‚Ä¢ Tenha sempre um kit de emerg√™ncia preparado
‚Ä¢ Conhe√ßa as rotas de evacua√ß√£o da tua √°rea
‚Ä¢ Evite constru√ß√µes em zonas baixas ou pr√≥ximas a rios

üì± *CONTACTOS DE EMERG√äNCIA:*
‚Ä¢ INGC (Instituto Nacional de Gest√£o de Calamidades): 119
‚Ä¢ Bombeiros: 198
‚Ä¢ Pol√≠cia: 119

üí° *Dica:* Durante a √©poca cicl√≥nica (Nov-Abril), mantenha-se especialmente atento aos alertas meteorol√≥gicos!

Responde de forma natural como um mo√ßambicano experiente daria este conselho, m√°ximo 400 palavras:`;
    }

    getCurrentWeatherRiskAssessment(temp, condition) {
        if (condition.toLowerCase().includes('chuva') || condition.toLowerCase().includes('tempestade')) {
            return `üåßÔ∏è Com chuva atual, EVITE:
‚Ä¢ Zonas baixas que podem alagar
‚Ä¢ Atravessar rios ou ribeiras
‚Ä¢ Circular em estradas n√£o pavimentadas
‚Ä¢ √Åreas pr√≥ximas ao mar durante mar√©s altas`;
        } else if (temp > 35) {
            return `üî• Com calor extremo (${temp}¬∞C), CUIDADO com:
‚Ä¢ Desidrata√ß√£o em √°reas expostas
‚Ä¢ Inc√™ndios em vegeta√ß√£o seca
‚Ä¢ Problemas de sa√∫de em zonas sem sombra`;
        } else if (condition.toLowerCase().includes('vento')) {
            return `üí® Com vento forte, EVITE:
‚Ä¢ √Åreas com √°rvores grandes
‚Ä¢ Estruturas tempor√°rias ou fr√°geis
‚Ä¢ Atividades no mar ou rios`;
        } else {
            return `‚úÖ Condi√ß√µes meteorol√≥gicas est√°veis atualmente.
‚Ä¢ Mantenha-se atento a mudan√ßas no tempo
‚Ä¢ √âpoca das chuvas: Nov-Abril (maior risco)
‚Ä¢ √âpoca seca: Mai-Out (mais est√°vel)`;
        }
    }

    generateBasicSafetyZonesResponse(weatherData) {
        const city = weatherData.city;
        const temp = parseInt(weatherData.temperature);
        const condition = weatherData.description;

        return `‚ö†Ô∏è **Zonas de Risco em ${city}**

üå¶Ô∏è **Condi√ß√µes atuais:** ${temp}¬∞C, ${condition}

üî¥ **√Åreas de maior risco:**
‚Ä¢ Zonas baixas pr√≥ximas a rios
‚Ä¢ √Åreas costeiras durante tempestades
‚Ä¢ Constru√ß√µes em encostas √≠ngremes
‚Ä¢ Bairros sem drenagem adequada

üí° **Recomenda√ß√µes gerais:**
‚Ä¢ Mantenha-se informado sobre o tempo
‚Ä¢ Tenha um plano de evacua√ß√£o
‚Ä¢ Evite √°reas de risco durante chuvas fortes
‚Ä¢ Contacte autoridades locais para informa√ß√µes espec√≠ficas

üìû **Emerg√™ncias:** 119 (INGC)`;
    }

    // ===============================================
    // INFORMA√á√ïES SOBRE ZONAS SEGURAS E REF√öGIO
    // ===============================================

    async generateSafeZonesInformation(weatherData, userContext = {}) {
        try {
            if (!this.token) {
                return this.generateBasicSafeZonesInformation(weatherData);
            }

            const prompt = this.buildSafeZonesInformationPrompt(weatherData, userContext);
            const response = await this.callOpenAI(prompt, 0.7);

            return {
                success: true,
                message: response.trim(),
                method: 'ai_powered'
            };

        } catch (error) {
            console.error('‚ùå Erro AI safe zones info:', error.message);
            return this.generateBasicSafeZonesInformation(weatherData);
        }
    }

    buildSafeZonesInformationPrompt(weatherData, userContext) {
        const temp = parseInt(weatherData.temperature);
        const city = weatherData.city.toLowerCase();
        const condition = weatherData.description;

        return `O utilizador pediu informa√ß√µes sobre zonas seguras e pontos de ref√∫gio em ${city}. Com ${temp}¬∞C e ${condition}, preciso dar informa√ß√µes pr√°ticas de seguran√ßa.

INFORMA√á√ïES SOBRE ZONAS SEGURAS EM ${city.toUpperCase()}:

${city === 'beira' ? `
üõ°Ô∏è *BEIRA - Zonas Seguras e Pontos de Ref√∫gio:*

‚úÖ *CENTROS DE EVACUA√á√ÉO OFICIAIS:*
‚Ä¢ Centro Comunit√°rio da Manga - zona alta e segura
‚Ä¢ Escola Secund√°ria Samora Machel - estrutura resistente
‚Ä¢ Hospital Central da Beira - sempre operacional
‚Ä¢ Centro de Sa√∫de do Mac√∫ti - ponto de apoio
‚Ä¢ Est√°dio do Ferrovi√°rio - √°rea ampla para concentra√ß√£o

üè• *HOSPITAIS E CENTROS DE SA√öDE:*
‚Ä¢ Hospital Central da Beira (24h)
‚Ä¢ Hospital Privado Beira Medical Centre
‚Ä¢ Centro de Sa√∫de da Manga
‚Ä¢ Centro de Sa√∫de do Goto
‚Ä¢ Cl√≠nica S√£o Lucas

üè´ *ESCOLAS EM ZONAS SEGURAS:*
‚Ä¢ Escola Secund√°ria Samora Machel
‚Ä¢ Escola Prim√°ria da Manga
‚Ä¢ Instituto Industrial da Beira
‚Ä¢ Universidade Cat√≥lica de Mo√ßambique

` : `
üõ°Ô∏è *${city.toUpperCase()} - Zonas Seguras e Pontos de Ref√∫gio:*

‚úÖ *TIPOS DE LOCAIS SEGUROS:*
‚Ä¢ Edif√≠cios p√∫blicos em zonas altas
‚Ä¢ Hospitais e centros de sa√∫de
‚Ä¢ Escolas com estruturas s√≥lidas
‚Ä¢ Centros comunit√°rios
‚Ä¢ Igrejas em locais elevados
`}

üå¶Ô∏è *BASEADO NO TEMPO ATUAL (${temp}¬∞C, ${condition}):*
${this.getCurrentSafetyRecommendations(temp, condition)}

üéí *KIT DE EMERG√äNCIA ESSENCIAL:*
‚Ä¢ √Ågua pot√°vel (3 litros por pessoa)
‚Ä¢ Alimentos n√£o perec√≠veis (3 dias)
‚Ä¢ Medicamentos pessoais
‚Ä¢ Lanterna e pilhas extras
‚Ä¢ R√°dio port√°til
‚Ä¢ Documentos em saco pl√°stico
‚Ä¢ Roupa extra e cobertor

üì± *CONTACTOS DE EMERG√äNCIA SEMPRE √Ä M√ÉO:*
‚Ä¢ INGC (Gest√£o de Calamidades): 119
‚Ä¢ Bombeiros: 198
‚Ä¢ Pol√≠cia: 119
‚Ä¢ Cruz Vermelha: +258 21 491 323

üó∫Ô∏è *COMO CHEGAR AOS PONTOS SEGUROS:*
‚Ä¢ Evite zonas baixas durante evacua√ß√£o
‚Ä¢ Use rotas principais pavimentadas
‚Ä¢ Mantenha-se em grupo quando poss√≠vel
‚Ä¢ Siga instru√ß√µes das autoridades locais

üí° *Dica Principal:* Tenha sempre um plano de evacua√ß√£o preparado e conhe√ßa pelo menos 2 rotas diferentes para chegar aos pontos seguros!

Responde de forma natural e tranquilizadora como um mo√ßambicano experiente daria este conselho, m√°ximo 500 palavras:`;
    }

    getCurrentSafetyRecommendations(temp, condition) {
        if (condition.toLowerCase().includes('chuva') || condition.toLowerCase().includes('tempestade')) {
            return `üåßÔ∏è Com chuva atual, PROCURE IMEDIATAMENTE:
‚Ä¢ Edif√≠cios s√≥lidos em zonas altas
‚Ä¢ Evite s√≥t√£os - fique no andar t√©rreo de edif√≠cios altos
‚Ä¢ Mantenha-se longe de linhas el√©ctricas
‚Ä¢ Se estiver na estrada, procure abrigo seguro`;
        } else if (temp > 35) {
            return `üî• Com calor extremo (${temp}¬∞C), ZONAS FRESCAS:
‚Ä¢ Edif√≠cios com ar condicionado
‚Ä¢ Hospitais sempre refrigerados
‚Ä¢ Centros comerciais
‚Ä¢ Locais com sombra e ventila√ß√£o`;
        } else if (condition.toLowerCase().includes('vento')) {
            return `üí® Com vento forte, ESTRUTURAS S√ìLIDAS:
‚Ä¢ Edif√≠cios de bet√£o em zonas baixas
‚Ä¢ Evite estruturas tempor√°rias
‚Ä¢ Mantenha-se longe de √°rvores grandes`;
        } else {
            return `‚úÖ Condi√ß√µes est√°veis - bom momento para:
‚Ä¢ Revisar o teu plano de evacua√ß√£o
‚Ä¢ Verificar o kit de emerg√™ncia
‚Ä¢ Conhecer melhor os pontos seguros da tua √°rea
‚Ä¢ Memorizar contactos de emerg√™ncia`;
        }
    }

    async generateSafeZonesOptions(weatherData, userContext = {}) {
        try {
            if (!this.token) {
                return this.getBasicSafeZonesOptions(weatherData);
            }

            const prompt = this.buildSafeZonesOptionsPrompt(weatherData, userContext);
            const response = await this.callOpenAI(prompt, 0.8);

            try {
                const options = JSON.parse(response);
                return {
                    success: true,
                    options: options,
                    method: 'ai_powered'
                };
            } catch (parseError) {
                console.error('‚ùå Parse error safe zones options:', parseError.message);
                return this.getBasicSafeZonesOptions(weatherData);
            }

        } catch (error) {
            console.error('‚ùå Erro AI safe zones options:', error.message);
            return this.getBasicSafeZonesOptions(weatherData);
        }
    }

    buildSafeZonesOptionsPrompt(weatherData, userContext) {
        const city = weatherData.city.toLowerCase();
        const condition = weatherData.description;

        return `Gerar op√ß√µes de lista interativa sobre zonas seguras em ${city} com condi√ß√µes ${condition}.

Criar exactamente 5 op√ß√µes espec√≠ficas e √∫teis para a situa√ß√£o actual.

IMPORTANTE - LIMITES OBRIGAT√ìRIOS:
- title: m√°ximo 24 caracteres (incluindo emojis)
- description: m√°ximo 72 caracteres
- id: sem espa√ßos, usar underscore

Responde s√≥ JSON no formato:
[
  {
    "id": "identificador_unico",
    "title": "T√≠tulo Curto (max 24)",
    "description": "Descri√ß√£o √∫til (max 72 chars)"
  }
]

Exemplo baseado na cidade e condi√ß√µes:
- "Centros Evacua√ß√£o" (16 chars) - "Locais oficiais mais pr√≥ximos" (30 chars)
- "Hospitais 24h" (13 chars) - "Sempre abertos para emerg√™ncias" (32 chars)
- "Rotas Seguras" (13 chars) - "Como chegar aos pontos seguros" (30 chars)
- "Kit Emerg√™ncia" (14 chars) - "O que levar numa evacua√ß√£o" (26 chars)
- "Contactos SOS" (13 chars) - "N√∫meros essenciais sempre √† m√£o" (32 chars)`;
    }

    getBasicSafeZonesOptions(weatherData) {
        return {
            success: true,
            options: [
                { id: 'centros_evacuacao', title: 'Centros Evacua√ß√£o', description: 'Locais oficiais de ref√∫gio na √°rea' }, // 16 chars, 35 chars
                { id: 'hospitais_24h', title: 'Hospitais 24h', description: 'Assist√™ncia m√©dica sempre dispon√≠vel' }, // 13 chars, 37 chars
                { id: 'rotas_evacuacao', title: 'Rotas Evacua√ß√£o', description: 'Caminhos seguros para sair da √°rea' }, // 15 chars, 34 chars
                { id: 'kit_emergencia', title: 'Kit Emerg√™ncia', description: 'Lista essencial para situa√ß√µes cr√≠ticas' }, // 14 chars, 39 chars
                { id: 'contactos_sos', title: 'Contactos SOS', description: 'N√∫meros de emerg√™ncia importantes' } // 13 chars, 33 chars
            ],
            method: 'fallback'
        };
    }

    generateBasicSafeZonesInformation(weatherData) {
        const city = weatherData.city;
        const temp = parseInt(weatherData.temperature);
        const condition = weatherData.description;

        return {
            success: true,
            message: `üõ°Ô∏è **Zonas Seguras em ${city}**

üå¶Ô∏è **Condi√ß√µes atuais:** ${temp}¬∞C, ${condition}

‚úÖ **Locais seguros para ref√∫gio:**
‚Ä¢ Hospitais e centros de sa√∫de
‚Ä¢ Escolas em zonas altas e seguras
‚Ä¢ Edif√≠cios p√∫blicos s√≥lidos
‚Ä¢ Centros comunit√°rios
‚Ä¢ Igrejas em locais elevados

üì± **Contactos de emerg√™ncia:**
‚Ä¢ INGC (Gest√£o de Calamidades): 119
‚Ä¢ Bombeiros: 198
‚Ä¢ Pol√≠cia: 119

üí° **Dica:** Mantenha sempre um kit de emerg√™ncia preparado e conhe√ßa as rotas de evacua√ß√£o da sua √°rea!`,
            method: 'fallback'
        };
    }

    // ===============================================
    // FUN√á√ïES ESPEC√çFICAS PARA TIPOS DE ZONAS SEGURAS
    // ===============================================

    async generateEvacuationCentersInfo(weatherData, userContext = {}) {
        try {
            if (!this.token) {
                return this.generateBasicEvacuationCentersInfo(weatherData);
            }

            const prompt = this.buildEvacuationCentersPrompt(weatherData, userContext);
            const response = await this.callOpenAI(prompt, 0.7);

            return {
                success: true,
                message: response.trim(),
                method: 'ai_powered'
            };

        } catch (error) {
            console.error('‚ùå Erro AI evacuation centers:', error.message);
            return this.generateBasicEvacuationCentersInfo(weatherData);
        }
    }

    buildEvacuationCentersPrompt(weatherData, userContext) {
        const city = weatherData.city.toLowerCase();
        const condition = weatherData.description;

        return `O utilizador quer informa√ß√µes espec√≠ficas sobre centros de evacua√ß√£o oficiais em ${city}. Com condi√ß√µes ${condition}, dar informa√ß√£o pr√°tica e tranquilizadora.

FOCAR EM:
- Locais oficiais designados pelo INGC
- Endere√ßos espec√≠ficos quando poss√≠vel
- Capacidade e facilidades dispon√≠veis
- Como chegar aos centros
- O que levar/esperar

${city === 'beira' ? `Para BEIRA, incluir centros conhecidos como:
- Centro Comunit√°rio da Manga
- Escola Secund√°ria Samora Machel
- Est√°dio do Ferrovi√°rio
- Centro de Sa√∫de do Mac√∫ti` : 'Para outras cidades, focar em tipos de locais padr√£o'}

Responder de forma natural e reconfortante, m√°ximo 400 palavras:`;
    }

    async generateEmergencyHospitalsInfo(weatherData, userContext = {}) {
        try {
            if (!this.token) {
                return this.generateBasicEmergencyHospitalsInfo(weatherData);
            }

            const prompt = this.buildEmergencyHospitalsPrompt(weatherData, userContext);
            const response = await this.callOpenAI(prompt, 0.7);

            return {
                success: true,
                message: response.trim(),
                method: 'ai_powered'
            };

        } catch (error) {
            console.error('‚ùå Erro AI emergency hospitals:', error.message);
            return this.generateBasicEmergencyHospitalsInfo(weatherData);
        }
    }

    buildEmergencyHospitalsPrompt(weatherData, userContext) {
        const city = weatherData.city.toLowerCase();
        const condition = weatherData.description;

        return `O utilizador quer informa√ß√µes sobre hospitais de emerg√™ncia 24h em ${city}. Com condi√ß√µes ${condition}, dar informa√ß√£o √∫til sobre cuidados m√©dicos.

INCLUIR:
- Hospitais principais que funcionam 24h
- Contactos telef√≥nicos
- Especialidades em emerg√™ncias clim√°ticas
- Centros de sa√∫de alternativos
- Como chegar durante emerg√™ncias

${city === 'beira' ? `Para BEIRA, incluir:
- Hospital Central da Beira
- Hospital Privado Beira Medical Centre
- Centros de Sa√∫de do Mac√∫ti, Manga, Goto` : 'Para outras cidades, incluir hospitais centrais e centros principais'}

Responder de forma tranquilizadora e informativa, m√°ximo 400 palavras:`;
    }

    async generateEvacuationRoutesInfo(weatherData, userContext = {}) {
        try {
            if (!this.token) {
                return this.generateBasicEvacuationRoutesInfo(weatherData);
            }

            const prompt = this.buildEvacuationRoutesPrompt(weatherData, userContext);
            const response = await this.callOpenAI(prompt, 0.7);

            return {
                success: true,
                message: response.trim(),
                method: 'ai_powered'
            };

        } catch (error) {
            console.error('‚ùå Erro AI evacuation routes:', error.message);
            return this.generateBasicEvacuationRoutesInfo(weatherData);
        }
    }

    buildEvacuationRoutesPrompt(weatherData, userContext) {
        const city = weatherData.city.toLowerCase();
        const condition = weatherData.description;

        return `O utilizador quer informa√ß√µes sobre rotas de evacua√ß√£o seguras em ${city}. Com condi√ß√µes ${condition}, dar orienta√ß√µes pr√°ticas de desloca√ß√£o.

INCLUIR:
- Estradas principais pavimentadas
- Rotas que evitam zonas baixas
- Pontos de encontro familiares
- Alternativas se estradas bloqueadas
- Transportes durante emerg√™ncias

${city === 'beira' ? `Para BEIRA, mencionar:
- EN6 (estrada principal)
- Ponte sobre rio P√∫ngo√®
- Rotas para zonas altas como Manga, Goto
- Evitar Mac√∫ti durante mar√©s altas` : 'Para outras cidades, focar em estradas principais e zonas elevadas'}

Dar conselhos pr√°ticos como mo√ßambicano experiente, m√°ximo 400 palavras:`;
    }

    generateBasicEvacuationCentersInfo(weatherData) {
        const city = weatherData.city;
        return {
            success: true,
            message: `üèõÔ∏è **Centros de Evacua√ß√£o em ${city}**

‚úÖ **Locais oficiais de ref√∫gio:**
‚Ä¢ Escolas secund√°rias em zonas altas
‚Ä¢ Centros comunit√°rios principais
‚Ä¢ Edif√≠cios p√∫blicos s√≥lidos
‚Ä¢ Igrejas em locais elevados
‚Ä¢ Est√°dios municipais

üìç **Como proceder:**
‚Ä¢ Siga instru√ß√µes das autoridades
‚Ä¢ Leve kit de emerg√™ncia b√°sico
‚Ä¢ Mantenha-se em grupo
‚Ä¢ Registe presen√ßa no local

üìû **Contacto INGC: 119**

üí° **Dica:** Conhe√ßa previamente os centros mais pr√≥ximos da sua √°rea!`,
            method: 'fallback'
        };
    }

    generateBasicEmergencyHospitalsInfo(weatherData) {
        const city = weatherData.city;
        return {
            success: true,
            message: `üè• **Hospitais de Emerg√™ncia em ${city}**

üö® **Sempre dispon√≠veis 24h:**
‚Ä¢ Hospital Central/Provincial
‚Ä¢ Centros de Sa√∫de principais
‚Ä¢ Cl√≠nicas privadas com urg√™ncia

üìû **Emerg√™ncia M√©dica: 119**

‚ö° **Durante emerg√™ncias clim√°ticas:**
‚Ä¢ Hospitais mant√™m geradores
‚Ä¢ Equipas de resgate m√©dico ativas
‚Ä¢ Primeiros socorros b√°sicos

üí° **Leve sempre:** BI, cart√£o de sa√∫de, medicamentos pessoais`,
            method: 'fallback'
        };
    }

    generateBasicEvacuationRoutesInfo(weatherData) {
        const city = weatherData.city;
        return {
            success: true,
            message: `üõ£Ô∏è **Rotas de Evacua√ß√£o em ${city}**

‚úÖ **Regras b√°sicas:**
‚Ä¢ Use estradas principais pavimentadas
‚Ä¢ Evite zonas baixas e pr√≥ximas a rios
‚Ä¢ Dirija-se para terrenos elevados
‚Ä¢ Mantenha-se em grupo

‚ö†Ô∏è **Durante emerg√™ncias:**
‚Ä¢ Siga instru√ß√µes das autoridades
‚Ä¢ Tenha rotas alternativas
‚Ä¢ Combust√≠vel sempre acima de meio tanque
‚Ä¢ Mapas f√≠sicos como backup

üìû **Emerg√™ncia: 119**`,
            method: 'fallback'
        };
    }

    // ===============================================
    // AN√ÅLISE DE ALERTAS METEOROL√ìGICOS DE PERIGO
    // ===============================================

    async generateWeatherAlertsAnalysis(weatherData, userContext = {}) {
        try {
            if (!this.token) {
                return this.generateBasicWeatherAlertsAnalysis(weatherData);
            }

            const prompt = this.buildWeatherAlertsPrompt(weatherData, userContext);
            const response = await this.callOpenAI(prompt, 0.7);

            // Tentar fazer parse como JSON estruturado
            try {
                const alertsData = JSON.parse(response);
                return {
                    success: true,
                    message: alertsData.message || response.trim(),
                    hasActiveAlerts: alertsData.hasActiveAlerts || false,
                    alertLevel: alertsData.alertLevel || 'none',
                    alertTypes: alertsData.alertTypes || [],
                    method: 'ai_powered'
                };
            } catch (parseError) {
                // Se n√£o for JSON, usar como mensagem simples
                return {
                    success: true,
                    message: response.trim(),
                    hasActiveAlerts: this.detectAlertsInText(response, weatherData),
                    alertLevel: this.calculateAlertLevel(weatherData),
                    method: 'ai_powered_text'
                };
            }

        } catch (error) {
            console.error('‚ùå Erro AI weather alerts:', error.message);
            return this.generateBasicWeatherAlertsAnalysis(weatherData);
        }
    }

    buildWeatherAlertsPrompt(weatherData, userContext) {
        const temp = parseInt(weatherData.temperature);
        const city = weatherData.city.toLowerCase();
        const condition = weatherData.description;
        const humidity = weatherData.humidity || 'N/A';
        const windSpeed = weatherData.windSpeed || 'N/A';

        return `Analisar condi√ß√µes meteorol√≥gicas atuais em ${city} para detectar alertas de perigo.

DADOS METEOROL√ìGICOS ATUAIS:
‚Ä¢ Temperatura: ${temp}¬∞C
‚Ä¢ Condi√ß√£o: ${condition}
‚Ä¢ Humidade: ${humidity}%
‚Ä¢ Vento: ${windSpeed} km/h

AN√ÅLISE DE PERIGOS:

üå°Ô∏è TEMPERATURA:
- Acima de 35¬∞C: Alerta de calor extremo
- Abaixo de 15¬∞C: Alerta de frio extremo
- Entre 32-35¬∞C: Aten√ß√£o calor intenso
- Entre 15-18¬∞C: Aten√ß√£o frio moderado

üåßÔ∏è CONDI√á√ïES CLIM√ÅTICAS:
- Chuva intensa/tempestade: Alerta inunda√ß√£o
- Vento forte: Alerta estrutural
- N√©voa densa: Alerta visibilidade
- Seca prolongada: Alerta inc√™ndio

üíß HUMIDADE:
- Acima de 85%: Desconforto t√©rmico
- Abaixo de 30%: Alerta ressecamento

RESPONDER EM JSON:
{
  "message": "An√°lise completa em portugu√™s mo√ßambicano natural (max 400 palavras)",
  "hasActiveAlerts": true/false,
  "alertLevel": "none/low/medium/high/critical",
  "alertTypes": ["tipo1", "tipo2"],
  "recommendations": ["a√ß√£o1", "a√ß√£o2"]
}

Dar avalia√ß√£o honest e tranquilizadora como especialista mo√ßambicano em meteorologia.`;
    }

    detectAlertsInText(text, weatherData) {
        const alertKeywords = ['alerta', 'perigo', 'cuidado', 'aten√ß√£o', 'evite', 'risco'];
        const lowerText = text.toLowerCase();
        return alertKeywords.some(keyword => lowerText.includes(keyword));
    }

    calculateAlertLevel(weatherData) {
        const temp = parseInt(weatherData.temperature);
        const condition = weatherData.description.toLowerCase();

        if (temp >= 35 || temp <= 15) return 'high';
        if (condition.includes('tempestade') || condition.includes('ciclone')) return 'critical';
        if (temp >= 32 || temp <= 18) return 'medium';
        if (condition.includes('chuva forte') || condition.includes('vento')) return 'medium';
        if (temp >= 30 || temp <= 20) return 'low';

        return 'none';
    }

    async generateAlertActionOptions(weatherData, alertsAnalysis, userContext = {}) {
        try {
            if (!this.token) {
                return this.getBasicAlertActionOptions(weatherData, alertsAnalysis);
            }

            const prompt = this.buildAlertActionOptionsPrompt(weatherData, alertsAnalysis, userContext);
            const response = await this.callOpenAI(prompt, 0.8);

            try {
                const options = JSON.parse(response);
                return {
                    success: true,
                    options: options,
                    method: 'ai_powered'
                };
            } catch (parseError) {
                console.error('‚ùå Parse error alert options:', parseError.message);
                return this.getBasicAlertActionOptions(weatherData, alertsAnalysis);
            }

        } catch (error) {
            console.error('‚ùå Erro AI alert options:', error.message);
            return this.getBasicAlertActionOptions(weatherData, alertsAnalysis);
        }
    }

    buildAlertActionOptionsPrompt(weatherData, alertsAnalysis, userContext) {
        const temp = parseInt(weatherData.temperature);
        const condition = weatherData.description;
        const alertLevel = alertsAnalysis.alertLevel;

        return `Gerar op√ß√µes de a√ß√£o para alertas meteorol√≥gicos com n√≠vel ${alertLevel}.

CONDI√á√ïES: ${temp}¬∞C, ${condition}
ALERTAS ATIVOS: ${alertsAnalysis.hasActiveAlerts ? 'SIM' : 'N√ÉO'}

Criar exactamente 5 op√ß√µes espec√≠ficas para a situa√ß√£o.

LIMITES OBRIGAT√ìRIOS:
- title: m√°ximo 24 caracteres
- description: m√°ximo 72 caracteres
- id: sem espa√ßos, usar underscore

Responde s√≥ JSON:
[
  {
    "id": "identificador_unico",
    "title": "T√≠tulo (max 24)",
    "description": "Descri√ß√£o (max 72)"
  }
]

Focar em a√ß√µes pr√°ticas baseadas no tipo de alerta detectado.`;
    }

    getBasicAlertActionOptions(weatherData, alertsAnalysis) {
        const temp = parseInt(weatherData.temperature);
        const alertLevel = alertsAnalysis.alertLevel;

        if (alertLevel === 'high' || alertLevel === 'critical') {
            return {
                success: true,
                options: [
                    { id: 'medidas_urgentes', title: 'Medidas Urgentes', description: 'A√ß√µes imediatas para se proteger' },
                    { id: 'locais_seguros', title: 'Locais Seguros', description: 'Onde se refugiar agora' },
                    { id: 'contactos_sos', title: 'Contactos SOS', description: 'N√∫meros de emerg√™ncia' },
                    { id: 'kit_sobrevivencia', title: 'Kit Sobreviv√™ncia', description: 'Itens essenciais' },
                    { id: 'monitorar_situacao', title: 'Monitorar Situa√ß√£o', description: 'Como acompanhar evolu√ß√£o' }
                ],
                method: 'fallback'
            };
        } else {
            return {
                success: true,
                options: [
                    { id: 'precaucoes_basicas', title: 'Precau√ß√µes B√°sicas', description: 'Cuidados preventivos' },
                    { id: 'monitoramento', title: 'Monitoramento', description: 'Acompanhar condi√ß√µes' },
                    { id: 'preparacao', title: 'Prepara√ß√£o', description: 'Como se preparar' },
                    { id: 'dicas_conforto', title: 'Dicas Conforto', description: 'Manter-se confort√°vel' },
                    { id: 'proximos_dias', title: 'Pr√≥ximos Dias', description: 'Previs√£o e tend√™ncias' }
                ],
                method: 'fallback'
            };
        }
    }

    generateBasicWeatherAlertsAnalysis(weatherData) {
        const temp = parseInt(weatherData.temperature);
        const city = weatherData.city;
        const condition = weatherData.description;
        const humidity = weatherData.humidity || 'N/A';

        let alertLevel = 'none';
        let alertTypes = [];
        let message = `üö® **AN√ÅLISE DE ALERTAS - ${city}**\n\n`;

        message += `üå°Ô∏è **Condi√ß√µes Atuais:**\n`;
        message += `‚Ä¢ Temperatura: ${temp}¬∞C\n`;
        message += `‚Ä¢ Estado: ${condition}\n`;
        message += `‚Ä¢ Humidade: ${humidity}%\n\n`;

        // An√°lise de temperatura
        if (temp >= 35) {
            alertLevel = 'high';
            alertTypes.push('calor_extremo');
            message += `üî• **ALERTA CALOR EXTREMO**\n`;
            message += `‚Ä¢ Temperatura perigosa (${temp}¬∞C)\n`;
            message += `‚Ä¢ Risco de desidrata√ß√£o e insola√ß√£o\n`;
            message += `‚Ä¢ Evite exposi√ß√£o solar 10h-16h\n`;
            message += `‚Ä¢ Beba √°gua constantemente\n\n`;
        } else if (temp >= 32) {
            alertLevel = 'medium';
            alertTypes.push('calor_intenso');
            message += `üå°Ô∏è **ATEN√á√ÉO CALOR INTENSO**\n`;
            message += `‚Ä¢ Temperatura elevada (${temp}¬∞C)\n`;
            message += `‚Ä¢ Mantenha-se hidratado\n`;
            message += `‚Ä¢ Procure sombra e locais frescos\n\n`;
        } else if (temp <= 15) {
            alertLevel = 'high';
            alertTypes.push('frio_extremo');
            message += `üßä **ALERTA FRIO EXTREMO**\n`;
            message += `‚Ä¢ Temperatura muito baixa (${temp}¬∞C)\n`;
            message += `‚Ä¢ Risco de hipotermia\n`;
            message += `‚Ä¢ Vista roupas quentes em camadas\n`;
            message += `‚Ä¢ Mantenha-se aquecido e seco\n\n`;
        } else if (temp <= 18) {
            alertLevel = 'medium';
            alertTypes.push('frio_moderado');
            message += `‚ùÑÔ∏è **ATEN√á√ÉO FRIO MODERADO**\n`;
            message += `‚Ä¢ Temperatura baixa (${temp}¬∞C)\n`;
            message += `‚Ä¢ Vista roupas adequadas\n`;
            message += `‚Ä¢ Cuidado com crian√ßas e idosos\n\n`;
        }

        // An√°lise de condi√ß√µes clim√°ticas
        if (condition.toLowerCase().includes('tempestade')) {
            alertLevel = 'critical';
            alertTypes.push('tempestade');
            message += `‚õàÔ∏è **ALERTA CR√çTICO - TEMPESTADE**\n`;
            message += `‚Ä¢ Condi√ß√µes meteorol√≥gicas perigosas\n`;
            message += `‚Ä¢ Evite sair de casa\n`;
            message += `‚Ä¢ Mantenha-se longe de janelas\n`;
            message += `‚Ä¢ Desligue aparelhos el√©tricos\n\n`;
        } else if (condition.toLowerCase().includes('chuva')) {
            if (alertLevel === 'none') alertLevel = 'medium';
            alertTypes.push('chuva');
            message += `üåßÔ∏è **ATEN√á√ÉO CHUVA**\n`;
            message += `‚Ä¢ Cuidado com alagamentos\n`;
            message += `‚Ä¢ Evite zonas baixas\n`;
            message += `‚Ä¢ Dirija com cuidado\n\n`;
        }

        if (alertLevel === 'none') {
            message += `‚úÖ **CONDI√á√ïES EST√ÅVEIS**\n`;
            message += `‚Ä¢ N√£o h√° alertas meteorol√≥gicos ativos\n`;
            message += `‚Ä¢ Condi√ß√µes normais para atividades\n`;
            message += `‚Ä¢ Mantenha-se atento a mudan√ßas\n\n`;
        }

        message += `üì± **Emerg√™ncias:** 119 (INGC)\n`;
        message += `üí° **Dica:** Acompanhe regularmente as condi√ß√µes meteorol√≥gicas!`;

        return {
            success: true,
            message: message,
            hasActiveAlerts: alertLevel !== 'none',
            alertLevel: alertLevel,
            alertTypes: alertTypes,
            method: 'fallback'
        };
    }

    // ===============================================
    // SUGEST√ïES BASEADAS NA TEMPERATURA ATUAL
    // ===============================================

    async generateTemperatureBasedSuggestions(weatherData, city, context = {}) {
        try {
            console.log(`üå°Ô∏è Gerando sugest√µes para ${city} com ${weatherData.temperature}¬∞C`);

            if (!this.token) {
                return {
                    success: false,
                    suggestions: this.getTemperatureFallbackSuggestions(weatherData.temperature),
                    method: 'fallback'
                };
            }

            const prompt = this.buildTemperatureSuggestionsPrompt(weatherData, city, context);
            const response = await this.callOpenAI(prompt, 0.8);

            try {
                const suggestions = JSON.parse(response);
                return {
                    success: true,
                    suggestions: suggestions,
                    method: 'ai_powered',
                    temperature: weatherData.temperature,
                    city: city
                };
            } catch (parseError) {
                console.error('‚ùå Parse error sugest√µes temperatura:', parseError.message);
                return {
                    success: false,
                    suggestions: this.getTemperatureFallbackSuggestions(weatherData.temperature),
                    method: 'fallback'
                };
            }

        } catch (error) {
            console.error('‚ùå Erro sugest√µes baseadas temperatura:', error.message);
            return {
                success: false,
                suggestions: this.getTemperatureFallbackSuggestions(weatherData.temperature),
                method: 'fallback'
            };
        }
    }

    buildTemperatureSuggestionsPrompt(weatherData, city, context) {
        const temp = weatherData.temperature;
        const condition = weatherData.description || 'tempo normal';
        const humidity = weatherData.humidity || 60;

        return `Eh p√°, preciso dar 3 sugest√µes fixes para algu√©m que est√° em ${city}.

O tempo agora est√° assim:
- ${temp}¬∞C (${temp > 30 ? 'eish, quente!' : temp < 18 ? 'est√° frio' : 'n√£o est√° mau'})
- ${condition}
- Humidade: ${humidity}% (${humidity > 80 ? 'bem abafado' : humidity < 50 ? 'ar seco' : 'normal'})

Esta pessoa est√° a usar o WhatsApp: ${context.userPhone || 'n√£o sei o n√∫mero'}

${this.getTemperatureSpecificInstructions(temp)}

Quero dar sugest√µes que um mo√ßambicano daria para outro mo√ßambicano. Coisas pr√°ticas, n√£o muito complicadas. M√°ximo 18 caracteres cada sugest√£o.

Exemplos do que pode funcionar:
- Para qualquer tempo: "Que roupa", "O que fazer", "Onde ir"
- Quando quente: "Dicas calor", "Onde refrescar", "Bebidas frias"  
- Quando frio: "Dicas frio", "Roupas quentes", "Como aquecer"
- Para chuva: "Guarda-chuva", "Onde ficar", "Vai parar?"

Com ${temp}¬∞C, que 3 sugest√µes daria?

Responde s√≥: ["sugest√£o1", "sugest√£o2", "sugest√£o3"]`;
    }

    getTemperatureSpecificInstructions(temperature) {
        if (temperature > 35) {
            return `Com ${temperature}¬∞C est√° um calor do diabo! A pessoa precisa de:
- Refrescar urgente
- N√£o apanhar insola√ß√£o  
- Beber muita √°gua
- Sair do sol
Sugest√µes tipo: "SOS calor", "Onde refrescar", "√Ågua gelada"`;
        } else if (temperature > 30) {
            return `${temperature}¬∞C √© quente mesmo! Melhor:
- Ficar na sombra
- Proteger do sol
- Bebidas geladas
- N√£o fazer muito esfor√ßo
Sugest√µes tipo: "Dicas calor", "Sombra fresca", "Geladinho"`;
        } else if (temperature > 25) {
            return `${temperature}¬∞C est√° bom, mas j√° √© calor. Pode:
- Sair com cuidado
- Roupa leve
- Beber √°gua
Sugest√µes tipo: "Que roupa", "O que fazer", "Cuidados sol"`;
        } else if (temperature > 20) {
            return `${temperature}¬∞C est√° perfeito! Tempo bom para:
- Qualquer atividade
- Sair e aproveitar
- Roupa confort√°vel
Sugest√µes tipo: "O que fazer", "Onde ir", "Aproveitar"`;
        } else if (temperature > 15) {
            return `${temperature}¬∞C j√° est√° fresquinho. Melhor:
- Roupa mais quente
- Atividades que aquecem
- Algo quente para beber
Sugest√µes tipo: "Que vestir", "Aquecer", "Ch√° quente"`;
        } else {
            return `${temperature}¬∞C est√° frio! A pessoa vai precisar:
- Aquecer bem
- Roupas grossas
- Ficar em casa ou lugar quente
Sugest√µes tipo: "Como aquecer", "Roupas frio", "Lugar quente"`;
        }
    }

    getTemperatureFallbackSuggestions(temperature) {
        if (temperature > 30) {
            return ["Dicas calor", "Como refrescar", "Bebidas frias"];
        } else if (temperature > 25) {
            return ["Que roupa", "O que fazer", "Dicas sol"];
        } else if (temperature > 20) {
            return ["Atividades", "Onde ir", "Que roupa"];
        } else if (temperature > 15) {
            return ["Que roupa", "Bebidas quentes", "Atividades"];
        } else {
            return ["Dicas frio", "Roupas quentes", "Como aquecer"];
        }
    }

    // Processamento de sugest√µes (100% AI)

    async processSuggestionResponse(suggestionText, weatherData, userContext = {}) {
        console.log(`üéØ Processando sugest√£o com AI: "${suggestionText}"`);

        // Delegar para o handler AI-powered
        return await this.suggestionsHandler.processSuggestionResponse(
            suggestionText,
            weatherData,
            userContext
        );
    }

    // ===============================================
    // GERA√á√ÉO DE DICAS PR√ÅTICAS COM AI
    // ===============================================

    async generatePracticalTips(analysis, weatherData, userContext = {}) {
        try {
            console.log('üéØ Gerando dicas pr√°ticas com AI');

            if (!this.token) {
                return {
                    success: false,
                    message: "AI n√£o dispon√≠vel",
                    method: 'no_token'
                };
            }

            const prompt = this.buildPracticalTipsPrompt(analysis, weatherData, userContext);
            const response = await this.callOpenAI(prompt, 0.8);

            return {
                success: true,
                message: response.trim(),
                type: 'practical_tips',
                method: 'ai_powered'
            };

        } catch (error) {
            console.error('‚ùå Erro AI dicas pr√°ticas:', error.message);
            return {
                success: false,
                message: "Erro ao gerar dicas",
                error: error.message,
                method: 'error'
            };
        }
    }

    buildPracticalTipsPrompt(analysis, weatherData, userContext) {
        const temp = parseInt(weatherData.temperature);
        const city = weatherData.city;
        const condition = weatherData.description;
        const originalMessage = analysis.originalMessage || analysis.intent || '';

        return `${this.getBotIdentityContext()}

A pessoa perguntou: "${originalMessage}"
Intent detectado: ${analysis.intent}

SITUA√á√ÉO ACTUAL em ${city}:
- ${temp}¬∞C (${temp > 30 ? 'eish, quente!' : temp < 18 ? 'est√° frio' : 'n√£o est√° mau'})
- ${condition}
- Humidade: ${weatherData.humidity}%

SOBRE A PESSOA:
- J√° falou comigo ${userContext.queryCount || 0} vezes
- N√≠vel de experi√™ncia: ${userContext.expertiseLevel || 'est√° come√ßando'}
- √öltima cidade: ${userContext.lastCity || 'primeira vez'}

INSTRU√á√ïES PARA DAR DICAS NATURAIS COMO JOANA BOT:
1. Usa portugu√™s mo√ßambicano casual ("Eh p√°", "fixes", "eish", "meu", etc.)
2. Seja muito natural e conversacional - como se fosses um amigo
3. N√ÉO uses listas r√≠gidas com bullets (‚Ä¢)
4. N√ÉO fa√ßas formata√ß√£o muito estruturada
5. Fala como se estivesses numa conversa casual
6. M√°ximo 200 palavras
7. Inclui emojis naturalmente no texto
8. Seja espec√≠fico sobre o tempo actual
9. Como Joana Bot, mostra conhecimento especializado em meteorologia mo√ßambicana

EXEMPLOS DE RESPOSTAS NATURAIS:
- Em vez de "‚Ä¢ Roupa leve" ‚Üí "Eh p√°, com este calor veste roupa bem leve"
- Em vez de "‚Ä¢ Protetor solar" ‚Üí "e n√£o te esque√ßas do protetor solar que o sol est√° bravo"
- Em vez de listas ‚Üí Frases corridas e naturais

${this.getTipsGuidanceByIntent(analysis.intent, temp, condition)}

FORMATO:
Come√ßa com algo como "üí° Eh p√°..." e depois d√° as dicas de forma muito natural, como numa conversa entre amigos experientes.

Minha resposta natural:`;
    } getTipsGuidanceByIntent(intent, temperature, condition) {
        const isRaining = condition.toLowerCase().includes('chuva');

        if (intent === 'clothing_advice' || intent === 'conselhos_de_roupa') {
            return `FOCA EM ROUPA: Diz que roupa usar baseado nos ${temperature}¬∞C. Fala como a pessoa se vai sentir com essa roupa.`;
        } else if (intent === 'activity_recommendation' || intent === 'ideias_de_atividades') {
            return `FOCA EM ATIVIDADES: Sugere o que fazer com este tempo. Seja espec√≠fico sobre quando e onde.`;
        } else if (intent === 'weather_tips') {
            return `DICAS GERAIS: Mistura roupa, atividades e cuidados. Seja abrangente mas natural.`;
        } else {
            if (isRaining) {
                return `EST√Å CHUVA: Foca em como lidar com a chuva - roupa, atividades, cuidados.`;
            } else if (temperature > 30) {
                return `EST√Å CALOR: Foca em como refrescar, proteger do sol, que roupa usar.`;
            } else if (temperature < 18) {
                return `EST√Å FRIO: Foca em como aquecer, roupa quente, atividades que aquecem.`;
            } else {
                return `TEMPO BOM: Aproveita para dar dicas positivas e encorajadoras.`;
            }
        }
    }

    // ===============================================
    // GERA√á√ÉO DE SUGEST√ïES CONVERSACIONAIS PARA /sugestoes
    // ===============================================

    async generateConversationalSuggestions(weatherData, userContext = {}) {
        try {
            console.log('üí° Gerando sugest√µes conversacionais em portugu√™s mo√ßambicano');

            if (!this.token) {
                return this.generateBasicConversationalSuggestions(weatherData, userContext);
            }

            const prompt = this.buildConversationalSuggestionsPrompt(weatherData, userContext);
            const response = await this.callOpenAI(prompt, 0.8);

            return {
                success: true,
                message: response.trim(),
                type: 'conversational_suggestions',
                method: 'ai_powered'
            };

        } catch (error) {
            console.error('‚ùå Erro sugest√µes conversacionais:', error.message);
            return {
                success: true,
                message: this.generateBasicConversationalSuggestions(weatherData, userContext),
                type: 'conversational_suggestions',
                method: 'fallback'
            };
        }
    }

    buildConversationalSuggestionsPrompt(weatherData, userContext) {
        const temp = parseInt(weatherData.temperature);
        const city = weatherData.city;
        const condition = weatherData.description;
        const humidity = weatherData.humidity;

        return `${this.getBotIdentityContext()}

A pessoa usou o comando /sugestoes e quer sugest√µes baseadas no tempo actual.

SITUA√á√ÉO ACTUAL em ${city}:
- ${temp}¬∞C (${temp > 30 ? 'eish, quente!' : temp < 18 ? 'est√° frio' : 'n√£o est√° mau'})
- ${condition}
- Humidade: ${humidity}% (${humidity > 80 ? 'bem abafado' : humidity < 50 ? 'ar seco' : 'normal'})

SOBRE A PESSOA:
- J√° usou o bot ${userContext.queryCount || 0} vezes
- N√≠vel de experi√™ncia: ${userContext.expertiseLevel || 'est√° come√ßando'}
- √öltima cidade mencionada: ${userContext.lastCity || 'primeira vez'}
- Cidade preferida: ${userContext.preferredCity || 'n√£o definida'}

INSTRU√á√ïES PARA SUGEST√ïES CONVERSACIONAIS COMO JOANA BOT:
1. Usa portugu√™s mo√ßambicano natural ("Eh p√°", "fixes", "eish", "meu", etc.)
2. Seja muito conversacional e amig√°vel como Joana Bot
3. N√ÉO fa√ßas listas numeradas (1. 2. 3.)
4. N√ÉO uses bullets estruturados (‚Ä¢)
5. Integra as sugest√µes naturalmente no texto como se fosses um amigo especialista
6. Fala sobre o tempo actual e como isso afecta as actividades
7. M√°ximo 250 palavras
8. Inclui emojis naturalmente
9. Termina perguntando o que a pessoa gostaria de saber mais
10. Mostra conhecimento especializado meteorol√≥gico da Joana Bot

EXEMPLOS DE LINGUAGEM NATURAL:
- Em vez de "1. Que roupa usar" ‚Üí "Eh p√°, com este tempo podes pensar na roupa que vais vestir"
- Em vez de "2. Atividades" ‚Üí "e tamb√©m que tal pensar no que fazer hoje"
- Em vez de listas ‚Üí Texto corrido e natural

${this.getSuggestionsGuidanceByTemperature(temp, condition)}

FORMATO:
Come√ßa diretamente com as sugest√µes de forma muito natural e conversacional, como se fosses um amigo experiente dando dicas √∫teis. Termina perguntando algo como "Sobre o que gostarias de saber mais?"

Minha resposta conversacional:`;
    }

    getSuggestionsGuidanceByTemperature(temperature, condition) {
        const isRaining = condition.toLowerCase().includes('chuva');

        if (isRaining) {
            return `EST√Å CHUVA: Fala sobre actividades para casa, quando pode parar, que roupa usar para n√£o se molhar, bebidas quentes.`;
        } else if (temperature > 32) {
            return `CALOR INTENSO: Fala sobre como refrescar, onde ir que tenha sombra, bebidas frias, roupas leves, protec√ß√£o solar.`;
        } else if (temperature > 28) {
            return `CALOR NORMAL: Menciona actividades ao ar livre, roupas confort√°veis, hidrata√ß√£o, aproveitar o dia.`;
        } else if (temperature > 22) {
            return `TEMPERATURA BOA: Fala sobre aproveitar o tempo, actividades variadas, roupa confort√°vel, √© um bom dia.`;
        } else if (temperature > 18) {
            return `FRESQUINHO: Menciona roupas por camadas, actividades que aquecem, bebidas quentes, cuidados com o frio.`;
        } else {
            return `FRIO: Fala sobre roupas quentes, actividades dentro de casa, bebidas quentes, como se aquecer.`;
        }
    }

    generateBasicConversationalSuggestions(weatherData, userContext) {
        const temp = parseInt(weatherData.temperature);
        const city = weatherData.city;
        const isRaining = weatherData.description.toLowerCase().includes('chuva');

        let message = `üí° Sou a ${this.botIdentity.name}! Com ${temp}¬∞C em ${city} hoje, `;

        if (isRaining) {
            message += `est√° chuva ent√£o melhor pensar em actividades dentro de casa. Que tal um filme, ler um livro ou cozinhar algo gostoso? `;
            message += `E n√£o te esque√ßas do guarda-chuva se tiveres que sair! `;
        } else if (temp > 30) {
            message += `est√° bem quente! Podes pensar em ir para locais com sombra, beber muitos l√≠quidos frescos, `;
            message += `e vestir roupa bem leve. A praia ou piscina seria fixe se conseguires! `;
        } else if (temp > 22) {
            message += `est√° uma temperatura boa para fazer qualquer coisa! Podes sair, visitar amigos, `;
            message += `fazer exerc√≠cio ou simplesmente aproveitar o dia. Que roupa vais usar? `;
        } else {
            message += `est√° fresquinho, ent√£o melhor pensar em roupas mais quentes e atividades que te aquecem. `;
            message += `Um ch√° quentinho seria bom, n√£o achas? `;
        }

        message += `\n\nü§î Sobre o que gostarias de saber mais? O tempo para amanh√£? Dicas espec√≠ficas? Como a tua assistente meteorol√≥gica, estou aqui para ajudar!`;

        return message;
    }

    // ===============================================
    // GERA√á√ÉO DE CONSELHOS DE SEGURAN√áA COM AI
    // ===============================================

    async generateSafetyAdvice(weatherData, userContext = {}) {
        try {
            console.log('‚ö†Ô∏è Gerando conselhos de seguran√ßa baseados na temperatura');

            if (!this.token) {
                return this.generateBasicSafetyAdvice(weatherData, userContext);
            }

            const prompt = this.buildSafetyAdvicePrompt(weatherData, userContext);
            const response = await this.callOpenAI(prompt, 0.7);

            return {
                success: true,
                message: response.trim(),
                type: 'safety_advice',
                method: 'ai_powered'
            };

        } catch (error) {
            console.error('‚ùå Erro conselhos de seguran√ßa:', error.message);
            return {
                success: true,
                message: this.generateBasicSafetyAdvice(weatherData, userContext),
                type: 'safety_advice',
                method: 'fallback'
            };
        }
    }

    buildSafetyAdvicePrompt(weatherData, userContext) {
        const temp = parseInt(weatherData.temperature);
        const city = weatherData.city;
        const condition = weatherData.description;
        const humidity = weatherData.humidity;
        const isRaining = condition.toLowerCase().includes('chuva');

        return `${this.getBotIdentityContext()}

A pessoa usou o comando /conselhos e quer conselhos de seguran√ßa importantes baseados no clima.

SITUA√á√ÉO ACTUAL em ${city}:
- ${temp}¬∞C (${temp > 30 ? 'eish, quente!' : temp < 18 ? 'est√° frio' : 'n√£o est√° mau'})
- ${condition}
- Humidade: ${humidity}% (${humidity > 80 ? 'bem abafado' : humidity < 50 ? 'ar seco' : 'normal'})

SOBRE A PESSOA:
- J√° usou o bot ${userContext.queryCount || 0} vezes
- N√≠vel de experi√™ncia: ${userContext.expertiseLevel || 'est√° come√ßando'}
- Cidade preferida: ${userContext.preferredCity || city || 'n√£o definida'}

INSTRU√á√ïES PARA CONSELHOS DE SEGURAN√áA COMO JOANA BOT:
1. Usa portugu√™s mo√ßambicano natural e educativo
2. Foca em SEGURAN√áA e PREVEN√á√ÉO de perigos
3. Explica os "PORQU√äS" - por que algo √© perigoso
4. N√ÉO uses listas r√≠gidas, seja conversacional
5. Inclui dicas de preven√ß√£o espec√≠ficas para Mo√ßambique
6. M√°ximo 300 palavras
7. Seja firme mas amig√°vel sobre seguran√ßa
8. Responde diretamente sem apresenta√ß√µes desnecess√°rias
9. Soa como algu√©m experiente dando conselhos √∫teis

ASPECTOS DE SEGURAN√áA A ABORDAR BASEADO NO CLIMA:
${this.getSafetyGuidanceByTemperature(temp, isRaining, humidity)}

FORMATO:
Come√ßa diretamente com os conselhos de seguran√ßa de forma conversacional e educativa. Explica os riscos e preven√ß√µes naturalmente, como se fosses um especialista dando dicas importantes.

Meus conselhos de seguran√ßa:`;
    }

    getSafetyGuidanceByTemperature(temperature, isRaining, humidity) {
        if (isRaining) {
            return `EST√Å CHUVA: Fala sobre riscos de escorregar, electrocuss√£o, enchentes, visibilidade reduzida, hipotermia. Explica porqu√™ cada um √© perigoso.`;
        } else if (temperature > 35) {
            return `CALOR EXTREMO (${temperature}¬∞C): MUITO PERIGOSO! Fala sobre insola√ß√£o, desidrata√ß√£o severa, queimaduras solares, exaust√£o pelo calor. Explica sinais de alerta (tontura, n√°usea, confus√£o). √â uma emerg√™ncia m√©dica!`;
        } else if (temperature > 30) {
            return `CALOR INTENSO (${temperature}¬∞C): Fala sobre desidrata√ß√£o, insola√ß√£o, queimaduras solares. Explica porque o corpo perde √°gua rapidamente e sinais de alerta.`;
        } else if (temperature > 25) {
            return `CALOR MODERADO (${temperature}¬∞C): Cuidados b√°sicos com hidrata√ß√£o e protec√ß√£o solar. Explica porque ainda pode ser perigoso se n√£o tomar cuidados.`;
        } else if (temperature > 18) {
            return `TEMPERATURA FRESCA (${temperature}¬∞C): Cuidados gerais, explica que mudan√ßas bruscas podem ser perigosas.`;
        } else if (temperature > 10) {
            return `FRIO (${temperature}¬∞C): Fala sobre hipotermia, problemas respirat√≥rios, como o corpo perde calor. Explica sinais de alerta.`;
        } else {
            return `FRIO EXTREMO (${temperature}¬∞C): MUITO PERIGOSO! Hipotermia severa, geladura, problemas card√≠acos. Explica como √© uma emerg√™ncia m√©dica.`;
        }
    }

    generateBasicSafetyAdvice(weatherData, userContext) {
        const temp = parseInt(weatherData.temperature);
        const city = weatherData.city;
        const isRaining = weatherData.description.toLowerCase().includes('chuva');

        let advice = `‚ö†Ô∏è Eh p√°, deixa eu te dar uns conselhos importantes sobre o tempo em ${city}! `;

        if (isRaining) {
            advice += `Com chuva tens que ter muito cuidado porque o ch√£o fica escorregadio e podes cair. Tamb√©m evita mexer em aparelhos el√©ctricos com as m√£os molhadas. `;
        } else if (temp > 32) {
            advice += `Com ${temp}¬∞C est√° muito perigoso! O calor pode causar desidrata√ß√£o e insola√ß√£o. Bebe muita √°gua mesmo que n√£o tenhas sede, porque o corpo perde √°gua rapidamente. `;
            advice += `Se sentires tontura, n√°usea ou confus√£o, procura sombra imediatamente e pede ajuda! `;
        } else if (temp > 25) {
            advice += `Com ${temp}¬∞C j√° precisas de cuidados. Usa sempre protetor solar porque as queimaduras solares s√£o perigosas, e bebe √°gua regularmente. `;
        } else if (temp < 15) {
            advice += `Com ${temp}¬∞C est√° frio e o corpo pode perder calor rapidamente. Veste-te bem em camadas e cuidado com o vento que piora o frio. `;
        } else {
            advice += `A temperatura est√° boa, mas sempre mant√©m cuidados b√°sicos como hidrata√ß√£o e protec√ß√£o solar. `;
        }

        advice += `\n\nLembra-te: √© sempre melhor prevenir que remediar, meu! Cuida-te bem! üí™`;

        return advice;
    }

    // ===============================================
    // GERA√á√ÉO DE SUGEST√ïES INTELIGENTES
    // ===============================================

    async generateSmartSuggestions(context, weatherData) {
        try {
            if (!this.token) {
                return this.getContextualFallbackSuggestions(context, weatherData);
            }

            const prompt = this.buildSuggestionsPrompt(context, weatherData);
            const response = await this.callOpenAI(prompt, 0.8);

            try {
                const suggestions = JSON.parse(response);
                return {
                    success: true,
                    suggestions: suggestions,
                    method: 'ai_generated'
                };
            } catch (parseError) {
                console.error('‚ùå Parse error sugest√µes:', parseError.message);
                return {
                    success: false,
                    suggestions: this.getContextualFallbackSuggestions(context, weatherData),
                    method: 'fallback'
                };
            }

        } catch (error) {
            console.error('‚ùå Erro gera√ß√£o sugest√µes AI:', error.message);
            return {
                success: false,
                suggestions: this.getContextualFallbackSuggestions(context, weatherData),
                method: 'fallback'
            };
        }
    }

    buildSuggestionsPrompt(context, weatherData) {
        const temp = weatherData?.temperature || 25;
        const city = weatherData?.city || context.lastCity || 'localiza√ß√£o atual';

        return `Ei, preciso dar 3 sugest√µes √∫teis para algu√©m em ${city}.

Situa√ß√£o agora:
- Temperatura: ${temp}¬∞C
- Tempo: ${weatherData?.description || 'normal'}
- J√° fez ${context.queryCount || 0} perguntas antes
- √öltima pergunta: ${context.lastQuery || 'primeira vez'}

Quero sugerir coisas que fazem sentido para a situa√ß√£o atual. M√°ximo 18 caracteres por sugest√£o.

${this.getContextSpecificGuidance(temp, weatherData?.description, context)}

Posso sugerir coisas como:
- Atividades: "O que fazer", "Onde ir", "Sair hoje"
- Roupa: "Que roupa", "Como vestir"  
- Tempo: "Tempo amanh√£", "Vai chover", "Pr√≥ximos dias"
- Dicas: "Dicas calor", "Dicas frio"
- Outros: "Outras cidades", "Mais info"

Responde s√≥: ["sugest√£o1", "sugest√£o2", "sugest√£o3"]`;
    }

    getContextSpecificGuidance(temperature, conditions, context) {
        if (temperature > 30) {
            return "Est√° quente! Pessoa vai querer saber como refrescar, onde ir que n√£o seja no sol, que roupa usar para n√£o morrer de calor.";
        } else if (temperature < 18) {
            return "Est√° frio! Pessoa vai querer saber como se aquecer, que roupas vestir, onde ir que seja quentinho.";
        } else if (conditions?.includes('chuva') || conditions?.includes('rain')) {
            return "Est√° chuva! Pessoa quer saber se vai parar, o que fazer em casa, quando pode sair.";
        } else {
            return "Tempo bom! Pessoa pode querer saber o que fazer, onde ir aproveitar, ou s√≥ estar preparada para mudan√ßas.";
        }
    }

    // ===============================================
    // FALLBACKS INTELIGENTES
    // ===============================================

    performRuleBasedAnalysis(message, context) {
        console.log('üîÑ An√°lise baseada em regras (fallback)');

        const lowerMessage = message.toLowerCase().trim();

        // An√°lise baseada em palavras-chave
        let intent = 'general_help'; // Mudei default para general ao inv√©s de weather
        let confidence = 0.4; // Baixei confidence para casos n√£o identificados
        let entities = {
            cities: [],
            timeframe: 'none',
            weather_aspect: 'general',
            activity_type: 'none'
        };

        // Detectar cidades - S√ì se houver outras palavras indicativas de clima
        const cities = ['maputo', 'beira', 'nampula', 'quelimane', 'tete', 'chimoio', 'pemba', 'xai-xai', 'lichinga', 'inhambane'];
        const hasCities = cities.some(city => lowerMessage.includes(city));

        // Palavras que indicam consulta meteorol√≥gica
        const weatherKeywords = ['tempo', 'clima', 'temperatura', 'calor', 'frio', 'chuva', 'sol', 'vento', 'humidade', 'graus', 'meteorologia'];
        const hasWeatherKeywords = weatherKeywords.some(word => lowerMessage.includes(word));

        if (hasCities) {
            entities.cities = cities.filter(city => lowerMessage.includes(city));
        }

        // Detectar inten√ß√µes espec√≠ficas primeiro
        if (lowerMessage.includes('muito bom') || lowerMessage.includes('muito boa') || lowerMessage.includes('perfeito') ||
            lowerMessage.includes('excelente') || lowerMessage.includes('√≥ptimo') || lowerMessage.includes('√≥timo')) {
            intent = 'positive_feedback';
            confidence = 0.95;
        } else if (lowerMessage.includes('obrigad') || lowerMessage.includes('valeu') || lowerMessage.includes('thanks')) {
            intent = 'thanks';
            confidence = 0.95;
        } else if (lowerMessage.includes('ol√°') || lowerMessage.includes('oi') || lowerMessage.includes('bom dia') ||
            lowerMessage.includes('boa tarde') || lowerMessage.includes('boa noite')) {
            intent = 'greeting';
            confidence = 0.9;
        } else if (lowerMessage.includes('ajuda') || lowerMessage.includes('help') || lowerMessage.includes('comandos')) {
            intent = 'general_help';
            confidence = 0.9;
        } else if (lowerMessage.includes('atividade') || lowerMessage.includes('fazer') || lowerMessage.includes('onde ir')) {
            intent = 'activity_recommendation';
            confidence = 0.8;
            entities.activity_type = 'general';
        } else if (lowerMessage.includes('roupa') || lowerMessage.includes('vestir')) {
            intent = 'clothing_advice';
            confidence = 0.9;
        } else if (lowerMessage.includes('dicas')) {
            intent = 'weather_tips';
            confidence = 0.8;
        } else if (lowerMessage.includes('zona') && (lowerMessage.includes('risco') || lowerMessage.includes('perigosa')) ||
            lowerMessage.includes('seguran√ßa') || lowerMessage.includes('inunda√ß√£o') || lowerMessage.includes('ciclone')) {
            intent = 'safety_zones';
            confidence = 0.9;
        } else if (lowerMessage.includes('alerta') || lowerMessage.includes('/alertas') || lowerMessage.includes('perigo')) {
            intent = 'weather_alerts';
            confidence = 0.9;
        } else if (lowerMessage.includes('amanh√£') || lowerMessage.includes('previs√£o')) {
            intent = 'weather_query_forecast';
            confidence = 0.8;
            entities.timeframe = 'tomorrow';
        } else if (hasWeatherKeywords || (hasCities && lowerMessage.length > 3)) {
            // S√ì classificar como weather se tiver palavras-chave de clima OU cidade + contexto
            intent = 'weather_query_current';
            confidence = 0.7;
        }

        return {
            success: true,
            analysis: {
                intent: intent,
                confidence: confidence,
                entities: entities,
                reasoning: 'An√°lise baseada em palavras-chave',
                response_type: 'informative',
                priority: 'medium',
                requires_weather_data: intent.includes('weather') || intent.includes('activity') || intent.includes('clothing') || intent === 'safety_zones',
                suggested_followup: 'contextual'
            },
            method: 'rule_based',
            originalMessage: message
        };
    }

    getContextualFallbackSuggestions(context, weatherData) {
        const temp = parseInt(weatherData?.temperature || 25);

        if (temp > 30) {
            return ["Dicas calor", "Que roupa", "Onde refrescar"];
        } else if (temp < 18) {
            return ["Dicas frio", "Roupas quentes", "Bebidas quentes"];
        } else if (weatherData?.description?.includes('chuva')) {
            return ["Vai parar?", "O que fazer", "Guarda-chuva"];
        } else {
            return ["O que fazer", "Tempo amanh√£", "Que roupa"];
        }
    }

    createFallbackAnalysis(message, context) {
        return {
            success: false,
            analysis: {
                intent: 'general_help',
                confidence: 0.3,
                entities: {
                    cities: [],
                    timeframe: 'none',
                    weather_aspect: 'general',
                    activity_type: 'none'
                },
                reasoning: 'Sistema em modo de emerg√™ncia',
                response_type: 'supportive',
                priority: 'low',
                requires_weather_data: false,
                suggested_followup: 'help'
            },
            method: 'emergency_fallback',
            originalMessage: message,
            error: 'Sistema temporariamente limitado'
        };
    }

    // ===============================================
    // UTILIT√ÅRIOS
    // ===============================================

    async callOpenAI(prompt, temperature = 0.7) {
        if (!this.token) {
            throw new Error('Token OpenAI n√£o dispon√≠vel');
        }

        const response = await axios.post(`${this.baseURL}/chat/completions`, {
            model: this.model,
            messages: [{ role: 'user', content: prompt }],
            max_tokens: this.maxTokens,
            temperature: temperature
        }, {
            headers: {
                'Authorization': `Bearer ${this.token}`,
                'Content-Type': 'application/json'
            },
            timeout: 15000
        });

        return response.data.choices[0].message.content;
    }

    // Cache methods
    getCacheKey(message, context) {
        const key = `${message}_${context.lastCity || 'no_city'}_${context.queryCount || 0}`;
        return key.toLowerCase().replace(/\s+/g, '_').substring(0, 50);
    }

    getCachedAnalysis(cacheKey) {
        if (this.analysisCache.has(cacheKey)) {
            const cached = this.analysisCache.get(cacheKey);
            if (Date.now() - cached.timestamp < this.cacheExpiry) {
                console.log('üìÇ Cache hit an√°lise:', cacheKey.substring(0, 20) + '...');
                return cached.data;
            } else {
                this.analysisCache.delete(cacheKey);
            }
        }
        return null;
    }

    setCachedAnalysis(cacheKey, analysis) {
        this.analysisCache.set(cacheKey, {
            data: analysis,
            timestamp: Date.now()
        });

        // Limpar cache se muito grande
        if (this.analysisCache.size > 50) {
            const firstKey = this.analysisCache.keys().next().value;
            this.analysisCache.delete(firstKey);
        }
    }

    // Teste de conectividade
    async testAIConnection() {
        try {
            const testAnalysis = await this.analyzeMessage('Teste de conex√£o', {});
            const testSuggestions = await this.generateSmartSuggestions({}, { temperature: 25 });

            return {
                success: true,
                message: 'Sistema AI 100% operacional',
                analysisWorking: testAnalysis.success,
                suggestionsWorking: testSuggestions.success,
                aiPowered: true
            };
        } catch (error) {
            return {
                success: false,
                message: 'Erro no sistema AI - modo fallback ativo',
                error: error.message,
                aiPowered: false
            };
        }
    }

    // Stats
    getSystemStats() {
        return {
            analysisCache: this.analysisCache.size,
            suggestionsHandler: this.suggestionsHandler.getCacheStats(),
            aiEnabled: !!this.token,
            model: this.model,
            maxTokens: this.maxTokens
        };
    }

    // ===============================================
    // GERA√á√ÉO DE OP√á√ïES DE CONSELHOS COM AI
    // ===============================================

    async generateAdviceOptions(weatherData, adviceContext = {}) {
        try {
            console.log('ü§ñ Gerando op√ß√µes de conselhos com AI baseadas no contexto');

            if (!this.token) {
                return this.generateBasicAdviceOptions(weatherData, adviceContext);
            }

            const prompt = this.buildAdviceOptionsPrompt(weatherData, adviceContext);
            const response = await this.callOpenAI(prompt, 0.7);

            // Parse da resposta JSON
            const options = JSON.parse(response);

            return {
                success: true,
                options: options.options || [],
                method: 'ai_powered'
            };

        } catch (error) {
            console.error('‚ùå Erro ao gerar op√ß√µes de conselhos:', error.message);
            return {
                success: true,
                options: this.generateBasicAdviceOptions(weatherData, adviceContext),
                method: 'fallback'
            };
        }
    }

    buildAdviceOptionsPrompt(weatherData, adviceContext) {
        const temp = parseInt(weatherData.temperature);
        const city = weatherData.city;
        const condition = weatherData.description;
        const { lastAdviceType, userExpertise } = adviceContext;

        return `${this.getBotIdentityContext()}

SITUA√á√ÉO ATUAL:
- Cidade: ${city}
- Temperatura: ${temp}¬∞C
- Condi√ß√£o: ${condition}
- √öltimo conselho dado: ${lastAdviceType || 'primeiro conselho'}
- N√≠vel do usu√°rio: ${userExpertise || 'b√°sico'}

INSTRU√á√ïES PARA GERAR OP√á√ïES DE CONSELHOS:
Cria 5-8 op√ß√µes de conselhos relacionados ao clima que o usu√°rio poderia querer saber mais. Cada op√ß√£o deve ter:
- id: identificador √∫nico (sem espa√ßos, use _)
- title: t√≠tulo curto (m√°ximo 24 caracteres)
- description: descri√ß√£o √∫til (m√°ximo 72 caracteres)

CONTEXTO BASEADO NA TEMPERATURA:
${this.getAdviceOptionsGuidanceByTemperature(temp, condition)}

TIPOS DE CONSELHOS √öTEIS:
- Sa√∫de e bem-estar relacionados ao clima
- Atividades espec√≠ficas para o tempo atual  
- Cuidados com roupas e equipamentos
- Prepara√ß√£o para mudan√ßas clim√°ticas
- Dicas de seguran√ßa
- Conselhos para diferentes momentos do dia
- Recomenda√ß√µes para casa/trabalho
- Dicas para crian√ßas/idosos

FORMATO DE RESPOSTA (JSON):
{
    "options": [
        {
            "id": "exemplo_conselho",
            "title": "üå°Ô∏è T√≠tulo Curto",
            "description": "Descri√ß√£o √∫til e espec√≠fica para o contexto atual"
        }
    ]
}

REGRAS IMPORTANTES:
- M√°ximo 8 op√ß√µes
- T√≠tulos com emojis relevantes
- Espec√≠fico para ${temp}¬∞C em ${city}
- Portugu√™s mo√ßambicano natural
- Evitar repetir o tipo de conselho j√° dado
- Op√ß√µes pr√°ticas e acion√°veis

Minha resposta JSON:`;
    }

    getAdviceOptionsGuidanceByTemperature(temperature, condition) {
        const isRaining = condition.toLowerCase().includes('chuva');

        if (isRaining) {
            return `EST√Å CHUVA: Foca em conselhos sobre prote√ß√£o contra chuva, atividades internas, preven√ß√£o de doen√ßas, cuidados com equipamentos eletr√¥nicos.`;
        } else if (temperature > 32) {
            return `MUITO QUENTE: Foca em hidrata√ß√£o, prote√ß√£o solar, resfriamento, preven√ß√£o de insola√ß√£o, roupas adequadas, hor√°rios seguros.`;
        } else if (temperature > 25) {
            return `TEMPERATURA AGRAD√ÅVEL: Foca em atividades ao ar livre, exerc√≠cios, passeios, cuidados gerais, aproveitamento do bom tempo.`;
        } else if (temperature > 18) {
            return `FRESCO: Foca em roupas em camadas, atividades indoor/outdoor, cuidados com mudan√ßas de temperatura, conforto t√©rmico.`;
        } else {
            return `FRIO: Foca em aquecimento, roupas quentes, preven√ß√£o de resfriados, cuidados com idosos/crian√ßas, seguran√ßa.`;
        }
    }

    generateBasicAdviceOptions(weatherData, adviceContext) {
        const temp = parseInt(weatherData.temperature);
        const options = [
            {
                id: "cuidados_saude",
                title: "üè• Cuidados de Sa√∫de",
                description: `Como manter a sa√∫de com ${temp}¬∞C`
            },
            {
                id: "atividades_recomendadas",
                title: "üéØ Atividades Ideais",
                description: `O que fazer com este tempo`
            },
            {
                id: "preparacao_mudancas",
                title: "üå§Ô∏è Mudan√ßas do Tempo",
                description: "Como se preparar para mudan√ßas"
            },
            {
                id: "dicas_seguranca",
                title: "‚ö†Ô∏è Dicas de Seguran√ßa",
                description: "Cuidados importantes para hoje"
            },
            {
                id: "conselhos_casa",
                title: "üè† Dicas para Casa",
                description: "Conselhos para o ambiente dom√©stico"
            }
        ];

        // Adicionar op√ß√µes espec√≠ficas baseadas na temperatura
        if (temp > 30) {
            options.push({
                id: "combater_calor",
                title: "üåû Combater o Calor",
                description: "T√©cnicas avan√ßadas de resfriamento"
            });
        } else if (temp < 20) {
            options.push({
                id: "manter_aquecido",
                title: "üß• Manter-se Aquecido",
                description: "Estrat√©gias para dias frios"
            });
        }

        return options;
    }

    clearAllCaches() {
        this.analysisCache.clear();
        this.suggestionsHandler.clearCache();
        console.log('‚úÖ Todos os caches AI limpos');
    }
}

module.exports = OPENAI;
