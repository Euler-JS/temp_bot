require('dotenv').config();
const axios = require('axios');

class SuggestionsHandler {
    constructor(openaiToken) {
        this.token = openaiToken;
        this.baseURL = 'https://api.openai.com/v1';
        this.model = 'gpt-3.5-turbo';
        this.maxTokens = 200;

        // Cache para sugest√µes frequentes
        this.suggestionsCache = new Map();
        this.cacheExpiry = 3600000; // 1 hora em milliseconds

        // Sugest√µes predefinidas por categoria
        this.predefinedSuggestions = {
            weather_basic: [
                "Tempo amanh√£?",
                "Previs√£o 7 dias",
                "Que roupa usar?"
            ],
            weather_rain: [
                "Vai chover?",
                "Dicas chuva",
                "Guarda-chuva?"
            ],
            weather_hot: [
                "Dicas calor",
                "Atividades frescas",
                "Proteger do sol"
            ],
            weather_cold: [
                "Dicas frio",
                "Como aquecer",
                "Atividades quentes"
            ],
            comparison: [
                "Comparar cidades",
                "Ontem vs hoje",
                "Melhor cidade"
            ],
            activities: [
                "Atividades hoje",
                "Onde ir?",
                "O que fazer?"
            ],
            educational: [
                "O que √© umidade?",
                "Como funciona?",
                "Mais sobre clima"
            ],
            practical: [
                "Roupa trabalho",
                "Melhor hora sair",
                "Hidrata√ß√£o"
            ],
            alerts: [
                "Alertas clima",
                "Avisos chuva",
                "Configurar avisos"
            ],
            help: [
                "Ajuda",
                "Comandos",
                "Configura√ß√µes"
            ]
        };

        // Padr√µes de resposta para diferentes situa√ß√µes
        this.contextPatterns = {
            followUp: {
                after_rain_query: ["Quando para?", "Intensidade?", "Dura√ß√£o?"],
                after_temp_query: ["Sensa√ß√£o real?", "Comparar ontem", "Tend√™ncia?"],
                after_forecast: ["Mais detalhes", "Outras cidades", "Semana toda"],
                after_comparison: ["Melhor op√ß√£o?", "Diferen√ßas?", "Recomenda√ß√£o?"]
            },
            timeOfDay: {
                morning: ["Tempo hoje", "O que vestir", "Atividades dia"],
                afternoon: ["Tempo noite", "Amanh√£ como?", "Final de semana"],
                evening: ["Tempo amanh√£", "Previs√£o semana", "Planos fim-de-semana"],
                night: ["Amanh√£ cedo", "Roupa amanh√£", "Previs√£o manh√£"]
            },
            weatherConditions: {
                sunny: ["Prote√ß√£o solar", "Atividades ar livre", "Hidrata√ß√£o"],
                rainy: ["Vai parar?", "Que fazer casa", "Tr√¢nsito"],
                cloudy: ["Vai chover?", "Temperatura", "Vento"],
                hot: ["Como refrescar", "Evitar calor", "Bebidas frescas"],
                cold: ["Como aquecer", "Roupas quentes", "Atividades indoor"]
            }
        };

        // Mapeamento de sugest√µes para processamento
        this.suggestionMappings = {
            // Atividades
            "Atividades hoje": "practical_tips_activities",
            "Onde ir?": "practical_tips_places",
            "O que fazer?": "practical_tips_general",
            "Atividades frescas": "practical_tips_hot_activities",
            "Atividades quentes": "practical_tips_cold_activities",
            "Atividades casa": "practical_tips_indoor",

            // Dicas pr√°ticas
            "Que roupa usar?": "practical_tips_clothing",
            "Dicas calor": "practical_tips_hot",
            "Dicas frio": "practical_tips_cold",
            "Dicas chuva": "practical_tips_rain",
            "Proteger do sol": "practical_tips_sun_protection",
            "Hidratar-se": "practical_tips_hydration",

            // Previs√µes
            "Tempo amanh√£?": "weather_forecast_tomorrow",
            "Previs√£o 7 dias": "weather_forecast_week",
            "Vai chover?": "weather_forecast_rain",
            "Pr√≥xima semana": "weather_forecast_next_week",

            // Compara√ß√µes
            "Comparar cidades": "weather_comparison_cities",
            "Ontem vs hoje": "weather_comparison_yesterday",
            "Como estava ontem": "weather_comparison_yesterday",

            // Educativas
            "O que √© umidade?": "weather_education_humidity",
            "Como funciona?": "weather_education_general",
            "Mais sobre clima": "weather_education_climate",

            // Comandos
            "Ajuda": "system_help",
            "Comandos": "system_commands",
            "Configura√ß√µes": "system_settings",

            // Frases espec√≠ficas que est√£o sendo mal interpretadas
            "H√° alguma atividade": "practical_tips_activities",
            "Alguma atividade": "practical_tips_activities",
            "Atividades dispon√≠veis": "practical_tips_activities",
            "O que posso fazer": "practical_tips_general",
            "Recomenda√ß√µes atividade": "practical_tips_activities"
        };

        if (!openaiToken) {
            console.warn('Token OpenAI n√£o fornecido - usando apenas sugest√µes predefinidas');
        }
    }

    // ===============================================
    // PROCESSAMENTO DE RESPOSTAS DE SUGEST√ïES
    // ===============================================

    async processSuggestionResponse(suggestionText, weatherData, userContext = {}) {
        try {
            console.log(`ü§ñ Processando resposta de sugest√£o com AI: "${suggestionText}"`);

            // Sanitizar dados
            weatherData = this.sanitizeWeatherData(weatherData);
            userContext = this.sanitizeUserContext(userContext);

            // 1. Usar AI para analisar a inten√ß√£o da sugest√£o
            const aiAnalysis = await this.analyzeSuggestionWithAI(suggestionText, weatherData, userContext);

            if (aiAnalysis.success) {
                console.log(`üß† An√°lise AI bem-sucedida:`, aiAnalysis.analysis);

                // 2. Gerar resposta baseada na an√°lise AI
                const response = await this.generateAIBasedResponse(
                    aiAnalysis.analysis,
                    suggestionText,
                    weatherData,
                    userContext
                );

                // 3. Gerar sugest√µes de follow-up com AI
                const newSuggestions = await this.generateAIFollowUpSuggestions(
                    aiAnalysis.analysis,
                    weatherData,
                    userContext
                );

                return {
                    success: true,
                    response: response,
                    suggestions: newSuggestions,
                    suggestionType: aiAnalysis.analysis.suggestionType,
                    originalSuggestion: suggestionText,
                    aiPowered: true
                };
            } else {
                console.log(`‚ö†Ô∏è AI analysis failed, usando fallback inteligente`);
                return await this.intelligentFallbackForSuggestion(suggestionText, weatherData, userContext);
            }

        } catch (error) {
            console.error('‚ùå Erro ao processar resposta de sugest√£o:', error.message);
            return this.createFallbackSuggestionResponse(suggestionText, weatherData);
        }
    }

    // ===============================================
    // AN√ÅLISE COM AI DA SUGEST√ÉO
    // ===============================================

    async analyzeSuggestionWithAI(suggestionText, weatherData, userContext) {
        try {
            if (!this.token) {
                console.log('‚ö†Ô∏è Token OpenAI n√£o dispon√≠vel, usando an√°lise baseada em regras');
                return { success: false, reason: 'no_token' };
            }

            const prompt = this.buildSuggestionAnalysisPrompt(suggestionText, weatherData, userContext);
            const response = await this.callOpenAI(prompt, 0.3);

            try {
                const analysis = JSON.parse(response);
                return {
                    success: true,
                    analysis: analysis,
                    rawResponse: response
                };
            } catch (parseError) {
                console.error('‚ùå Erro ao parsear resposta AI:', parseError.message);
                return { success: false, reason: 'parse_error', rawResponse: response };
            }

        } catch (error) {
            console.error('‚ùå Erro na an√°lise AI:', error.message);
            return { success: false, reason: 'ai_error', error: error.message };
        }
    }

    buildSuggestionAnalysisPrompt(suggestionText, weatherData, userContext) {
        const temp = weatherData.temperature || weatherData.maxTemp || 25;
        const city = weatherData.city || userContext.preferredCity || 'cidade';

        return `
Voc√™ √© um especialista em interpretar inten√ß√µes de usu√°rios em chatbots meteorol√≥gicos mo√ßambicanos.

TAREFA: Analisar a inten√ß√£o por tr√°s desta resposta/clique de sugest√£o.

RESPOSTA DO USU√ÅRIO: "${suggestionText}"

CONTEXTO METEOROL√ìGICO:
- Cidade: ${city}
- Temperatura: ${temp}¬∞C
- Condi√ß√µes: ${weatherData.description || 'n√£o informado'}
- Humidade: ${weatherData.humidity || 'n√£o informado'}%
- √â previs√£o: ${weatherData.isForecast ? 'Sim' : 'N√£o'}

CONTEXTO DO USU√ÅRIO:
- N√≠vel de experi√™ncia: ${userContext.expertiseLevel || 'basic'}
- Consultas anteriores: ${userContext.queryCount || 0}
- Cidade preferida: ${userContext.preferredCity || 'n√£o definida'}
- √öltima cidade consultada: ${userContext.lastCity || 'n√£o definida'}

AN√ÅLISE REQUERIDA:
Determine a verdadeira inten√ß√£o do usu√°rio e classifique em uma destas categorias:

1. **activities_request** - Usu√°rio quer saber sobre atividades/o que fazer
2. **clothing_advice** - Usu√°rio quer conselhos sobre o que vestir
3. **weather_tips_hot** - Usu√°rio quer dicas para clima quente
4. **weather_tips_cold** - Usu√°rio quer dicas para clima frio  
5. **weather_tips_rain** - Usu√°rio quer dicas para chuva
6. **forecast_tomorrow** - Usu√°rio quer previs√£o para amanh√£
7. **forecast_week** - Usu√°rio quer previs√£o para v√°rios dias
8. **rain_prediction** - Usu√°rio quer saber se vai chover
9. **city_comparison** - Usu√°rio quer comparar clima entre cidades
10. **help_request** - Usu√°rio precisa de ajuda/comandos
11. **general_weather** - Consulta geral sobre tempo

EXEMPLOS DE CLASSIFICA√á√ÉO:
- "H√° alguma atividade" ‚Üí activities_request
- "Atividades hoje" ‚Üí activities_request  
- "O que fazer" ‚Üí activities_request
- "Que roupa usar" ‚Üí clothing_advice
- "Como me vestir" ‚Üí clothing_advice
- "Dicas calor" ‚Üí weather_tips_hot
- "Como refrescar" ‚Üí weather_tips_hot
- "Dicas frio" ‚Üí weather_tips_cold
- "Tempo amanh√£" ‚Üí forecast_tomorrow
- "Vai chover" ‚Üí rain_prediction
- "Ajuda" ‚Üí help_request

IMPORTANTE: 
- Considere o contexto meteorol√≥gico atual
- Leve em conta o n√≠vel do usu√°rio (basic/intermediate/advanced)
- Seja preciso na classifica√ß√£o
- Se houver ambiguidade, escolha a op√ß√£o mais prov√°vel

RETORNE APENAS JSON:
{
    "suggestionType": "categoria_escolhida",
    "confidence": 0.95,
    "reasoning": "explica√ß√£o_da_escolha",
    "contextualFactors": [
        "fator1_considerado",
        "fator2_considerado"
    ],
    "userIntent": "descri√ß√£o_clara_da_inten√ß√£o",
    "recommendedResponse": "tipo_de_resposta_recomendada",
    "urgency": "low|medium|high",
    "complexity": "basic|intermediate|advanced"
}

An√°lise:`;
    }

    // ===============================================
    // GERA√á√ÉO DE RESPOSTA BASEADA EM AI
    // ===============================================

    async generateAIBasedResponse(analysis, originalText, weatherData, userContext) {
        try {
            if (!this.token) {
                return this.generateRuleBasedResponse(analysis.suggestionType, weatherData, userContext);
            }

            const prompt = this.buildResponseGenerationPrompt(analysis, originalText, weatherData, userContext);
            const response = await this.callOpenAI(prompt, 0.7);

            return response.trim();

        } catch (error) {
            console.error('‚ùå Erro na gera√ß√£o de resposta AI:', error.message);
            return this.generateRuleBasedResponse(analysis.suggestionType, weatherData, userContext);
        }
    }

    buildResponseGenerationPrompt(analysis, originalText, weatherData, userContext) {
        const temp = parseInt(weatherData.temperature || weatherData.maxTemp || 25);
        const city = weatherData.city || userContext.preferredCity || 'sua cidade';
        const level = userContext.expertiseLevel || 'basic';

        return `
Voc√™ √© um assistente meteorol√≥gico especializado para mo√ßambicanos.

TAREFA: Gerar uma resposta √∫til e contextual para esta consulta.

CONSULTA ORIGINAL: "${originalText}"
INTEN√á√ÉO IDENTIFICADA: ${analysis.suggestionType}
CONFIAN√áA: ${analysis.confidence}
RACIOC√çNIO: ${analysis.reasoning}

DADOS METEOROL√ìGICOS ATUAIS:
- Localiza√ß√£o: ${city}
- Temperatura: ${temp}¬∞C
- Condi√ß√µes: ${weatherData.description}
- Humidade: ${weatherData.humidity}%
- Tipo: ${weatherData.isForecast ? 'Previs√£o' : 'Dados atuais'}

PERFIL DO USU√ÅRIO:
- N√≠vel: ${level}
- Experi√™ncia: ${userContext.queryCount || 0} consultas
- Complexidade preferida: ${analysis.complexity}

INSTRU√á√ïES ESPEC√çFICAS POR TIPO:

${this.getSpecificInstructions(analysis.suggestionType, temp, weatherData.description)}

DIRETRIZES GERAIS:
- Use linguagem mo√ßambicana natural e familiar
- Seja pr√°tico e √∫til
- Considere as condi√ß√µes meteorol√≥gicas atuais
- Adapte a complexidade ao n√≠vel do usu√°rio
- Use emojis relevantes
- M√°ximo 300 palavras
- Foque na utilidade da informa√ß√£o

FORMATO DA RESPOSTA:
- T√≠tulo com emoji relevante
- Informa√ß√£o principal clara
- Lista de pontos pr√°ticos
- Dica final √∫til

Resposta:`;
    }

    getSpecificInstructions(suggestionType, temperature, description) {
        const instructions = {
            activities_request: `
ATIVIDADES: Recomende atividades espec√≠ficas baseadas na temperatura (${temperature}¬∞C) e condi√ß√µes.
- Temperatura > 30¬∞C: Atividades refrescantes, sombra, piscina
- Temperatura 20-30¬∞C: Atividades ao ar livre
- Temperatura < 20¬∞C: Atividades internas ou aquecimento
- Chuva: Atividades internas
Inclua locais espec√≠ficos da regi√£o.`,

            clothing_advice: `
VESTU√ÅRIO: Recomende roupas espec√≠ficas para ${temperature}¬∞C.
- Lista de pe√ßas espec√≠ficas
- Cores recomendadas
- Acess√≥rios necess√°rios (chap√©u, guarda-chuva, etc.)
- Considera√ß√µes especiais para o clima local`,

            weather_tips_hot: `
DICAS CALOR: Conselhos pr√°ticos para temperaturas altas.
- Hidrata√ß√£o espec√≠fica
- Hor√°rios para evitar
- Locais frescos na regi√£o
- Prote√ß√£o solar
- Sinais de alerta`,

            weather_tips_cold: `
DICAS FRIO: Conselhos para se aquecer.
- Camadas de roupa
- Bebidas e alimentos quentes
- Atividades para aquecer
- Cuidados de sa√∫de`,

            weather_tips_rain: `
DICAS CHUVA: Conselhos pr√°ticos para chuva.
- Prote√ß√£o pessoal
- Atividades alternativas
- Cuidados no tr√¢nsito
- Como aproveitar a chuva`,

            forecast_tomorrow: `
PREVIS√ÉO AMANH√É: Informa√ß√µes sobre o tempo de amanh√£.
- Indique que consultar√° fontes meteorol√≥gicas
- D√™ dicas de prepara√ß√£o
- Sugira verifica√ß√£o matinal`,

            rain_prediction: `
PREVIS√ÉO CHUVA: An√°lise sobre probabilidade de chuva.
- Analise condi√ß√µes atuais
- D√™ probabilidades baseadas no tempo atual
- Recomende prepara√ß√£o`,
        };

        return instructions[suggestionType] || `
RESPOSTA GERAL: Forne√ßa informa√ß√£o meteorol√≥gica √∫til e contextual.
- Baseie-se nas condi√ß√µes atuais
- Seja espec√≠fico e pr√°tico
- Adapte ao contexto local`;
    }

    // ===============================================
    // SUGEST√ïES DE FOLLOW-UP COM AI
    // ===============================================

    async generateAIFollowUpSuggestions(analysis, weatherData, userContext) {
        try {
            if (!this.token) {
                return this.getRuleBasedFollowUp(analysis.suggestionType, weatherData);
            }

            const prompt = this.buildFollowUpSuggestionsPrompt(analysis, weatherData, userContext);
            const response = await this.callOpenAI(prompt, 0.8);

            try {
                return JSON.parse(response);
            } catch (parseError) {
                console.error('‚ùå Erro ao parsear sugest√µes AI:', parseError.message);
                return this.getRuleBasedFollowUp(analysis.suggestionType, weatherData);
            }

        } catch (error) {
            console.error('‚ùå Erro ao gerar sugest√µes follow-up AI:', error.message);
            return this.getRuleBasedFollowUp(analysis.suggestionType, weatherData);
        }
    }

    buildFollowUpSuggestionsPrompt(analysis, weatherData, userContext) {
        return `
Gere 3 sugest√µes de follow-up inteligentes baseadas nesta intera√ß√£o:

CONSULTA PROCESSADA: ${analysis.suggestionType}
CONTEXTO METEOROL√ìGICO: ${weatherData.city}, ${weatherData.temperature}¬∞C, ${weatherData.description}
N√çVEL USU√ÅRIO: ${userContext.expertiseLevel}

REGRAS:
- M√°ximo 18 caracteres por sugest√£o
- Linguagem mo√ßambicana casual
- Relacionadas mas n√£o repetitivas
- √öteis para o contexto atual

TIPOS DE SUGEST√ïES DISPON√çVEIS:
- Previs√µes: "Tempo amanh√£", "Pr√≥xima semana"
- Dicas: "Dicas calor", "Dicas chuva", "Que roupa"
- Atividades: "O que fazer", "Onde ir"
- Compara√ß√µes: "Outras cidades", "Ontem vs hoje"
- Ajuda: "Mais dicas", "Comandos", "Ajuda"

Retorne APENAS um array JSON com 3 sugest√µes:
["sugest√£o1", "sugest√£o2", "sugest√£o3"]

Sugest√µes:`;
    }

    // ===============================================
    // FALLBACKS INTELIGENTES
    // ===============================================

    async intelligentFallbackForSuggestion(suggestionText, weatherData, userContext) {
        console.log('üîÑ Usando fallback inteligente baseado em contexto');

        // An√°lise b√°sica baseada em palavras-chave
        const basicAnalysis = this.analyzeWithKeywords(suggestionText);

        // Gerar resposta baseada em regras
        const response = this.generateRuleBasedResponse(basicAnalysis.type, weatherData, userContext);

        // Sugest√µes baseadas em regras
        const suggestions = this.getRuleBasedFollowUp(basicAnalysis.type, weatherData);

        return {
            success: true,
            response: response,
            suggestions: suggestions,
            suggestionType: basicAnalysis.type,
            originalSuggestion: suggestionText,
            aiPowered: false,
            fallbackMethod: 'intelligent_rules'
        };
    }

    analyzeWithKeywords(text) {
        const lowerText = text.toLowerCase();

        if (lowerText.includes('atividade') || lowerText.includes('fazer') || lowerText.includes('onde ir')) {
            return { type: 'activities_request', confidence: 0.8 };
        }
        if (lowerText.includes('roupa') || lowerText.includes('vestir')) {
            return { type: 'clothing_advice', confidence: 0.9 };
        }
        if (lowerText.includes('dicas') && lowerText.includes('calor')) {
            return { type: 'weather_tips_hot', confidence: 0.9 };
        }
        if (lowerText.includes('dicas') && lowerText.includes('frio')) {
            return { type: 'weather_tips_cold', confidence: 0.9 };
        }
        if (lowerText.includes('dicas') && lowerText.includes('chuva')) {
            return { type: 'weather_tips_rain', confidence: 0.9 };
        }
        if (lowerText.includes('amanh√£') || lowerText.includes('manh√£')) {
            return { type: 'forecast_tomorrow', confidence: 0.8 };
        }
        if (lowerText.includes('chover') || lowerText.includes('chuva')) {
            return { type: 'rain_prediction', confidence: 0.8 };
        }
        if (lowerText.includes('ajuda') || lowerText.includes('help')) {
            return { type: 'help_request', confidence: 0.9 };
        }

        return { type: 'general_weather', confidence: 0.5 };
    } identifySuggestionType(suggestionText) {
        // Limpar e normalizar o texto
        const cleanText = suggestionText.toLowerCase().trim();

        // Procurar mapeamento direto
        const directMapping = this.suggestionMappings[suggestionText];
        if (directMapping) {
            return directMapping;
        }

        // Procurar por palavras-chave
        if (cleanText.includes('atividade') || cleanText.includes('fazer') || cleanText.includes('onde ir')) {
            return 'practical_tips_activities';
        }

        if (cleanText.includes('roupa') || cleanText.includes('vestir')) {
            return 'practical_tips_clothing';
        }

        if (cleanText.includes('dicas') && cleanText.includes('calor')) {
            return 'practical_tips_hot';
        }

        if (cleanText.includes('dicas') && cleanText.includes('frio')) {
            return 'practical_tips_cold';
        }

        if (cleanText.includes('dicas') && cleanText.includes('chuva')) {
            return 'practical_tips_rain';
        }

        if (cleanText.includes('tempo') && (cleanText.includes('amanh√£') || cleanText.includes('manh√£'))) {
            return 'weather_forecast_tomorrow';
        }

        if (cleanText.includes('previs√£o') || cleanText.includes('7 dias') || cleanText.includes('semana')) {
            return 'weather_forecast_week';
        }

        if (cleanText.includes('vai chover') || cleanText.includes('chover')) {
            return 'weather_forecast_rain';
        }

        if (cleanText.includes('comparar') || cleanText.includes('outras cidades')) {
            return 'weather_comparison_cities';
        }

        if (cleanText.includes('ajuda') || cleanText.includes('help')) {
            return 'system_help';
        }

        // Fallback
        return 'weather_general_query';
    }

    async generateSuggestionSpecificResponse(suggestionType, originalText, weatherData, userContext) {
        console.log(`üîÑ Gerando resposta espec√≠fica para tipo: ${suggestionType}`);

        switch (suggestionType) {
            case 'practical_tips_activities':
                return this.generateActivitiesResponse(weatherData, userContext);

            case 'practical_tips_clothing':
                return this.generateClothingResponse(weatherData, userContext);

            case 'practical_tips_hot':
                return this.generateHotWeatherTipsResponse(weatherData, userContext);

            case 'practical_tips_cold':
                return this.generateColdWeatherTipsResponse(weatherData, userContext);

            case 'practical_tips_rain':
                return this.generateRainTipsResponse(weatherData, userContext);

            case 'weather_forecast_tomorrow':
                return this.generateTomorrowForecastResponse(weatherData, userContext);

            case 'weather_forecast_week':
                return this.generateWeekForecastResponse(weatherData, userContext);

            case 'weather_forecast_rain':
                return this.generateRainForecastResponse(weatherData, userContext);

            case 'weather_comparison_cities':
                return this.generateCityComparisonResponse(weatherData, userContext);

            case 'system_help':
                return this.generateHelpResponse(userContext);

            default:
                return this.generateGeneralWeatherResponse(weatherData, userContext);
        }
    }

    // ========================================
    // RESPOSTAS ESPEC√çFICAS POR TIPO
    // ========================================

    generateActivitiesResponse(weatherData, userContext) {
        const temp = parseInt(weatherData.temperature || 25);
        const description = weatherData.description.toLowerCase();
        const city = weatherData.city || userContext.preferredCity || 'sua cidade';

        let activities = [];
        let message = `üéØ *Atividades para hoje em ${city}*\n\n`;

        // Baseado na temperatura
        if (temp > 32) {
            activities = [
                "üèä‚Äç‚ôÄÔ∏è Piscina ou praia (manh√£/tarde)",
                "üå¥ Sombra num parque",
                "üõçÔ∏è Shopping center (ar condicionado)",
                "üè† Atividades dentro de casa",
                "ü•§ Caf√© gelado num local fresco"
            ];
            message += "üå°Ô∏è Est√° muito quente! Recomendo atividades refrescantes:\n\n";
        } else if (temp > 26) {
            activities = [
                "üö∂‚Äç‚ôÄÔ∏è Caminhada no parque",
                "üèñÔ∏è Praia ou costa",
                "‚öΩ Desportos ao ar livre",
                "üé£ Pesca",
                "üåÖ Piquenique"
            ];
            message += "‚òÄÔ∏è Temperatura boa para atividades ao ar livre:\n\n";
        } else if (temp > 20) {
            activities = [
                "üö¥‚Äç‚ôÇÔ∏è Andar de bicicleta",
                "ü•æ Caminhadas",
                "‚öΩ Futebol",
                "üé® Atividades ao ar livre",
                "üå≥ Visitar jardins"
            ];
            message += "üå§Ô∏è Temperatura ideal para sair:\n\n";
        } else {
            activities = [
                "‚òï Caf√© quente num local aconchegante",
                "üè† Atividades dentro de casa",
                "üé¨ Cinema",
                "üìö Biblioteca",
                "üõçÔ∏è Shopping"
            ];
            message += "üß• Est√° fresco, melhor atividades internas:\n\n";
        }

        // Ajustar baseado nas condi√ß√µes
        if (description.includes('chuva')) {
            activities = [
                "üè† Ficar em casa relaxando",
                "üé¨ Ver filmes",
                "üìö Ler um livro",
                "‚òï Caf√© quente",
                "üõçÔ∏è Shopping center"
            ];
            message = `üåßÔ∏è *Com chuva em ${city}, melhor ficar protegido:*\n\n`;
        }

        // Adicionar atividades √† mensagem
        activities.forEach((activity, index) => {
            message += `${index + 1}. ${activity}\n`;
        });

        message += `\nüí° *Dica:* Sempre verifique a previs√£o antes de sair!`;

        return message;
    }

    generateClothingResponse(weatherData, userContext) {
        const temp = parseInt(weatherData.temperature || 25);
        const description = weatherData.description.toLowerCase();
        const city = weatherData.city || userContext.preferredCity || 'sua cidade';

        let message = `üëî *Como se vestir em ${city}*\n\n`;
        message += `üå°Ô∏è Temperatura: ${temp}¬∞C\n`;
        message += `üå§Ô∏è Condi√ß√µes: ${weatherData.description}\n\n`;

        if (temp > 32) {
            message += `üî• *Muito quente!*\n`;
            message += `‚Ä¢ üëï Roupas leves e claras\n`;
            message += `‚Ä¢ ü©≥ Shorts ou saias\n`;
            message += `‚Ä¢ üë° Sand√°lias abertas\n`;
            message += `‚Ä¢ üß¢ Chap√©u ou bon√©\n`;
            message += `‚Ä¢ üï∂Ô∏è √ìculos de sol\n`;
            message += `‚Ä¢ üß¥ Protetor solar\n`;
        } else if (temp > 26) {
            message += `‚òÄÔ∏è *Quente e agrad√°vel:*\n`;
            message += `‚Ä¢ üëï Camisas leves\n`;
            message += `‚Ä¢ üëñ Cal√ßas leves ou shorts\n`;
            message += `‚Ä¢ üëü T√©nis ou sand√°lias\n`;
            message += `‚Ä¢ üß¢ Bon√© (opcional)\n`;
        } else if (temp > 20) {
            message += `üå§Ô∏è *Temperatura ideal:*\n`;
            message += `‚Ä¢ üëï Camisa normal\n`;
            message += `‚Ä¢ üëñ Cal√ßas normais\n`;
            message += `‚Ä¢ üëü Sapatos fechados\n`;
            message += `‚Ä¢ üß• Casaco leve (noite)\n`;
        } else {
            message += `‚ùÑÔ∏è *Fresco:*\n`;
            message += `‚Ä¢ üß• Casaco ou sweatshirt\n`;
            message += `‚Ä¢ üëñ Cal√ßas compridas\n`;
            message += `‚Ä¢ üëü Sapatos fechados\n`;
            message += `‚Ä¢ üß£ Cachecol (se muito frio)\n`;
        }

        if (description.includes('chuva')) {
            message += `\nüåßÔ∏è *Extra para chuva:*\n`;
            message += `‚Ä¢ ‚òÇÔ∏è Guarda-chuva\n`;
            message += `‚Ä¢ üß• Casaco imperme√°vel\n`;
            message += `‚Ä¢ üëü Sapatos que n√£o escorregam\n`;
        }

        if (description.includes('vento')) {
            message += `\nüí® *Para o vento:*\n`;
            message += `‚Ä¢ üß• Casaco bem fechado\n`;
            message += `‚Ä¢ üëñ Evitar roupas soltas\n`;
        }

        return message;
    }

    generateHotWeatherTipsResponse(weatherData, userContext) {
        const temp = parseInt(weatherData.temperature || 25);
        const city = weatherData.city || userContext.preferredCity || 'sua cidade';

        let message = `üî• *Dicas para o calor em ${city}*\n\n`;
        message += `üå°Ô∏è ${temp}¬∞C - `;

        if (temp > 35) {
            message += `Calor extremo!\n\n`;
            message += `‚ö†Ô∏è *CUIDADOS ESPECIAIS:*\n`;
            message += `‚Ä¢ üíß Beba √°gua constantemente\n`;
            message += `‚Ä¢ üè† Evite sair entre 10h-16h\n`;
            message += `‚Ä¢ üß¢ Sempre use chap√©u\n`;
            message += `‚Ä¢ üå¥ Procure sempre sombra\n`;
            message += `‚Ä¢ ‚ùÑÔ∏è Banhos frios frequentes\n`;
        } else if (temp > 30) {
            message += `Muito quente!\n\n`;
            message += `üåû *DICAS IMPORTANTES:*\n`;
            message += `‚Ä¢ üíß Hidrate-se bem\n`;
            message += `‚Ä¢ üëï Roupas leves e claras\n`;
            message += `‚Ä¢ üß¥ Use protetor solar\n`;
            message += `‚Ä¢ üå¥ Prefira locais com sombra\n`;
            message += `‚Ä¢ ü•§ Bebidas frescas\n`;
        } else {
            message += `Quente mas suport√°vel\n\n`;
            message += `‚òÄÔ∏è *DICAS GERAIS:*\n`;
            message += `‚Ä¢ üíß Beba √°gua regularmente\n`;
            message += `‚Ä¢ üëï Vista-se adequadamente\n`;
            message += `‚Ä¢ üï∂Ô∏è √ìculos de sol\n`;
            message += `‚Ä¢ üß¥ Protetor solar\n`;
        }

        message += `\nüçÉ *LOCAIS FRESCOS EM ${city.toUpperCase()}:*\n`;
        message += `‚Ä¢ üõçÔ∏è Centros comerciais\n`;
        message += `‚Ä¢ üèä‚Äç‚ôÄÔ∏è Piscinas p√∫blicas\n`;
        message += `‚Ä¢ üåä Praia (manh√£/tarde)\n`;
        message += `‚Ä¢ üå≥ Parques com sombra\n`;
        message += `‚Ä¢ ‚òï Caf√©s com ar condicionado\n`;

        message += `\n‚ö†Ô∏è *EVITAR:*\n`;
        message += `‚Ä¢ üöó Carros ao sol\n`;
        message += `‚Ä¢ ‚öΩ Exerc√≠cios intensos\n`;
        message += `‚Ä¢ üç∫ √Ålcool em excesso\n`;
        message += `‚Ä¢ üëñ Roupas escuras/pesadas\n`;

        return message;
    }

    generateColdWeatherTipsResponse(weatherData, userContext) {
        const temp = parseInt(weatherData.temperature || 25);
        const city = weatherData.city || userContext.preferredCity || 'sua cidade';

        let message = `‚ùÑÔ∏è *Dicas para o frio em ${city}*\n\n`;
        message += `üå°Ô∏è ${temp}¬∞C - `;

        if (temp < 10) {
            message += `Muito frio!\n\n`;
            message += `üß• *AGASALHE-SE BEM:*\n`;
            message += `‚Ä¢ üß£ Cachecol e gorro\n`;
            message += `‚Ä¢ üß§ Luvas se necess√°rio\n`;
            message += `‚Ä¢ üëü Sapatos fechados\n`;
            message += `‚Ä¢ üß• V√°rias camadas de roupa\n`;
        } else if (temp < 18) {
            message += `Fresco\n\n`;
            message += `üß• *VISTA-SE ADEQUADAMENTE:*\n`;
            message += `‚Ä¢ üß• Casaco ou sweatshirt\n`;
            message += `‚Ä¢ üëñ Cal√ßas compridas\n`;
            message += `‚Ä¢ üëü Sapatos fechados\n`;
            message += `‚Ä¢ üß¶ Meias quentes\n`;
        } else {
            message += `Temperatura amena\n\n`;
            message += `üå§Ô∏è *CONFORTO:*\n`;
            message += `‚Ä¢ üëï Camisa manga comprida\n`;
            message += `‚Ä¢ üß• Casaco leve\n`;
            message += `‚Ä¢ üëñ Cal√ßas normais\n`;
        }

        message += `\n‚òï *COMO SE AQUECER:*\n`;
        message += `‚Ä¢ ‚òï Bebidas quentes\n`;
        message += `‚Ä¢ üç≤ Sopas e comidas quentes\n`;
        message += `‚Ä¢ üö∂‚Äç‚ôÄÔ∏è Movimento/exerc√≠cio\n`;
        message += `‚Ä¢ üè† Locais aquecidos\n`;

        message += `\nüè† *ATIVIDADES PARA O FRIO:*\n`;
        message += `‚Ä¢ ‚òï Caf√© numa pastelaria\n`;
        message += `‚Ä¢ üé¨ Cinema\n`;
        message += `‚Ä¢ üìö Biblioteca\n`;
        message += `‚Ä¢ üõçÔ∏è Shopping\n`;
        message += `‚Ä¢ üè† Atividades em casa\n`;

        return message;
    }

    generateRainTipsResponse(weatherData, userContext) {
        const city = weatherData.city || userContext.preferredCity || 'sua cidade';
        const description = weatherData.description.toLowerCase();

        let message = `üåßÔ∏è *Dicas para a chuva em ${city}*\n\n`;

        if (description.includes('forte') || description.includes('intensa')) {
            message += `‚õàÔ∏è *CHUVA FORTE - CUIDADO EXTRA:*\n`;
            message += `‚Ä¢ üè† Melhor ficar em casa\n`;
            message += `‚Ä¢ üöó Evitar conduzir\n`;
            message += `‚Ä¢ ‚ö†Ô∏è Risco de inunda√ß√µes\n`;
            message += `‚Ä¢ üì± Acompanhar alertas\n`;
        } else {
            message += `üåßÔ∏è *CHUVA MODERADA:*\n`;
            message += `‚Ä¢ ‚òÇÔ∏è Leve sempre guarda-chuva\n`;
            message += `‚Ä¢ üß• Casaco imperme√°vel\n`;
            message += `‚Ä¢ üëü Sapatos anti-derrapantes\n`;
            message += `‚Ä¢ üì± Verifique previs√£o\n`;
        }

        message += `\nüéí *O QUE LEVAR:*\n`;
        message += `‚Ä¢ ‚òÇÔ∏è Guarda-chuva\n`;
        message += `‚Ä¢ üß• Capa de chuva\n`;
        message += `‚Ä¢ üëü Sapatos adequados\n`;
        message += `‚Ä¢ üéí Saco pl√°stico (proteger coisas)\n`;
        message += `‚Ä¢ üì± Telefone protegido\n`;

        message += `\nüö∂‚Äç‚ôÄÔ∏è *AO ANDAR NA CHUVA:*\n`;
        message += `‚Ä¢ üëÄ Cuidado com o ch√£o molhado\n`;
        message += `‚Ä¢ üåä Evite po√ßas grandes\n`;
        message += `‚Ä¢ üöó Aten√ß√£o ao tr√¢nsito\n`;
        message += `‚Ä¢ üèÉ‚Äç‚ôÄÔ∏è N√£o correr (perigoso)\n`;

        message += `\nüè† *ATIVIDADES PARA CHUVA:*\n`;
        message += `‚Ä¢ ‚òï Caf√© aconchegante\n`;
        message += `‚Ä¢ üé¨ Cinema\n`;
        message += `‚Ä¢ üìö Ler em casa\n`;
        message += `‚Ä¢ üõçÔ∏è Shopping center\n`;
        message += `‚Ä¢ üéÆ Jogos em casa\n`;

        message += `\nüí° *DICA:* Aproveite o som relaxante da chuva!`;

        return message;
    }

    generateTomorrowForecastResponse(weatherData, userContext) {
        const city = weatherData.city || userContext.preferredCity || 'sua cidade';

        return `üåÖ *Previs√£o para amanh√£ em ${city}*\n\n` +
            `üìç Esta √© uma consulta sobre a previs√£o de amanh√£.\n\n` +
            `Para obter dados precisos, preciso consultar o servi√ßo meteorol√≥gico.\n\n` +
            `üí° *Entretanto, posso dar dicas:*\n` +
            `‚Ä¢ üì± Verifique sempre antes de sair\n` +
            `‚Ä¢ üëî Prepare a roupa na v√©spera\n` +
            `‚Ä¢ ‚òÇÔ∏è Tenha guarda-chuva √† m√£o\n` +
            `‚Ä¢ üå°Ô∏è Note a varia√ß√£o de temperatura\n\n` +
            `‚ú® Digite "previs√£o ${city}" para dados actualizados!`;
    }

    generateWeekForecastResponse(weatherData, userContext) {
        const city = weatherData.city || userContext.preferredCity || 'sua cidade';

        return `üìÖ *Previs√£o para 7 dias em ${city}*\n\n` +
            `üìä Para uma previs√£o semanal detalhada, consulto m√∫ltiplas fontes meteorol√≥gicas.\n\n` +
            `üîÆ *O que posso antecipar:*\n` +
            `‚Ä¢ üå°Ô∏è Tend√™ncias de temperatura\n` +
            `‚Ä¢ üåßÔ∏è Probabilidade de chuva\n` +
            `‚Ä¢ üí® Condi√ß√µes de vento\n` +
            `‚Ä¢ ‚òÄÔ∏è Dias mais ensolarados\n\n` +
            `üì± Digite "previs√£o 7 dias ${city}" para relat√≥rio completo!`;
    }

    generateRainForecastResponse(weatherData, userContext) {
        const city = weatherData.city || userContext.preferredCity || 'sua cidade';
        const description = weatherData.description.toLowerCase();

        let message = `üåßÔ∏è *Previs√£o de chuva em ${city}*\n\n`;

        if (description.includes('chuva')) {
            message += `üåßÔ∏è *AGORA:* J√° est√° chovendo!\n`;
            message += `‚è∞ *DURA√á√ÉO:* Consultando padr√µes...\n`;
            message += `üìä *INTENSIDADE:* ${weatherData.description}\n\n`;
            message += `‚ö†Ô∏è *RECOMENDA√á√ïES IMEDIATAS:*\n`;
            message += `‚Ä¢ ‚òÇÔ∏è Use guarda-chuva\n`;
            message += `‚Ä¢ üè† Evite sair se n√£o for necess√°rio\n`;
            message += `‚Ä¢ üëü Sapatos antiderrapantes\n`;
        } else {
            message += `‚òÄÔ∏è *AGORA:* Sem chuva\n`;
            message += `üîÆ *PROBABILIDADE PR√ìXIMAS HORAS:* Analisando...\n\n`;
            message += `üì± *DICAS:*\n`;
            message += `‚Ä¢ üå•Ô∏è Observe as nuvens\n`;
            message += `‚Ä¢ ‚òÇÔ∏è Leve guarda-chuva preventivo\n`;
            message += `‚Ä¢ üì≤ Acompanhe alertas meteorol√≥gicos\n`;
        }

        message += `\nüí° Para previs√£o precisa de chuva, digite "chuva ${city}"`;

        return message;
    }

    generateCityComparisonResponse(weatherData, userContext) {
        const currentCity = weatherData.city || userContext.preferredCity || 'sua cidade';

        return `üèôÔ∏è *Compara√ß√£o entre cidades*\n\n` +
            `üìç Cidade actual: ${currentCity}\n` +
            `üå°Ô∏è Temperatura: ${weatherData.temperature}¬∞C\n` +
            `üå§Ô∏è Condi√ß√µes: ${weatherData.description}\n\n` +
            `‚öñÔ∏è *Para comparar com outras cidades:*\n` +
            `‚Ä¢ Digite "comparar Maputo Beira"\n` +
            `‚Ä¢ Ou "tempo Maputo vs Nampula"\n` +
            `‚Ä¢ Ou "melhor cidade hoje"\n\n` +
            `üìä *Principais cidades mo√ßambicanas:*\n` +
            `‚Ä¢ üèõÔ∏è Maputo (capital)\n` +
            `‚Ä¢ üåä Beira (porto)\n` +
            `‚Ä¢ üå¥ Nampula (norte)\n` +
            `‚Ä¢ üèñÔ∏è Quelimane (costa)\n` +
            `‚Ä¢ ‚õ∞Ô∏è Tete (interior)\n` +
            `‚Ä¢ üê† Pemba (cabo delgado)`;
    }

    generateHelpResponse(userContext) {
        const level = userContext.expertiseLevel || 'basic';

        let message = `ü§ñ *Ajuda - Sistema Meteorol√≥gico*\n\n`;

        if (level === 'basic') {
            message += `üåü *COMANDOS SIMPLES:*\n`;
            message += `‚Ä¢ "tempo Maputo" - Clima actual\n`;
            message += `‚Ä¢ "amanh√£ Beira" - Previs√£o\n`;
            message += `‚Ä¢ "vai chover?" - Chuva\n`;
            message += `‚Ä¢ "que roupa usar?" - Vestu√°rio\n`;
            message += `‚Ä¢ "atividades hoje" - O que fazer\n\n`;
        } else {
            message += `‚ö° *COMANDOS AVAN√áADOS:*\n`;
            message += `‚Ä¢ "previs√£o 7 dias Maputo"\n`;
            message += `‚Ä¢ "comparar Maputo Beira"\n`;
            message += `‚Ä¢ "alertas chuva"\n`;
            message += `‚Ä¢ "an√°lise t√©rmica"\n`;
            message += `‚Ä¢ "configura√ß√µes"\n\n`;
        }

        message += `üí° *DICAS DE USO:*\n`;
        message += `‚Ä¢ üéØ Clique nas sugest√µes\n`;
        message += `‚Ä¢ üìç Mencione sempre a cidade\n`;
        message += `‚Ä¢ ‚è∞ Especifique o tempo (hoje/amanh√£)\n`;
        message += `‚Ä¢ üîÑ Use linguagem natural\n\n`;

        message += `üÜò *PRECISA DE MAIS AJUDA?*\n`;
        message += `Digite "comandos" para lista completa`;

        return message;
    }

    generateGeneralWeatherResponse(weatherData, userContext) {
        const city = weatherData.city || userContext.preferredCity || 'sua cidade';

        return `üå§Ô∏è *Informa√ß√£o meteorol√≥gica geral*\n\n` +
            `üìç Localiza√ß√£o: ${city}\n` +
            `üå°Ô∏è Temperatura: ${weatherData.temperature}¬∞C\n` +
            `üå§Ô∏è Condi√ß√µes: ${weatherData.description}\n` +
            `üíß Humidade: ${weatherData.humidity}%\n\n` +
            `üí° *Pode perguntar:*\n` +
            `‚Ä¢ Previs√µes (amanh√£, semana)\n` +
            `‚Ä¢ Dicas pr√°ticas (roupa, atividades)\n` +
            `‚Ä¢ Compara√ß√µes entre cidades\n` +
            `‚Ä¢ Alertas meteorol√≥gicos\n\n` +
            `‚ú® Use as sugest√µes abaixo para explorar mais!`;
    }

    // ========================================
    // SUGEST√ïES DE FOLLOW-UP
    // ========================================

    async generateFollowUpSuggestions(suggestionType, weatherData, userContext) {
        console.log(`üîÑ Gerando sugest√µes follow-up para: ${suggestionType}`);

        switch (suggestionType) {
            case 'practical_tips_activities':
                return this.getActivitiesFollowUp(weatherData, userContext);

            case 'practical_tips_clothing':
                return this.getClothingFollowUp(weatherData, userContext);

            case 'practical_tips_hot':
            case 'practical_tips_cold':
            case 'practical_tips_rain':
                return this.getWeatherTipsFollowUp(weatherData, userContext);

            case 'weather_forecast_tomorrow':
            case 'weather_forecast_week':
            case 'weather_forecast_rain':
                return this.getForecastFollowUp(weatherData, userContext);

            case 'weather_comparison_cities':
                return this.getComparisonFollowUp(weatherData, userContext);

            case 'system_help':
                return this.getHelpFollowUp(userContext);

            default:
                return this.getGeneralFollowUp(weatherData, userContext);
        }
    }

    getActivitiesFollowUp(weatherData, userContext) {
        const temp = parseInt(weatherData.temperature || 25);
        const description = weatherData.description.toLowerCase();

        if (description.includes('chuva')) {
            return ["Vai parar chuva?", "Atividades casa", "Filmes hoje"];
        }

        if (temp > 30) {
            return ["Locais frescos", "Dicas calor", "Piscinas perto"];
        }

        if (temp < 18) {
            return ["Locais quentes", "Dicas frio", "Caf√©s perto"];
        }

        return ["Previs√£o semana", "Outras cidades", "Que roupa usar"];
    }

    getClothingFollowUp(weatherData, userContext) {
        const description = weatherData.description.toLowerCase();

        if (description.includes('chuva')) {
            return ["Vai parar chuva?", "Atividades chuva", "Cal√ßados chuva"];
        }

        return ["Tempo amanh√£", "Atividades hoje", "Previs√£o semana"];
    }

    getWeatherTipsFollowUp(weatherData, userContext) {
        return ["Atividades hoje", "Previs√£o amanh√£", "Outras cidades"];
    }

    getForecastFollowUp(weatherData, userContext) {
        return ["Que roupa usar", "Atividades", "Comparar cidades"];
    }

    getComparisonFollowUp(weatherData, userContext) {
        return ["Melhor cidade", "Tempo amanh√£", "Atividades"];
    }

    getHelpFollowUp(userContext) {
        const level = userContext.expertiseLevel || 'basic';

        if (level === 'basic') {
            return ["Tempo hoje", "Que roupa usar", "Atividades"];
        } else {
            return ["Configura√ß√µes", "Comandos", "An√°lise t√©cnica"];
        }
    }

    getGeneralFollowUp(weatherData, userContext) {
        return ["Tempo amanh√£", "Atividades hoje", "Dicas √∫teis"];
    }

    // ========================================
    // FALLBACK PARA SUGEST√ïES
    // ========================================

    createFallbackSuggestionResponse(suggestionText, weatherData) {
        console.log('üö® Usando resposta fallback para sugest√£o');

        return {
            success: false,
            response: `ü§ñ Recebi a sua sugest√£o "${suggestionText}".\n\n` +
                `Para melhor ajud√°-lo, pode ser mais espec√≠fico?\n\n` +
                `üí° Exemplos:\n` +
                `‚Ä¢ "tempo hoje Maputo"\n` +
                `‚Ä¢ "que roupa usar"\n` +
                `‚Ä¢ "atividades para hoje"\n` +
                `‚Ä¢ "vai chover?"`,
            suggestions: ["Tempo hoje", "Atividades", "Ajuda"],
            suggestionType: 'fallback',
            originalSuggestion: suggestionText
        };
    }

    // ===============================================
    // M√âTODO PRINCIPAL - GERAR SUGEST√ïES
    // ===============================================

    async generateSuggestions(analysis, weatherData, userContext = {}) {
        try {
            // Validar e sanitizar par√¢metros de entrada
            analysis = this.sanitizeAnalysis(analysis);
            weatherData = this.sanitizeWeatherData(weatherData);
            userContext = this.sanitizeUserContext(userContext);

            console.log('üîÑ Gerando sugest√µes...', {
                type: analysis.type,
                city: analysis.city,
                intent: analysis.intent,
                expertise: analysis.expertiseLevel
            });

            // 1. Verificar cache primeiro
            const cacheKey = this.createCacheKey(analysis, weatherData, userContext);
            const cached = this.getCachedSuggestions(cacheKey);
            if (cached) {
                console.log('‚úÖ Sugest√µes do cache');
                return cached;
            }

            // 2. Tentar gerar sugest√µes inteligentes via OpenAI
            let suggestions = null;
            if (this.token) {
                suggestions = await this.generateIntelligentSuggestions(analysis, weatherData, userContext);
            }

            // 3. Fallback para sugest√µes baseadas em regras
            if (!suggestions || suggestions.length === 0) {
                console.log('üîÑ Usando sugest√µes baseadas em regras');
                suggestions = this.generateRuleBasedSuggestions(analysis, weatherData, userContext);
            }

            // 4. Validar e limpar sugest√µes
            const validatedSuggestions = this.validateSuggestions(suggestions);

            // 5. Adicionar ao cache
            this.cacheSuggestions(cacheKey, validatedSuggestions);

            console.log('‚úÖ Sugest√µes geradas:', validatedSuggestions);
            return validatedSuggestions;

        } catch (error) {
            console.error('‚ùå Erro ao gerar sugest√µes:', error.message);
            return this.getEmergencyFallbackSuggestions(analysis, weatherData);
        }
    }

    // ===============================================
    // SUGEST√ïES INTELIGENTES VIA OPENAI
    // ===============================================

    async generateIntelligentSuggestions(analysis, weatherData, userContext) {
        try {
            const prompt = this.buildSuggestionsPrompt(analysis, weatherData, userContext);
            const response = await this.callOpenAI(prompt, 0.8);

            // Tentar parsear a resposta como JSON
            let suggestions;
            try {
                suggestions = JSON.parse(response);
            } catch (parseError) {
                // Se n√£o for JSON v√°lido, tentar extrair sugest√µes do texto
                suggestions = this.extractSuggestionsFromText(response);
            }

            return Array.isArray(suggestions) ? suggestions : [];

        } catch (error) {
            console.error('Erro na gera√ß√£o inteligente de sugest√µes:', error.message);
            return null;
        }
    }

    buildSuggestionsPrompt(analysis, weatherData, userContext) {
        const timeContext = weatherData.isForecast ? "previs√£o para amanh√£" : "dados atuais";
        const temperature = weatherData.isForecast ?
            `${weatherData.minTemp}¬∞C - ${weatherData.maxTemp}¬∞C` :
            `${weatherData.temperature}¬∞C`;

        return `
Gere 3 sugest√µes √∫teis e relevantes para um usu√°rio mo√ßambicano da Beira baseado nesta consulta meteorol√≥gica:

CONTEXTO DA CONSULTA:
- Tipo: ${analysis.type} (${timeContext})
- Cidade: ${analysis.city}
- Inten√ß√£o: ${analysis.intent}
- N√≠vel do usu√°rio: ${analysis.expertiseLevel}

DADOS CLIM√ÅTICOS:
- Temperatura: ${temperature}
- Condi√ß√µes: ${weatherData.description}
- Humidade: ${weatherData.humidity || 'N/A'}%

PERFIL DO USU√ÅRIO:
- Consultas anteriores: ${userContext.queryCount || 0}
- Cidade frequente: ${userContext.lastCity || 'N/A'}
- Prefer√™ncia: ${userContext.preferredComplexity || 'basic'}
- Hor√°rio: ${this.getCurrentTimeContext()}

DIRETRIZES PARA SUGEST√ïES:
1. M√ÅXIMO 18 caracteres por sugest√£o (para caber nos bot√µes WhatsApp)
2. Use portugu√™s mo√ßambicano casual e familiar
3. Priorize relev√¢ncia para a situa√ß√£o atual
4. Misture diferentes tipos: previs√µes, dicas pr√°ticas, compara√ß√µes
5. Considere o contexto temporal (manh√£, tarde, noite)

TIPOS DE SUGEST√ïES DISPON√çVEIS:
- Previs√µes: "Tempo amanh√£", "Pr√≥xima semana", "Fim-de-semana"
- Pr√°ticas: "Que roupa?", "Atividades", "Dicas calor/frio"
- Compara√ß√µes: "Outras cidades", "Ontem vs hoje"
- Educativas: "O que √©...?", "Como funciona?"
- Alertas: "Vai chover?", "Alertas"
- Comandos: "Ajuda", "Configurar"

EXEMPLOS DE LINGUAGEM MO√áAMBICANA:
- "Tempo amanh√£?" (n√£o "Previs√£o para amanh√£")
- "Que roupa usar?" (n√£o "Vestu√°rio recomendado")
- "Vai chover?" (n√£o "Probabilidade de precipita√ß√£o")
- "Como est√°?" (n√£o "Condi√ß√µes atuais")
- "Dicas calor" (n√£o "Recomenda√ß√µes temperatura")

CONTEXTO ESPEC√çFICO:
${this.getSpecificContext(analysis, weatherData, userContext)}

IMPORTANTE: Retorne APENAS um array JSON com 3 sugest√µes, nada mais.
Exemplo: ["Tempo amanh√£?", "Que roupa usar?", "Vai chover?"]

Sugest√µes:`;
    }

    getSpecificContext(analysis, weatherData, userContext) {
        const contexts = [];

        // Contexto baseado na temperatura
        if (weatherData.temperature || weatherData.maxTemp) {
            const temp = parseInt(weatherData.temperature || weatherData.maxTemp);
            if (temp > 30) contexts.push("- Clima quente: priorizar dicas de refrescamento");
            if (temp < 15) contexts.push("- Clima frio: priorizar dicas de aquecimento");
        }

        // Contexto baseado nas condi√ß√µes
        if (weatherData.description.toLowerCase().includes('chuva')) {
            contexts.push("- Chuva: incluir sugest√µes sobre prote√ß√£o e atividades internas");
        }

        // Contexto temporal
        const timeContext = this.getCurrentTimeContext();
        if (timeContext === 'morning') {
            contexts.push("- Manh√£: focar no dia que vem pela frente");
        } else if (timeContext === 'evening') {
            contexts.push("- Noite: focar no dia seguinte");
        }

        // Contexto do usu√°rio
        if (userContext.queryCount > 5) {
            contexts.push("- Usu√°rio experiente: incluir op√ß√µes mais avan√ßadas");
        }

        return contexts.length > 0 ? contexts.join('\n') : "- Primeira consulta: focar em op√ß√µes b√°sicas e √∫teis";
    }

    extractSuggestionsFromText(text) {
        // Tentar extrair sugest√µes de texto livre
        const lines = text.split('\n').filter(line => line.trim());
        const suggestions = [];

        for (const line of lines) {
            // Procurar por padr√µes como "1. ", "- ", ou apenas linhas curtas
            const cleaned = line.replace(/^\d+\.\s*/, '').replace(/^[-*]\s*/, '').trim();
            if (cleaned.length > 0 && cleaned.length <= 20) {
                suggestions.push(cleaned);
            }
        }

        return suggestions.slice(0, 3);
    }

    // ===============================================
    // SUGEST√ïES BASEADAS EM REGRAS
    // ===============================================

    generateRuleBasedSuggestions(analysis, weatherData, userContext) {
        console.log('üîÑ Gerando sugest√µes baseadas em regras...');

        const suggestions = [];
        const usedSuggestions = new Set();

        // 1. Sugest√£o baseada no contexto principal
        const primarySuggestion = this.getPrimarySuggestion(analysis, weatherData, userContext);
        if (primarySuggestion && !usedSuggestions.has(primarySuggestion)) {
            suggestions.push(primarySuggestion);
            usedSuggestions.add(primarySuggestion);
        }

        // 2. Sugest√£o baseada nas condi√ß√µes clim√°ticas
        const weatherSuggestion = this.getWeatherBasedSuggestion(weatherData, userContext);
        if (weatherSuggestion && !usedSuggestions.has(weatherSuggestion)) {
            suggestions.push(weatherSuggestion);
            usedSuggestions.add(weatherSuggestion);
        }

        // 3. Sugest√£o baseada no tempo/contexto
        const timeSuggestion = this.getTimeBasedSuggestion(analysis, weatherData, userContext);
        if (timeSuggestion && !usedSuggestions.has(timeSuggestion)) {
            suggestions.push(timeSuggestion);
            usedSuggestions.add(timeSuggestion);
        }

        // 4. Preencher com sugest√µes padr√£o se necess√°rio
        const defaultSuggestions = this.getDefaultSuggestions(analysis.expertiseLevel);
        for (const suggestion of defaultSuggestions) {
            if (suggestions.length >= 3) break;
            if (!usedSuggestions.has(suggestion)) {
                suggestions.push(suggestion);
                usedSuggestions.add(suggestion);
            }
        }

        return suggestions.slice(0, 3);
    }

    getPrimarySuggestion(analysis, weatherData, userContext) {
        // Baseado no tipo de consulta atual
        switch (analysis.type) {
            case 'weather_data':
                return weatherData.isForecast ? "Previs√£o 7 dias" : "Tempo amanh√£?";

            case 'comparison':
                return "Outras cidades";

            case 'practical_tips':
                return "Mais dicas";

            case 'weather_education':
                return "Explicar melhor";

            default:
                return "Tempo hoje";
        }
    }

    getWeatherBasedSuggestion(weatherData, userContext) {
        const description = weatherData.description.toLowerCase();
        const temp = parseInt(weatherData.temperature || weatherData.maxTemp || 25);

        // Baseado nas condi√ß√µes clim√°ticas
        if (description.includes('chuva') || description.includes('chuvoso')) {
            return "Vai parar chuva?";
        }

        if (temp > 30) {
            return "Dicas calor";
        }

        if (temp < 15) {
            return "Dicas frio";
        }

        if (description.includes('sol') || description.includes('claro')) {
            return "Atividades hoje";
        }

        if (description.includes('nuvem') || description.includes('nublado')) {
            return "Vai chover?";
        }

        return "Que roupa usar?";
    }

    getTimeBasedSuggestion(analysis, weatherData, userContext) {
        const timeContext = this.getCurrentTimeContext();
        const isWeekend = this.isWeekend();

        if (isWeekend) {
            return "Fim-de-semana";
        }

        switch (timeContext) {
            case 'morning':
                return weatherData.isForecast ? "Tempo hoje" : "Planos hoje";

            case 'afternoon':
                return "Tempo noite";

            case 'evening':
            case 'night':
                return "Amanh√£ cedo";

            default:
                return "Pr√≥xima semana";
        }
    }

    getDefaultSuggestions(expertiseLevel) {
        switch (expertiseLevel) {
            case 'basic':
                return ["Ajuda", "Tempo amanh√£?", "Que roupa usar?"];

            case 'intermediate':
                return ["Comparar cidades", "Previs√£o 7 dias", "Atividades"];

            case 'advanced':
                return ["An√°lise t√©cnica", "Tend√™ncias", "Configura√ß√µes"];

            default:
                return ["Ajuda", "Mais info", "Configurar"];
        }
    }

    // ===============================================
    // SUGEST√ïES DE EMERG√äNCIA
    // ===============================================

    getEmergencyFallbackSuggestions(analysis, weatherData) {
        console.log('üö® Usando sugest√µes de emerg√™ncia');

        const city = analysis.city || 'sua cidade';
        const isRaining = weatherData.description.toLowerCase().includes('chuva');

        if (isRaining) {
            return ["Vai parar chuva?", "Dicas chuva", "Atividades casa"];
        }

        return ["Tempo amanh√£?", "Que roupa usar?", "Mais info"];
    }

    // ===============================================
    // M√âTODOS DE SANITIZA√á√ÉO
    // ===============================================

    sanitizeAnalysis(analysis) {
        if (!analysis || typeof analysis !== 'object') {
            return {
                type: "weather_data",
                city: "maputo",
                intent: "consulta_basica",
                expertiseLevel: "basic",
                context: {
                    timeframe: "hoje",
                    weatherAspect: "geral"
                }
            };
        }

        return {
            type: analysis.type || "weather_data",
            city: analysis.city || "maputo",
            intent: analysis.intent || "consulta_basica",
            expertiseLevel: analysis.expertiseLevel || "basic",
            context: analysis.context || {
                timeframe: "hoje",
                weatherAspect: "geral"
            }
        };
    }

    sanitizeWeatherData(weatherData) {
        if (!weatherData || typeof weatherData !== 'object') {
            return {
                city: "Maputo",
                temperature: "25",
                description: "ensolarado",
                humidity: "65",
                isForecast: false
            };
        }

        return {
            city: weatherData.city || "Maputo",
            temperature: weatherData.temperature || weatherData.maxTemp || "25",
            minTemp: weatherData.minTemp || weatherData.temperature || "20",
            maxTemp: weatherData.maxTemp || weatherData.temperature || "30",
            description: weatherData.description || "ensolarado",
            humidity: weatherData.humidity || "65",
            isForecast: Boolean(weatherData.isForecast)
        };
    }

    sanitizeUserContext(userContext) {
        if (!userContext || typeof userContext !== 'object') {
            return {
                queryCount: 0,
                lastCity: "maputo",
                preferredCity: "maputo",
                expertiseLevel: "basic"
            };
        }

        return {
            queryCount: userContext.queryCount || 0,
            lastCity: userContext.lastCity || "maputo",
            preferredCity: userContext.preferredCity || "maputo",
            expertiseLevel: userContext.expertiseLevel || "basic",
            preferredComplexity: userContext.preferredComplexity || "basic"
        };
    }

    // ===============================================
    // UTILIT√ÅRIOS
    // ===============================================

    validateSuggestions(suggestions) {
        if (!Array.isArray(suggestions)) {
            return this.predefinedSuggestions.weather_basic;
        }

        const validated = suggestions
            .filter(s => typeof s === 'string' && s.trim().length > 0)
            .map(s => s.trim())
            .map(s => s.length > 18 ? s.substring(0, 18) : s)
            .slice(0, 3);

        // Se n√£o temos sugest√µes suficientes, completar com padr√£o
        while (validated.length < 3) {
            const fallback = this.predefinedSuggestions.weather_basic[validated.length];
            if (fallback && !validated.includes(fallback)) {
                validated.push(fallback);
            } else {
                validated.push("Mais info");
            }
        }

        return validated;
    }

    getCurrentTimeContext() {
        const hour = new Date().getHours();

        if (hour >= 6 && hour < 12) return 'morning';
        if (hour >= 12 && hour < 18) return 'afternoon';
        if (hour >= 18 && hour < 22) return 'evening';
        return 'night';
    }

    isWeekend() {
        const day = new Date().getDay();
        return day === 0 || day === 6; // Sunday or Saturday
    }

    // ===============================================
    // SISTEMA DE CACHE
    // ===============================================

    createCacheKey(analysis, weatherData, userContext) {
        const keyParts = [
            analysis.type,
            analysis.city,
            analysis.intent,
            weatherData.description,
            Math.floor(parseInt(weatherData.temperature || weatherData.maxTemp || 20) / 5) * 5, // Arredondado para 5¬∞C
            this.getCurrentTimeContext(),
            userContext.expertiseLevel || 'basic'
        ];

        return keyParts.join('|');
    }

    getCachedSuggestions(cacheKey) {
        const cached = this.suggestionsCache.get(cacheKey);
        if (!cached) return null;

        // Verificar se n√£o expirou
        if (Date.now() - cached.timestamp > this.cacheExpiry) {
            this.suggestionsCache.delete(cacheKey);
            return null;
        }

        return cached.suggestions;
    }

    cacheSuggestions(cacheKey, suggestions) {
        this.suggestionsCache.set(cacheKey, {
            suggestions: suggestions,
            timestamp: Date.now()
        });

        // Limpar cache antigo se ficar muito grande
        if (this.suggestionsCache.size > 100) {
            const oldestKey = this.suggestionsCache.keys().next().value;
            this.suggestionsCache.delete(oldestKey);
        }
    }

    // ===============================================
    // COMUNICA√á√ÉO COM OPENAI
    // ===============================================

    async callOpenAI(prompt, temperature = 0.7) {
        if (!this.token) {
            throw new Error('Token OpenAI n√£o configurado');
        }

        const requestData = {
            model: this.model,
            messages: [
                {
                    role: "system",
                    content: "Voc√™ √© um especialista em criar sugest√µes de intera√ß√£o para um chatbot meteorol√≥gico mo√ßambicano. Sempre retorne apenas arrays JSON v√°lidos com sugest√µes curtas e pr√°ticas."
                },
                {
                    role: "user",
                    content: prompt
                }
            ],
            max_tokens: this.maxTokens,
            temperature: temperature,
            top_p: 1,
            frequency_penalty: 0.3,
            presence_penalty: 0.1
        };

        const response = await axios.post(
            `${this.baseURL}/chat/completions`,
            requestData,
            {
                headers: {
                    'Authorization': `Bearer ${this.token}`,
                    'Content-Type': 'application/json'
                },
                timeout: 15000
            }
        );

        return response.data.choices[0].message.content.trim();
    }

    // ===============================================
    // M√âTODOS P√öBLICOS ADICIONAIS
    // ===============================================

    // Obter sugest√µes para um contexto espec√≠fico
    getSuggestionsForContext(context, userLevel = 'basic') {
        const contextSuggestions = this.predefinedSuggestions[context];
        if (contextSuggestions) {
            return contextSuggestions.slice(0, 3);
        }

        return this.predefinedSuggestions.weather_basic;
    }

    // ===============================================
    // M√âTODOS DE RESPOSTA BASEADOS EM REGRAS (FALLBACK)
    // ===============================================

    generateRuleBasedResponse(suggestionType, weatherData, userContext) {
        const temp = parseInt(weatherData.temperature || weatherData.maxTemp || 25);
        const city = weatherData.city || userContext.preferredCity || 'sua regi√£o';

        const responses = {
            activities_request: () => {
                if (temp > 30) {
                    return `üèä‚Äç‚ôÄÔ∏è *Atividades para Clima Quente em ${city}*\n\nCom ${temp}¬∞C, recomendo:\n\n‚Ä¢ Nata√ß√£o ou praia üèñÔ∏è\n‚Ä¢ Cinemas climatizados üé¨\n‚Ä¢ Centros comerciais üõçÔ∏è\n‚Ä¢ Parques com sombra üå≥\n‚Ä¢ Atividades aqu√°ticas üí¶\n\n*Dica:* Evite o sol entre 10h-15h!`;
                } else if (temp > 20) {
                    return `üö∂‚Äç‚ôÄÔ∏è *Atividades Perfeitas para ${city}*\n\nCom ${temp}¬∞C, ideal para:\n\n‚Ä¢ Caminhadas ao ar livre üö∂‚Äç‚ôÄÔ∏è\n‚Ä¢ Ciclismo üö¥‚Äç‚ôÄÔ∏è\n‚Ä¢ Piqueniques no parque üß∫\n‚Ä¢ Visitas a museus üèõÔ∏è\n‚Ä¢ Desportos ao ar livre ‚öΩ\n\n*Aproveite este tempo agrad√°vel!*`;
                } else {
                    return `‚òï *Atividades para Clima Fresco em ${city}*\n\nCom ${temp}¬∞C, melhor:\n\n‚Ä¢ Caf√©s aconchegantes ‚òï\n‚Ä¢ Bibliotecas e livrarias üìö\n‚Ä¢ Cinemas üé≠\n‚Ä¢ Museus üñºÔ∏è\n‚Ä¢ Atividades internas üè†\n\n*Vista-se bem quentinho!*`;
                }
            },

            clothing_advice: () => {
                if (temp > 30) {
                    return `üëï *Vestu√°rio para ${temp}¬∞C*\n\n*Roupas recomendadas:*\n‚Ä¢ Tecidos leves (algod√£o, linho) üëï\n‚Ä¢ Cores claras ‚ö™\n‚Ä¢ Chap√©u ou bon√© üëí\n‚Ä¢ √ìculos de sol üï∂Ô∏è\n‚Ä¢ Protector solar üß¥\n\n*Evite:* Roupas escuras e sint√©ticas`;
                } else if (temp > 20) {
                    return `üëî *Vestu√°rio Ideal para ${temp}¬∞C*\n\n*Perfect para:*\n‚Ä¢ Camisa leve + cal√ßas üëî\n‚Ä¢ Vestidos frescos üëó\n‚Ä¢ Sapatos fechados üëü\n‚Ä¢ Casaco leve √† noite üß•\n\n*Tempo ideal para qualquer roupa!*`;
                } else {
                    return `üß• *Vestu√°rio para ${temp}¬∞C*\n\n*Vista camadas:*\n‚Ä¢ Casaco ou camisola üß•\n‚Ä¢ Cal√ßas compridas üëñ\n‚Ä¢ Sapatos fechados üëû\n‚Ä¢ Cachecol se necess√°rio üß£\n\n*Mantenha-se aquecido!*`;
                }
            },

            weather_tips_hot: () => {
                return `üå°Ô∏è *Dicas para Calor Intenso*\n\n*Hidrata√ß√£o:*\n‚Ä¢ Beba √°gua constantemente üíß\n‚Ä¢ Sumos naturais sem a√ß√∫car ü•§\n‚Ä¢ Evite √°lcool e cafe√≠na ‚ùå\n\n*Prote√ß√£o:*\n‚Ä¢ Fique na sombra üå≥\n‚Ä¢ Use protector solar ‚òÄÔ∏è\n‚Ä¢ Evite sol 10h-15h üïê\n\n*Sinais de alerta:* Tonturas, n√°useas, dores de cabe√ßa`;
            },

            weather_tips_cold: () => {
                return `‚ùÑÔ∏è *Dicas para Clima Frio*\n\n*Aquecimento:*\n‚Ä¢ Vista camadas de roupa üß•\n‚Ä¢ Bebidas quentes ‚òï\n‚Ä¢ Movimento e exerc√≠cio üèÉ‚Äç‚ôÄÔ∏è\n\n*Cuidados:*\n‚Ä¢ Proteja extremidades üß§\n‚Ä¢ Mantenha-se seco üåÇ\n‚Ä¢ Cuidado com superf√≠cies escorregadias ‚ö†Ô∏è`;
            },

            weather_tips_rain: () => {
                return `üåßÔ∏è *Dicas para Tempo Chuvoso*\n\n*Prote√ß√£o:*\n‚Ä¢ Guarda-chuva resistente ‚òÇÔ∏è\n‚Ä¢ Sapatos imperme√°veis üë¢\n‚Ä¢ Roupa com capuz üß•\n\n*Seguran√ßa:*\n‚Ä¢ Cuidado no tr√¢nsito üöó\n‚Ä¢ Evite √°reas alagadas üåä\n‚Ä¢ Conduza devagar üöô\n\n*Aproveitamento:* Leia um livro, filme em casa üìö`;
            },

            forecast_tomorrow: () => {
                return `üìÖ *Previs√£o para Amanh√£*\n\nVou consultar as fontes meteorol√≥gicas mais recentes para ${city}.\n\n*Prepara√ß√£o sugerida:*\n‚Ä¢ Verifique a previs√£o de manh√£ üåÖ\n‚Ä¢ Prepare roupa alternativa üëï\n‚Ä¢ Tenha guarda-chuva dispon√≠vel ‚òÇÔ∏è\n\n*Voltarei com informa√ß√µes atualizadas!*`;
            },

            rain_prediction: () => {
                const humidity = weatherData.humidity || 60;
                const chance = humidity > 80 ? 'alta' : humidity > 60 ? 'moderada' : 'baixa';
                return `üåßÔ∏è *An√°lise de Chuva para ${city}*\n\n*Condi√ß√µes atuais:*\n‚Ä¢ Humidade: ${humidity}% üíß\n‚Ä¢ Probabilidade: ${chance} üìä\n‚Ä¢ Temperatura: ${temp}¬∞C üå°Ô∏è\n\n*Recomenda√ß√£o:*\n${chance === 'alta' ? 'Leve guarda-chuva!' : 'Provavelmente n√£o chove'} ‚òÇÔ∏è`;
            },

            help_request: () => {
                return `üÜò *Como Posso Ajudar*\n\n*Comandos dispon√≠veis:*\n‚Ä¢ Nome da cidade - tempo atual üåç\n‚Ä¢ "Tempo amanh√£" - previs√£o üìÖ\n‚Ä¢ "Dicas calor/frio" - conselhos üí°\n‚Ä¢ "Que roupa usar" - vestu√°rio üëï\n‚Ä¢ "O que fazer" - atividades üéØ\n\n*Digite sua pergunta naturalmente!* üí¨`;
            },

            general_weather: () => {
                return `üå§Ô∏è *Informa√ß√£o Meteorol√≥gica*\n\n*Condi√ß√µes em ${city}:*\n‚Ä¢ Temperatura: ${temp}¬∞C üå°Ô∏è\n‚Ä¢ Estado: ${weatherData.description || 'Informa√ß√£o limitada'} ‚òÅÔ∏è\n‚Ä¢ Humidade: ${weatherData.humidity || 'N/A'}% üíß\n\n*Posso ajudar com mais detalhes espec√≠ficos!* ü§ù`;
            }
        };

        const responseGenerator = responses[suggestionType] || responses.general_weather;
        return responseGenerator();
    }

    getRuleBasedFollowUp(suggestionType, weatherData) {
        const temp = parseInt(weatherData.temperature || weatherData.maxTemp || 25);

        const followUps = {
            activities_request: temp > 25 ?
                ["Dicas calor", "Que roupa", "Tempo amanh√£"] :
                ["Que roupa", "Outras cidades", "Tempo amanh√£"],

            clothing_advice: temp > 30 ?
                ["Dicas calor", "O que fazer", "Protector solar"] :
                ["O que fazer", "Tempo amanh√£", "Outras cidades"],

            weather_tips_hot: ["Que roupa", "Onde refrescar", "Tempo amanh√£"],
            weather_tips_cold: ["Que roupa", "Bebidas quentes", "Tempo amanh√£"],
            weather_tips_rain: ["Que roupa", "Ativ. internas", "Quando para"],

            forecast_tomorrow: ["Que roupa", "O que fazer", "Outras cidades"],
            rain_prediction: ["Guarda-chuva", "Planos B", "Tempo amanh√£"],
            help_request: ["Tempo atual", "Previs√£o", "Dicas √∫teis"],
            general_weather: ["O que fazer", "Que roupa", "Tempo amanh√£"]
        };

        return followUps[suggestionType] || followUps.general_weather;
    }

    // Limpar cache manualmente
    clearCache() {
        this.suggestionsCache.clear();
        console.log('‚úÖ Cache de sugest√µes limpo');
    }

    // Obter estat√≠sticas do cache
    getCacheStats() {
        return {
            size: this.suggestionsCache.size,
            maxSize: 100,
            expiry: this.cacheExpiry / 60000 + ' minutos'
        };
    }

    // Teste de conectividade
    async testConnection() {
        if (!this.token) {
            return {
                success: false,
                message: "Token OpenAI n√£o configurado - usando apenas sugest√µes predefinidas",
                fallbackMode: true
            };
        }

        try {
            const testPrompt = 'Retorne apenas: ["Teste 1", "Teste 2", "Teste 3"]';
            const response = await this.callOpenAI(testPrompt, 0.1);
            const parsed = JSON.parse(response);

            return {
                success: true,
                message: "Conex√£o OpenAI OK - sugest√µes inteligentes dispon√≠veis",
                test: parsed
            };
        } catch (error) {
            return {
                success: false,
                message: "Erro na conex√£o OpenAI - usando fallback",
                error: error.message,
                fallbackMode: true
            };
        }
    }
}

module.exports = SuggestionsHandler;
