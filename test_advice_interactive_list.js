// test_advice_interactive_list.js - Teste para lista interativa de conselhos com AI
require('dotenv').config();
const OPENAI = require('./open_ai/open_ai');

async function testAdviceInteractiveSystem() {
    console.log('üîç TESTANDO SISTEMA DE LISTA INTERATIVA DE CONSELHOS COM AI\n');

    const openaiService = new OPENAI();

    // Dados de teste
    const testWeatherData = {
        city: 'Beira',
        temperature: 31,
        description: 'sol forte',
        humidity: 65
    };

    const testAdviceContext = {
        lastAdviceType: 'safety_advice',
        userExpertise: 'basic',
        weatherCondition: 'sol forte',
        temperature: 31
    };

    console.log('ü§ñ TESTANDO GERA√á√ÉO DE OP√á√ïES DE CONSELHOS COM AI:');
    console.log('‚ïê'.repeat(60));

    try {
        console.log('üå§Ô∏è Contexto do teste:');
        console.log(`   üèôÔ∏è Cidade: ${testWeatherData.city}`);
        console.log(`   üå°Ô∏è Temperatura: ${testWeatherData.temperature}¬∞C`);
        console.log(`   ‚òÄÔ∏è Condi√ß√£o: ${testWeatherData.description}`);
        console.log(`   üìö N√≠vel usu√°rio: ${testAdviceContext.userExpertise}`);
        console.log(`   üéØ √öltimo conselho: ${testAdviceContext.lastAdviceType}`);

        console.log('\nü§ñ Gerando op√ß√µes de conselhos com AI...');

        const result = await openaiService.generateAdviceOptions(testWeatherData, testAdviceContext);

        if (result.success) {
            console.log(`‚úÖ Gera√ß√£o bem-sucedida! M√©todo: ${result.method}`);
            console.log(`üìä Total de op√ß√µes: ${result.options.length}`);

            console.log('\nüí° OP√á√ïES GERADAS:');
            console.log('‚ñ¨'.repeat(50));

            result.options.forEach((option, index) => {
                console.log(`${index + 1}Ô∏è‚É£ ID: ${option.id}`);
                console.log(`   üìù T√≠tulo: ${option.title}`);
                console.log(`   üìÑ Descri√ß√£o: ${option.description}`);
                console.log(`   üìè Comprimento t√≠tulo: ${option.title.length} (m√°x 24)`);
                console.log(`   üìè Comprimento desc: ${option.description.length} (m√°x 72)`);
                console.log('');
            });

            // Verificar se as op√ß√µes respeitam os limites do WhatsApp
            console.log('üîç VALIDA√á√ÉO DE FORMATO:');
            console.log('‚ïê'.repeat(40));

            let validOptions = 0;
            let titleErrors = 0;
            let descErrors = 0;

            result.options.forEach((option, index) => {
                const titleValid = option.title && option.title.length <= 24;
                const descValid = option.description && option.description.length <= 72;
                const idValid = option.id && option.id.length > 0;

                if (titleValid && descValid && idValid) {
                    validOptions++;
                } else {
                    if (!titleValid) titleErrors++;
                    if (!descValid) descErrors++;
                }

                console.log(`Op√ß√£o ${index + 1}: ${titleValid && descValid && idValid ? '‚úÖ' : '‚ùå'}`);
                if (!titleValid) console.log(`   ‚ö†Ô∏è T√≠tulo muito longo: ${option.title.length} caracteres`);
                if (!descValid) console.log(`   ‚ö†Ô∏è Descri√ß√£o muito longa: ${option.description.length} caracteres`);
                if (!idValid) console.log(`   ‚ö†Ô∏è ID inv√°lido`);
            });

            console.log(`\nüìä RESULTADO DA VALIDA√á√ÉO:`);
            console.log(`‚úÖ Op√ß√µes v√°lidas: ${validOptions}/${result.options.length}`);
            console.log(`‚ùå Erros de t√≠tulo: ${titleErrors}`);
            console.log(`‚ùå Erros de descri√ß√£o: ${descErrors}`);

            if (validOptions === result.options.length) {
                console.log('üéâ TODAS AS OP√á√ïES EST√ÉO V√ÅLIDAS PARA O WHATSAPP!');
            } else {
                console.log('‚ö†Ô∏è Algumas op√ß√µes precisam de ajuste.');
            }

            // Testar com diferentes condi√ß√µes clim√°ticas
            console.log('\nüå§Ô∏è TESTANDO DIFERENTES CONDI√á√ïES CLIM√ÅTICAS:');
            console.log('‚ïê'.repeat(55));

            const scenarios = [
                { temp: 35, condition: 'sol muito forte', description: 'Calor extremo' },
                { temp: 22, condition: 'nublado', description: 'Temperatura agrad√°vel' },
                { temp: 16, condition: 'frio', description: 'Temperatura baixa' },
                { temp: 28, condition: 'chuva', description: 'Chuva' }
            ];

            for (const scenario of scenarios) {
                console.log(`\nüîç Cen√°rio: ${scenario.temp}¬∞C - ${scenario.description}`);

                const scenarioWeatherData = {
                    ...testWeatherData,
                    temperature: scenario.temp,
                    description: scenario.condition
                };

                try {
                    const scenarioResult = await openaiService.generateAdviceOptions(scenarioWeatherData, testAdviceContext);

                    if (scenarioResult.success) {
                        console.log(`   ‚úÖ ${scenarioResult.options.length} op√ß√µes geradas`);
                        console.log(`   üìù Exemplos: ${scenarioResult.options.slice(0, 2).map(o => o.title).join(', ')}`);
                    } else {
                        console.log(`   ‚ùå Falha na gera√ß√£o`);
                    }
                } catch (error) {
                    console.log(`   ‚ùå Erro: ${error.message}`);
                }
            }

        } else {
            console.log('‚ùå Falha na gera√ß√£o de op√ß√µes');
            console.log(`üìù M√©todo usado: ${result.method}`);
            if (result.options) {
                console.log(`üìä Op√ß√µes fallback: ${result.options.length}`);
            }
        }

        console.log('\nüîó FLUXO COMPLETO TESTADO:');
        console.log('‚ïê'.repeat(40));
        console.log('1Ô∏è‚É£ Usu√°rio envia "/conselhos"');
        console.log('2Ô∏è‚É£ Bot gera conselhos de seguran√ßa com AI');
        console.log('3Ô∏è‚É£ Bot envia mensagem com conselhos');
        console.log('4Ô∏è‚É£ Bot aguarda 2s');
        console.log('5Ô∏è‚É£ Bot gera op√ß√µes de conselhos adicionais com AI');
        console.log('6Ô∏è‚É£ Bot envia lista interativa personalizada');
        console.log('7Ô∏è‚É£ Usu√°rio seleciona op√ß√£o da lista');
        console.log('8Ô∏è‚É£ Bot processa atrav√©s de handlers espec√≠ficos');
        console.log('9Ô∏è‚É£ Bot envia resposta personalizada');

        console.log('\n‚úÖ SISTEMA DE CONSELHOS AI-POWERED IMPLEMENTADO!');

    } catch (error) {
        console.error('‚ùå Erro no teste:', error.message);
    }

    console.log('\nüéØ TESTE DE LISTA INTERATIVA DE CONSELHOS CONCLU√çDO!');
}

// Executar o teste
testAdviceInteractiveSystem().catch(console.error);
