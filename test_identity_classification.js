// test_identity_classification.js - Teste espec√≠fico para classifica√ß√£o de perguntas de identidade
require('dotenv').config();
const OPENAI = require('./open_ai/open_ai');

async function testIdentityClassification() {
    console.log('üîç TESTANDO CLASSIFICA√á√ÉO DE PERGUNTAS DE IDENTIDADE\n');

    const openaiService = new OPENAI();

    // Lista de perguntas sobre identidade que devem ser classificadas como N√ÉO-clim√°ticas
    const identityQuestions = [
        "Que voc√™ √©?",
        "Quem √© voc√™?",
        "O que √© isso?",
        "Quem √©s tu?",
        "O que √©s?",
        "Qual √© o teu nome?",
        "Como te chamas?",
        "Que bot √© este?",
        "Quem te criou?",
        "Para que serves?",
        "O que fazes?",
        "Qual √© a tua fun√ß√£o?"
    ];

    console.log('ü§ñ TESTANDO PERGUNTAS SOBRE IDENTIDADE:');
    console.log('‚ïê'.repeat(60));

    let correctClassifications = 0;
    let totalQuestions = identityQuestions.length;

    for (let i = 0; i < identityQuestions.length; i++) {
        const question = identityQuestions[i];
        console.log(`\n${i + 1}Ô∏è‚É£ Pergunta: "${question}"`);

        try {
            const analysisResult = await openaiService.analyzeMessage(question, {
                preferredCity: 'Beira',
                queryCount: 0
            });

            if (analysisResult.success) {
                const analysis = analysisResult.analysis;
                const isWeatherQuery = openaiService.isWeatherRelatedQuery(analysis);

                console.log(`   üìä Intent: ${analysis.intent}`);
                console.log(`   üéØ Confidence: ${analysis.confidence}`);
                console.log(`   üå§Ô∏è √â sobre clima: ${isWeatherQuery ? 'SIM' : 'N√ÉO'}`);
                console.log(`   ‚úÖ Requires weather data: ${analysis.requires_weather_data}`);

                // Verificar se foi classificada corretamente (N√ÉO sobre clima)
                if (!isWeatherQuery && analysis.requires_weather_data === false) {
                    console.log(`   ‚úÖ CLASSIFICA√á√ÉO CORRETA`);
                    correctClassifications++;
                } else {
                    console.log(`   ‚ùå CLASSIFICA√á√ÉO INCORRETA - deveria ser N√ÉO-clim√°tica`);
                }
            } else {
                console.log(`   ‚ùå An√°lise falhou`);
            }

        } catch (error) {
            console.log(`   ‚ùå Erro: ${error.message}`);
        }
    }

    console.log('\n' + '‚ïê'.repeat(60));
    console.log('üìä RESULTADOS DA CLASSIFICA√á√ÉO:');
    console.log(`‚úÖ Corretas: ${correctClassifications}/${totalQuestions}`);
    console.log(`üìà Taxa de sucesso: ${Math.round((correctClassifications / totalQuestions) * 100)}%`);

    if (correctClassifications === totalQuestions) {
        console.log('üéâ PERFEITO! Todas as perguntas de identidade foram classificadas corretamente!');
    } else {
        console.log('‚ö†Ô∏è Algumas perguntas ainda est√£o sendo mal classificadas.');
        console.log('üîß √â necess√°rio ajustar o prompt de an√°lise.');
    }

    // Testar uma pergunta espec√≠fica que estava falhando
    console.log('\nüéØ TESTE ESPEC√çFICO: "Que voc√™ √©?"');
    console.log('‚ïê'.repeat(40));

    try {
        const specificTest = await openaiService.analyzeMessage("Que voc√™ √©?", {
            preferredCity: 'Beira',
            queryCount: 0
        });

        if (specificTest.success) {
            const analysis = specificTest.analysis;
            const isWeatherQuery = openaiService.isWeatherRelatedQuery(analysis);

            console.log(`Intent: ${analysis.intent}`);
            console.log(`Confidence: ${analysis.confidence}`);
            console.log(`Reasoning: ${analysis.reasoning}`);
            console.log(`√â sobre clima: ${isWeatherQuery ? 'SIM' : 'N√ÉO'}`);
            console.log(`Requires weather data: ${analysis.requires_weather_data}`);

            if (!isWeatherQuery) {
                console.log('‚úÖ AGORA EST√Å CORRETO! Vai usar resposta amig√°vel da Joana Bot.');

                // Testar a resposta amig√°vel
                const friendlyResponse = await openaiService.generateFriendlyMozambicanResponse(
                    "Que voc√™ √©?",
                    analysis,
                    { queryCount: 0, expertiseLevel: 'basic' }
                );

                if (friendlyResponse.success) {
                    console.log('\nüìù RESPOSTA DA JOANA BOT:');
                    console.log('‚ñ¨'.repeat(50));
                    console.log(friendlyResponse.message);
                    console.log('‚ñ¨'.repeat(50));
                }
            } else {
                console.log('‚ùå AINDA EST√Å INCORRETO! Ainda classifica como clima.');
            }
        }

    } catch (error) {
        console.error('‚ùå Erro no teste espec√≠fico:', error.message);
    }

    console.log('\nüéØ TESTE DE CLASSIFICA√á√ÉO DE IDENTIDADE CONCLU√çDO!');
}

// Executar o teste
testIdentityClassification().catch(console.error);
