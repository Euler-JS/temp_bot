// index.js - Vers√£o com Supabase
require('dotenv').config();
const express = require("express");
const bodyParser = require("body-parser");
const WhatsAppApi = require("./whatsapp_api/connection");
const WeatherService = require("./weather_api/weather_service");
const OPENAI = require("./open_ai/open_ai");
const SupabaseService = require("./database/supabase");

const app = express();
const port = process.env.PORT || 3000;

app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.json());

// WHATSAPP API Configuration
const token = process.env.WHATSAPP_TOKEN || "";
const phoneNumberID = process.env.PHONE_NUMBER_ID || "";

// Inicializar servi√ßos
const whatsappApi = new WhatsAppApi(token, phoneNumberID);
const weatherService = new WeatherService();
const openaiService = new OPENAI(process.env.OPEN_AI || "");
const dbService = new SupabaseService();

// ===============================================
// GEST√ÉO AVAN√áADA DE USU√ÅRIOS COM SUPABASE
// ===============================================

async function getUserByContact(contact) {
  return await dbService.getUserByContact(contact);
}

async function saveOrUpdateAdvancedUser(contact, updates = {}) {
  return await dbService.saveOrUpdateAdvancedUser(contact, updates);
}

async function saveConversationContext(contact, message, analysis, response) {
  return await dbService.saveConversationContext(contact, message, analysis, response);
}

async function saveAdvancedWeatherHistory(contact, weatherData, analysis) {
  return await dbService.saveAdvancedWeatherHistory(contact, weatherData, analysis);
}

// ===============================================
// WEBHOOK ROUTES (Mantidos)
// ===============================================

app.get("/webhook", async (req, res) => {
  console.log("Estabelecendo conex√£o com o Webhook! ");
  let mode = req.query["hub.mode"];
  let challenge = req.query["hub.challenge"];
  let token = req.query["hub.verify_token"];
  const mytoken = "TEMPBOT2024";

  if (mode && token) {
    if (mode === "subscribe" && token === mytoken) {
      console.log("Conex√£o estabelecida com sucesso!")
      res.status(200).send(challenge);
    } else {
      console.log("Erro ao estabelecer conex√£o!")
      res.status(403).send();
    }
  }
});

app.post("/webhook", async (req, res) => {
  const body = req.body;

  if (body.object === "whatsapp_business_account") {
    const entry = body.entry[0];
    const change = entry.changes[0];

    if (change.field === "messages" && change?.value?.messages?.length > 0) {
      const message = change.value.messages[0];
      const phoneNumber = message.from;

      console.log("üì± Mensagem recebida:", message);

      // Processar diferentes tipos de mensagem
      if (message?.type === "text") {
        await processAdvancedTextMessage(message.text.body, phoneNumber);
      } else if (message?.type === "interactive") {
        await processAdvancedInteractiveMessage(message.interactive, phoneNumber);
      } else if (message?.type === "location") {
        await processLocationMessage(message.location, phoneNumber);
      }
    }
  }

  res.sendStatus(200);
});

// ===============================================
// PROCESSAMENTO AVAN√áADO DE MENSAGENS
// ===============================================

async function processAdvancedTextMessage(messageText, phoneNumber, enableAutoDetection = true) {
  const user = await getUserByContact(phoneNumber);

  try {
    console.log(`üß† Processamento avan√ßado: "${messageText}"`);

    // Verificar comandos especiais primeiro
    if (messageText.toLowerCase().startsWith('/sugestoes') ||
      messageText.toLowerCase().startsWith('/sugest√µes') ||
      messageText.toLowerCase() === 'sugestoes' ||
      messageText.toLowerCase() === 'sugest√µes') {
      return await handleSuggestionsCommand(phoneNumber, user);
    }

    // Novo comando para conselhos por bairro
    if (messageText.toLowerCase().startsWith('/conselhos') ||
      messageText.toLowerCase() === 'conselhos') {
      return await handleNeighborhoodMenuCommand(phoneNumber, user);
    }

    // 1. An√°lise completa com IA
    const analysisResult = await openaiService.analyzeUserMessage(messageText, {
      preferredCity: user?.preferred_city,
      language: user?.language || 'pt',
      queryCount: user?.query_count || 0,
      expertiseLevel: user?.expertise_level || 'basic',
      conversationHistory: user?.conversation_history || [],
      lastCity: user?.last_city,
      weatherPreferences: user?.weather_preferences
    });

    if (!analysisResult.success) {
      console.log('‚ùå An√°lise falhou, usando fallback b√°sico');
      return await processBasicFallback(messageText, phoneNumber);
    }

    const analysis = analysisResult.analysis;
    console.log(`üìä An√°lise completa:`, JSON.stringify(analysis, null, 2));

    // 2. Roteamento inteligente (com controle de detec√ß√£o autom√°tica de bairros)
    const response = await routeAdvancedRequest(analysis, messageText, phoneNumber, user, enableAutoDetection);

    // 3. Salvar contexto da conversa
    await saveConversationContext(phoneNumber, messageText, analysis, response);

    // 4. Enviar sugest√µes inteligentes se apropriado
    if (analysis.suggestions && analysis.suggestions.length > 0) {
      await sendIntelligentSuggestions(phoneNumber, analysis.suggestions, analysis.city);
    }

  } catch (error) {
    console.error('üö® Erro no processamento avan√ßado:', error);
    await processBasicFallback(messageText, phoneNumber);
  }
}

async function routeAdvancedRequest(analysis, originalMessage, phoneNumber, user, enableAutoNeighborhoodDetection = false) {
  const { type, action, intent } = analysis;

  console.log(`üéØ Roteamento avan√ßado: type=${type}, action=${action}`);

  // SEMPRE detectar bairros quando a mensagem cont√©m "conselhos para" 
  const neighborhood = detectNeighborhood(originalMessage);
  if (neighborhood && (originalMessage.toLowerCase().includes('conselho') || 
                       originalMessage.toLowerCase().includes('dica'))) {
    console.log(`üèòÔ∏è Detectado bairro: ${neighborhood} - For√ßando rota de conselhos por bairro`);
    return await handleNeighborhoodAdvice({ ...analysis, neighborhood }, phoneNumber, user);
  }

  // Detectar se h√° men√ß√£o de bairros da Beira para outros casos
  if (enableAutoNeighborhoodDetection && neighborhood) {
    if (originalMessage.toLowerCase().includes('chuva') ||
        originalMessage.toLowerCase().includes('calor') ||
        originalMessage.toLowerCase().includes('frio') ||
        type === 'weather_data') {
      console.log(`üèòÔ∏è Detectado bairro automaticamente: ${neighborhood}`);
      return await handleNeighborhoodAdvice({ ...analysis, neighborhood }, phoneNumber, user);
    }
  }

  switch (type) {
    case 'weather_data':
      return await handleAdvancedWeatherData(analysis, phoneNumber, user);

    case 'weather_education':
      return await handleAdvancedEducation(analysis, originalMessage, phoneNumber, user);

    case 'comparison':
      return await handleCityComparison(analysis, phoneNumber, user);

    case 'practical_tips':
      return await handlePracticalTips(analysis, phoneNumber, user);

    case 'neighborhood_advice':
      return await handleNeighborhoodAdvice(analysis, phoneNumber, user);

    case 'reminder':
      return await handleReminderRequest(analysis, phoneNumber, user);

    case 'off_topic':
      return await handleOffTopicAdvanced(analysis, phoneNumber, user);

    default:
      console.log(`‚ö†Ô∏è Tipo desconhecido: ${type}`);
      return await sendAdvancedHelp(phoneNumber, user);
  }
}

// ===============================================
// HANDLERS AVAN√áADOS
// ===============================================

async function handleSuggestionsCommand(phoneNumber, user) {
  try {
    console.log(`üí° Comando /sugestoes acionado para ${phoneNumber}`);

    await whatsappApi.enviarMensagemCarregamento(phoneNumber, 'Gerando sugest√µes inteligentes baseadas no seu perfil');

    // Criar contexto para as sugest√µes baseado no usu√°rio
    const userContext = {
      preferredCity: user?.preferred_city || user?.last_city,
      lastCity: user?.last_city,
      queryCount: user?.query_count || 0,
      expertiseLevel: user?.expertise_level || 'basic',
      conversationHistory: user?.conversation_history || [],
      weatherPreferences: user?.weather_preferences
    };

    // Simular uma an√°lise b√°sica para gerar sugest√µes contextuais
    const mockAnalysis = {
      type: 'suggestions_request',
      city: userContext.preferredCity || 'Maputo',
      intent: 'gerar_sugestoes_inteligentes',
      action: 'show_smart_suggestions',
      expertiseLevel: userContext.expertiseLevel,
      context: {
        isCommand: true,
        timeframe: 'hoje',
        complexity: userContext.expertiseLevel,
        weatherAspect: 'geral'
      }
    };

    // Buscar dados meteorol√≥gicos da cidade preferida para contexto
    let weatherData = null;
    if (userContext.preferredCity) {
      try {
        weatherData = await weatherService.getCurrentWeather(
          userContext.preferredCity,
          user?.units || 'celsius'
        );
      } catch (error) {
        console.log('‚ö†Ô∏è Erro ao buscar dados meteorol√≥gicos para sugest√µes:', error.message);
      }
    }

    // Se n√£o temos dados meteorol√≥gicos, criar dados mock para as sugest√µes
    if (!weatherData) {
      weatherData = {
        city: userContext.preferredCity || 'Maputo',
        temperature: 25,
        description: 'Tempo agrad√°vel',
        humidity: 60,
        units: '¬∞C',
        isForecast: false
      };
    }

    // Gerar sugest√µes inteligentes usando a IA
    const suggestions = await openaiService.generateIntelligentSuggestions(
      mockAnalysis,
      weatherData,
      userContext
    );

    // Criar mensagem personalizada baseada no perfil do usu√°rio
    let suggestionsMessage = `üí° *Sugest√µes Inteligentes Personalizadas*\n\n`;

    suggestionsMessage += `üë§ *Seu Perfil:*\n`;
    suggestionsMessage += `‚Ä¢ N√≠vel: ${userContext.expertiseLevel.toUpperCase()}\n`;
    suggestionsMessage += `‚Ä¢ Consultas: ${userContext.queryCount} realizadas\n`;

    if (userContext.preferredCity) {
      suggestionsMessage += `‚Ä¢ Cidade atual: ${userContext.preferredCity}\n`;
      if (weatherData && !weatherData.error) {
        suggestionsMessage += `‚Ä¢ Temperatura: ${weatherData.temperature}${weatherData.units}\n`;
      }
    }

    suggestionsMessage += `\nüéØ *Sugest√µes Baseadas no Seu Uso:*\n`;

    if (suggestions && suggestions.length > 0) {
      suggestions.forEach((suggestion, index) => {
        suggestionsMessage += `${index + 1}. ${suggestion}\n`;
      });
    } else {
      // Sugest√µes de fallback baseadas no n√≠vel do usu√°rio
      if (userContext.expertiseLevel === 'basic') {
        suggestionsMessage += `1. Clima hoje\n`;
        suggestionsMessage += `2. Tempo amanh√£\n`;
        suggestionsMessage += `3. Que roupa usar\n`;
      } else if (userContext.expertiseLevel === 'intermediate') {
        suggestionsMessage += `1. Previs√£o 7 dias\n`;
        suggestionsMessage += `2. Comparar cidades\n`;
        suggestionsMessage += `3. Dicas atividades\n`;
      } else {
        suggestionsMessage += `1. An√°lise t√©cnica\n`;
        suggestionsMessage += `2. Alertas avan√ßados\n`;
        suggestionsMessage += `3. Dados hist√≥ricos\n`;
      }
    }

    suggestionsMessage += `\nüí¨ *Como usar:* Digite qualquer uma das sugest√µes acima ou seus pr√≥prios comandos.\n`;
    suggestionsMessage += `\nüîÑ *Dica:* Suas sugest√µes se adaptam ao seu uso. Quanto mais usar, mais personalizadas ficam!`;

    await whatsappApi.enviarMensagemUsandoWhatsappAPI(suggestionsMessage, phoneNumber);

    // Enviar bot√µes interativos com as sugest√µes se dispon√≠veis
    if (suggestions && suggestions.length > 0) {
      await sendInteractiveSuggestionButtons(phoneNumber, suggestions, userContext);
    }

    // Atualizar contador de consultas
    await saveOrUpdateAdvancedUser(phoneNumber, {
      query_count: (userContext.queryCount || 0) + 1,
      last_command: '/sugestoes'
    });

    return suggestionsMessage;

  } catch (error) {
    console.error('‚ùå Erro ao processar comando /sugestoes:', error);
    await whatsappApi.enviarMensagemUsandoWhatsappAPI(
      "‚ùå N√£o consegui gerar sugest√µes no momento. Tente novamente em alguns segundos.\n\nüí° Voc√™ pode sempre perguntar diretamente: \"Como est√° o clima?\"",
      phoneNumber
    );
    return null;
  }
}

async function sendInteractiveSuggestionButtons(phoneNumber, suggestions, userContext) {
  try {
    console.log('üéØ Tentando enviar sugest√µes interativas para:', phoneNumber);
    console.log('üìù Sugest√µes recebidas:', suggestions);

    // Primeiro, enviar como mensagem de texto simples
    const simpleMessage = `üéØ *Sugest√µes Personalizadas*\n\n` +
      suggestions.slice(0, 3).map((suggestion, index) => `${index + 1}. ${suggestion}`).join('\n') +
      `\n\nüí° *Como usar:* Digite o n√∫mero da sugest√£o ou a pergunta diretamente.\n` +
      `üìù Exemplo: Digite "1" para a primeira sugest√£o.`;

    await whatsappApi.enviarMensagemUsandoWhatsappAPI(simpleMessage, phoneNumber);
    console.log('‚úÖ Sugest√µes enviadas como texto simples');

    // Tentar bot√µes muito simples depois de um delay
    setTimeout(async () => {
      try {
        console.log('üîò Tentando enviar bot√µes simples...');

        const simpleButtons = {
          messaging_product: 'whatsapp',
          recipient_type: "individual",
          to: phoneNumber,
          type: "interactive",
          interactive: {
            type: "button",
            body: {
              text: "Escolha uma op√ß√£o r√°pida:"
            },
            action: {
              buttons: [
                {
                  type: "reply",
                  reply: {
                    id: "opcao_1",
                    title: "Clima hoje"
                  }
                },
                {
                  type: "reply",
                  reply: {
                    id: "opcao_2",
                    title: "Previs√£o"
                  }
                },
                {
                  type: "reply",
                  reply: {
                    id: "opcao_3",
                    title: "Ajuda"
                  }
                }
              ]
            }
          }
        };

        const response = await whatsappApi.enviarMensagemInterativaUsandoWhatsappAPI(simpleButtons);
        console.log('‚úÖ Bot√µes simples enviados com sucesso:', response);

      } catch (buttonError) {
        console.error('‚ùå Erro ao enviar bot√µes simples:');
        console.error('üìÑ Response data:', buttonError.response?.data);
        console.error('üìä Status:', buttonError.response?.status);
        console.error('üîß Config:', buttonError.config?.data);

        // Fallback: enviar as op√ß√µes como texto
        const fallbackMessage = `\nüîò *Op√ß√µes r√°pidas dispon√≠veis:*\n` +
          `‚Ä¢ Digite "clima hoje" para o tempo atual\n` +
          `‚Ä¢ Digite "previs√£o" para previs√£o do tempo\n` +
          `‚Ä¢ Digite "ajuda" para mais op√ß√µes`;

        await whatsappApi.enviarMensagemUsandoWhatsappAPI(fallbackMessage, phoneNumber);
      }
    }, 3000);

  } catch (error) {
    console.error('‚ùå Erro geral ao enviar sugest√µes:', error);
  }
}

async function handleNeighborhoodMenuCommand(phoneNumber, user) {
  try {
    console.log(`üèòÔ∏è Comando /conselhos acionado para ${phoneNumber}`);

    await whatsappApi.enviarMensagemCarregamento(phoneNumber, 'Preparando menu de conselhos por bairro');

    // Buscar dados meteorol√≥gicos da Beira para contexto
    let weatherData = null;
    try {
      weatherData = await weatherService.getCurrentWeather('Beira', user?.units || 'celsius');
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao buscar dados meteorol√≥gicos da Beira:', error.message);
    }

    // Criar mensagem contextual baseada no clima atual
    let conselhosMessage = `üèòÔ∏è *Conselhos por Bairro - Beira*\n\n`;

    if (weatherData && !weatherData.error) {
      conselhosMessage += `üå§Ô∏è *Condi√ß√µes atuais em Beira:*\n`;
      conselhosMessage += `üå°Ô∏è Temperatura: ${weatherData.temperature}¬∞C\n`;
      conselhosMessage += `üíß Umidade: ${weatherData.humidity}%\n`;
      conselhosMessage += `üìù ${weatherData.description}\n\n`;
    }

    conselhosMessage += `üí° *Escolha um bairro para receber conselhos espec√≠ficos baseados no clima atual:*\n\n`;

    conselhosMessage += `üìç *Bairros dispon√≠veis:*\n`;
    conselhosMessage += `‚Ä¢ Mac√∫ti - Zona costeira e tur√≠stica\n`;
    conselhosMessage += `‚Ä¢ Manga - Centro comercial\n`;
    conselhosMessage += `‚Ä¢ Goto - Zona residencial\n`;
    conselhosMessage += `‚Ä¢ Munhava - Bairro populoso\n`;
    conselhosMessage += `‚Ä¢ Chaimite - Grande bairro residencial\n`;
    conselhosMessage += `‚Ä¢ Ndunda - Zona em expans√£o\n`;
    conselhosMessage += `‚Ä¢ Cidade de Cimento - Centro hist√≥rico\n`;
    conselhosMessage += `‚Ä¢ Palmeiras - Zona mista\n\n`;

    if (weatherData && !weatherData.error) {
      const temp = parseInt(weatherData.temperature);
      const isRaining = weatherData.description.toLowerCase().includes('chuva');

      if (isRaining) {
        conselhosMessage += `‚ö†Ô∏è *Aten√ß√£o:* Est√° chovendo! Alguns bairros podem ter riscos espec√≠ficos.\n`;
      } else if (temp > 30) {
        conselhosMessage += `üî• *Aten√ß√£o:* Calor intenso! Cuidados especiais recomendados.\n`;
      } else if (temp < 20) {
        conselhosMessage += `üßä *Aten√ß√£o:* Tempo fresco! Vista-se adequadamente.\n`;
      }
    }

    conselhosMessage += `\nüí¨ *Como usar:*\n`;
    conselhosMessage += `Digite: "conselhos para [bairro]"\n`;
    conselhosMessage += `Exemplo: "conselhos para Mac√∫ti"\n\n`;
    conselhosMessage += `ÔøΩ *Bairros dispon√≠veis:*\n`;
    conselhosMessage += `‚Ä¢ Mac√∫ti, Manga, Goto, Munhava\n`;
    conselhosMessage += `‚Ä¢ Chaimite, Ndunda, Palmeiras\n`;
    conselhosMessage += `‚Ä¢ Cidade de Cimento, Ponta-G√™a`;

    await whatsappApi.enviarMensagemUsandoWhatsappAPI(conselhosMessage, phoneNumber);

    // Enviar mensagem interativa com bairros dispon√≠veis
    await sendNeighborhoodSelectionButtons(phoneNumber);

    // Atualizar contador de consultas
    await saveOrUpdateAdvancedUser(phoneNumber, {
      query_count: (user?.query_count || 0) + 1,
      last_command: '/conselhos'
    });

    return conselhosMessage;

  } catch (error) {
    console.error('‚ùå Erro ao processar comando /conselhos:', error);
    await whatsappApi.enviarMensagemUsandoWhatsappAPI(
      "‚ùå N√£o consegui carregar o menu de conselhos no momento. Tente novamente.\n\nüí° Voc√™ pode sempre perguntar diretamente: \"conselhos para [bairro]\"",
      phoneNumber
    );
    return null;
  }
}

async function sendNeighborhoodSelectionButtons(phoneNumber) {
  try {
    // Aguardar um pouco para n√£o sobrepor com a mensagem anterior
    setTimeout(async () => {
      const neighborhoodButtons = {
        messaging_product: 'whatsapp',
        recipient_type: "individual",
        to: phoneNumber,
        type: "interactive",
        interactive: {
          type: "button",
          header: {
            type: "text",
            text: "üèòÔ∏è Escolha um Bairro"
          },
          body: {
            text: "Selecione um bairro da Beira para receber conselhos espec√≠ficos:"
          },
          action: {
            buttons: [
              {
                type: "reply",
                reply: {
                  id: "bairro_macuti",
                  title: "Mac√∫ti"
                }
              },
              {
                type: "reply",
                reply: {
                  id: "bairro_manga", 
                  title: "Manga"
                }
              },
              {
                type: "reply",
                reply: {
                  id: "bairro_goto",
                  title: "Goto"
                }
              }
            ]
          }
        }
      };

      await whatsappApi.enviarMensagemInterativaUsandoWhatsappAPI(neighborhoodButtons);
      console.log('‚úÖ Bot√µes de bairros enviados');

      // Enviar segundo conjunto de bot√µes ap√≥s um delay
      setTimeout(async () => {
        const neighborhoodButtons2 = {
          messaging_product: 'whatsapp',
          recipient_type: "individual",
          to: phoneNumber,
          type: "interactive",
          interactive: {
            type: "button",
            body: {
              text: "Ou escolha um destes bairros:"
            },
            action: {
              buttons: [
                {
                  type: "reply",
                  reply: {
                    id: "bairro_munhava",
                    title: "Munhava"
                  }
                },
                {
                  type: "reply",
                  reply: {
                    id: "bairro_chaimite",
                    title: "Chaimite"
                  }
                },
                {
                  type: "reply",
                  reply: {
                    id: "bairro_ndunda",
                    title: "Ndunda"
                  }
                }
              ]
            }
          }
        };

        await whatsappApi.enviarMensagemInterativaUsandoWhatsappAPI(neighborhoodButtons2);
        console.log('‚úÖ Segundo conjunto de bot√µes de bairros enviado');
      }, 2000);

    }, 1500);

  } catch (error) {
    console.error('‚ùå Erro ao enviar bot√µes de bairros:', error);
  }
}

async function handleAdvancedWeatherData(analysis, phoneNumber, user) {
  try {
    const { city, action, context, intent } = analysis;
    let targetCity = city || user?.preferred_city;

    if (!targetCity) {
      await whatsappApi.enviarMensagemUsandoWhatsappAPI(
        "üèôÔ∏è Para consultar o clima, preciso saber a cidade. Qual cidade te interessa?",
        phoneNumber
      );
      return null;
    }

    // Verificar se √© uma previs√£o de 7 dias
    if (context?.timeframe === 'semana' || intent === 'previsao_7_dias' ||
      analysis.originalMessage?.toLowerCase().includes('7 dias') ||
      analysis.originalMessage?.toLowerCase().includes('semanal')) {
      return await handleWeeklyForecast(targetCity, phoneNumber, user);
    }

    // Mensagem de loading contextual
    const loadingMsg = getContextualLoadingMessage(context, targetCity);
    await whatsappApi.enviarMensagemUsandoWhatsappAPI(loadingMsg, phoneNumber);

    // Buscar dados meteorol√≥gicos baseado no timeframe
    let weatherData;
    const timeframe = context?.timeframe;

    if (timeframe === 'amanha') {
      // Buscar previs√£o para amanh√£
      const forecast = await weatherService.getWeatherForecast(targetCity, 2);
      if (forecast && forecast.length > 1) {
        const tomorrowData = forecast[1]; // √çndice 1 = amanh√£
        weatherData = {
          city: targetCity,
          temperature: Math.round((tomorrowData.maxTemp + tomorrowData.minTemp) / 2),
          maxTemp: tomorrowData.maxTemp,
          minTemp: tomorrowData.minTemp,
          description: tomorrowData.description,
          icon: tomorrowData.icon,
          units: user?.units === 'fahrenheit' ? '¬∞F' : '¬∞C',
          date: tomorrowData.date,
          isForecast: true,
          source: 'Forecast'
        };
      } else {
        throw new Error('N√£o foi poss√≠vel obter a previs√£o para amanh√£');
      }
    } else {
      // Buscar dados atuais
      weatherData = await weatherService.getCurrentWeather(
        targetCity,
        user?.units || 'celsius'
      );
    }

    // Gerar resposta contextual com IA
    const contextualResponse = await openaiService.generateContextualResponse(
      analysis,
      weatherData,
      {
        ...user,
        conversationHistory: user?.conversation_history || []
      }
    );

    let finalMessage;
    if (contextualResponse.success) {
      finalMessage = `üå§Ô∏è *${weatherData.city}*\n\n${contextualResponse.response}`;
    } else {
      // Fallback simples
      finalMessage = createSimpleWeatherMessage(weatherData);
    }

    await whatsappApi.enviarMensagemUsandoWhatsappAPI(finalMessage, phoneNumber);

    // Salvar hist√≥rico meteorol√≥gico
    await saveAdvancedWeatherHistory(phoneNumber, weatherData, analysis);

    // Atualizar usu√°rio
    await saveOrUpdateAdvancedUser(phoneNumber, {
      last_city: targetCity,
      preferred_city: user?.preferred_city || targetCity
    });

    return finalMessage;

  } catch (error) {
    console.error('‚ùå Erro em dados meteorol√≥gicos avan√ßados:', error);
    await whatsappApi.enviarMensagemErro(
      phoneNumber,
      "N√£o consegui obter dados meteorol√≥gicos",
      "Tente novamente ou verifique o nome da cidade"
    );
    return null;
  }
}

async function handleAdvancedEducation(analysis, originalMessage, phoneNumber, user) {
  try {
    const { expertiseLevel, context } = analysis;

    await whatsappApi.enviarMensagemCarregamento(phoneNumber, 'Preparando explica√ß√£o personalizada');

    // Prompt educativo adaptado ao n√≠vel do usu√°rio
    const educationPrompt = `
Pergunta: "${originalMessage}"
N√≠vel do usu√°rio: ${expertiseLevel}
Contexto: ${JSON.stringify(context)}
Hist√≥rico: ${user?.conversation_history?.length || 0} consultas anteriores

Crie uma explica√ß√£o meteorol√≥gica adequada para este n√≠vel:

${expertiseLevel === 'basic' ?
        'B√ÅSICO: Use linguagem muito simples, analogias do cotidiano, evite termos t√©cnicos.' :
        expertiseLevel === 'intermediate' ?
          'INTERMEDI√ÅRIO: Equilibre simplicidade com algum conte√∫do t√©cnico educativo.' :
          'AVAN√áADO: Use terminologia meteorol√≥gica, seja preciso e detalhado.'
      }

Incluir:
1. Resposta direta √† pergunta
2. Contexto pr√°tico para Mo√ßambique
3. ${expertiseLevel === 'basic' ? 'Exemplo simples' : expertiseLevel === 'intermediate' ? 'Dica adicional' : 'Informa√ß√£o t√©cnica relevante'}

M√°ximo ${expertiseLevel === 'basic' ? '200' : expertiseLevel === 'intermediate' ? '300' : '400'} palavras:
    `;

    const educationResponse = await openaiService.callOpenAI(educationPrompt, 0.7);

    const finalMessage = `üéì *Explica√ß√£o ${expertiseLevel === 'basic' ? 'Simples' : expertiseLevel === 'intermediate' ? 'Detalhada' : 'T√©cnica'}*\n\n${educationResponse}\n\nüí° Quer saber mais sobre meteorologia? √â s√≥ perguntar!`;

    await whatsappApi.enviarMensagemUsandoWhatsappAPI(finalMessage, phoneNumber);

    return finalMessage;

  } catch (error) {
    console.error('‚ùå Erro em educa√ß√£o avan√ßada:', error);
    await whatsappApi.enviarMensagemUsandoWhatsappAPI(
      "üìö Desculpe, n√£o consegui preparar a explica√ß√£o no momento. Tente reformular sua pergunta.",
      phoneNumber
    );
    return null;
  }
}

async function handleWeeklyForecast(city, phoneNumber, user) {
  try {
    await whatsappApi.enviarMensagemUsandoWhatsappAPI(
      `üìÖ Buscando previs√£o completa de 7 dias para ${city}...`,
      phoneNumber
    );

    // Buscar previs√£o de 7 dias
    const forecast = await weatherService.getWeatherForecast(city, 7);

    if (!forecast || forecast.length === 0) {
      throw new Error('N√£o foi poss√≠vel obter a previs√£o de 7 dias');
    }

    // Gerar resposta baseada no n√≠vel do usu√°rio
    const expertiseLevel = user?.expertise_level || 'basic';
    let message = `üìÖ *Previs√£o de 7 dias - ${city}*\n\n`;

    if (expertiseLevel === 'basic') {
      // Vers√£o simples
      forecast.forEach((day, index) => {
        const dayName = index === 0 ? 'Hoje' :
          index === 1 ? 'Amanh√£' :
            `${new Date(day.date).toLocaleDateString('pt-BR', { weekday: 'short' })}`;

        message += `${dayName}: ${day.minTemp}¬∞C - ${day.maxTemp}¬∞C, ${day.description}\n`;
      });
    } else {
      // Vers√£o mais detalhada
      forecast.forEach((day, index) => {
        const dayName = index === 0 ? 'Hoje' :
          index === 1 ? 'Amanh√£' :
            new Date(day.date).toLocaleDateString('pt-BR', { weekday: 'long', day: 'numeric' });

        message += `üìä *${dayName}*\n`;
        message += `üå°Ô∏è ${day.minTemp}¬∞C - ${day.maxTemp}¬∞C\n`;
        message += `‚òÄÔ∏è ${day.description}\n\n`;
      });
    }

    message += `\nüí° *Dica:* Para informa√ß√µes mais detalhadas de um dia espec√≠fico, pergunte "Como estar√° amanh√£?" ou "Tempo em [data]"`;

    await whatsappApi.enviarMensagemUsandoWhatsappAPI(message, phoneNumber);

    // Salvar no hist√≥rico
    await saveOrUpdateAdvancedUser(phoneNumber, {
      last_city: city,
      query_count: (user?.query_count || 0) + 1
    });

    return message;

  } catch (error) {
    console.error('‚ùå Erro na previs√£o de 7 dias:', error);
    await whatsappApi.enviarMensagemUsandoWhatsappAPI(
      `‚ùå N√£o consegui obter a previs√£o de 7 dias para ${city}. Tente novamente em alguns minutos.`,
      phoneNumber
    );
    return null;
  }
}

async function handlePracticalTips(analysis, phoneNumber, user) {
  try {
    const { city, context, originalMessage } = analysis;
    const targetCity = city || user?.preferred_city || user?.last_city;

    if (!targetCity) {
      await whatsappApi.enviarMensagemUsandoWhatsappAPI(
        "üèôÔ∏è Para dar dicas espec√≠ficas, preciso saber a cidade. Qual cidade te interessa?",
        phoneNumber
      );
      return null;
    }

    // Buscar dados atuais do clima
    const weatherData = await weatherService.getCurrentWeather(targetCity, user?.units || 'celsius');

    let tipMessage = `üí° *Dicas para ${targetCity}*\n\n`;

    // Identificar que tipo de dica foi solicitada
    const message = originalMessage?.toLowerCase() || '';

    if (message.includes('roupa') || message.includes('vestir')) {
      tipMessage += generateClothingTips(weatherData);
    } else if (message.includes('calor') || message.includes('frio')) {
      tipMessage += generateTemperatureTips(weatherData);
    } else if (message.includes('chuva') || message.includes('guarda-chuva')) {
      tipMessage += generateRainTips(weatherData);
    } else if (message.includes('atividade') || message.includes('exerc')) {
      tipMessage += generateActivityTips(weatherData);
    } else {
      // Dicas gerais baseadas no clima atual
      tipMessage += generateGeneralTips(weatherData);
    }

    await whatsappApi.enviarMensagemUsandoWhatsappAPI(tipMessage, phoneNumber);

    // Salvar no hist√≥rico
    await saveOrUpdateAdvancedUser(phoneNumber, {
      last_city: targetCity,
      query_count: (user?.query_count || 0) + 1
    });

    return tipMessage;

  } catch (error) {
    console.error('‚ùå Erro ao gerar dicas pr√°ticas:', error);
    await whatsappApi.enviarMensagemUsandoWhatsappAPI(
      "‚ùå N√£o consegui gerar dicas no momento. Tente novamente em alguns minutos.",
      phoneNumber
    );
    return null;
  }
}

async function handleCityComparison(analysis, phoneNumber, user) {
  try {
    const { city, context } = analysis;

    // Extrair cidades para comparar
    const cities = extractCitiesForComparison(analysis, user);

    if (cities.length < 2) {
      const suggestedCity = user?.last_city || 'Beira';
      await whatsappApi.enviarMensagemUsandoWhatsappAPI(
        `üîÑ Para comparar, preciso de duas cidades.\n\nVoc√™ mencionou: ${city || 'nenhuma'}\n\nQuer comparar com ${suggestedCity}? Ou me diga outra cidade.`,
        phoneNumber
      );
      return null;
    }

    await whatsappApi.enviarMensagemCarregamento(phoneNumber, 'Comparando clima das cidades');

    // Buscar dados das duas cidades
    const [weather1, weather2] = await Promise.all([
      weatherService.getCurrentWeather(cities[0], user?.units || 'celsius'),
      weatherService.getCurrentWeather(cities[1], user?.units || 'celsius')
    ]);

    // Gerar compara√ß√£o inteligente
    const comparisonPrompt = `
Compare o clima atual entre estas duas cidades:

CIDADE 1 - ${weather1.city}:
- Temperatura: ${weather1.temperature}¬∞C
- Sensa√ß√£o: ${weather1.feelsLike}¬∞C
- Umidade: ${weather1.humidity}%
- Condi√ß√µes: ${weather1.description}

CIDADE 2 - ${weather2.city}:
- Temperatura: ${weather2.temperature}¬∞C
- Sensa√ß√£o: ${weather2.feelsLike}¬∞C
- Umidade: ${weather2.humidity}%
- Condi√ß√µes: ${weather2.description}

Crie uma compara√ß√£o √∫til que destaque:
1. Principais diferen√ßas
2. Qual est√° melhor para atividades
3. Recomenda√ß√µes pr√°ticas
4. Formato de f√°cil leitura

Compara√ß√£o concisa:
    `;

    const comparison = await openaiService.callOpenAI(comparisonPrompt, 0.6);

    const finalMessage = `‚öñÔ∏è *Compara√ß√£o Clim√°tica*\n\n${comparison}`;

    await whatsappApi.enviarMensagemUsandoWhatsappAPI(finalMessage, phoneNumber);

    return finalMessage;

  } catch (error) {
    console.error('‚ùå Erro na compara√ß√£o:', error);
    await whatsappApi.enviarMensagemErro(phoneNumber, "Erro ao comparar cidades");
    return null;
  }
}

// ===============================================
// SISTEMA DE CONSELHOS POR BAIRROS DA BEIRA
// ===============================================

async function handleNeighborhoodAdvice(analysis, phoneNumber, user) {
  try {
    const { city, context, originalMessage, neighborhood: presetNeighborhood } = analysis;

    // Usar bairro pr√©-definido (vindo de bot√£o) ou detectar automaticamente
    let neighborhood = presetNeighborhood || detectNeighborhood(originalMessage || '');

    if (!neighborhood) {
      await whatsappApi.enviarMensagemUsandoWhatsappAPI(
        "üèòÔ∏è Para dar conselhos espec√≠ficos, preciso saber o bairro da Beira.\n\nüìç *Bairros dispon√≠veis:*\n‚Ä¢ Mac√∫ti, Manga, Goto, Munhava\n‚Ä¢ Chaimite, Ndunda, Palmeiras\n‚Ä¢ Cidade de Cimento, Ponta-G√™a\n\nüí¨ Exemplo: \"conselhos para Mac√∫ti se chover\"\n\nüîß Ou use o comando \`/conselhos\` para ver o menu interativo!",
        phoneNumber
      );
      return null;
    }

    // Buscar dados meteorol√≥gicos da Beira
    const weatherData = await weatherService.getCurrentWeather('Beira', user?.units || 'celsius');

    await whatsappApi.enviarMensagemCarregamento(phoneNumber, `Analisando condi√ß√µes para o bairro ${neighborhood}`);

    // Gerar conselhos espec√≠ficos
    const advice = await generateNeighborhoodAdvice(neighborhood, weatherData, context, originalMessage || '');

    await whatsappApi.enviarMensagemUsandoWhatsappAPI(advice, phoneNumber);

    // Salvar no hist√≥rico
    await saveOrUpdateAdvancedUser(phoneNumber, {
      last_city: 'Beira',
      last_neighborhood: neighborhood,
      query_count: (user?.query_count || 0) + 1
    });

    return advice;

  } catch (error) {
    console.error('‚ùå Erro ao gerar conselhos de bairro:', error);
    await whatsappApi.enviarMensagemUsandoWhatsappAPI(
      "‚ùå N√£o consegui gerar conselhos para o bairro no momento. Tente novamente.",
      phoneNumber
    );
    return null;
  }
}

function detectNeighborhood(message) {
  const msg = message.toLowerCase();

  // Bairros da Beira com suas varia√ß√µes
  const neighborhoods = {
    'mac√∫ti': ['macuti', 'mac√∫ti', 'makuti'],
    'manga': ['manga'],
    'goto': ['goto'],
    'munhava': ['munhava'],
    'chaimite': ['chaimite'],
    'ndunda': ['ndunda'],
    'palmeiras': ['palmeiras'],
    'cidade de cimento': ['cidade de cimento', 'cimento'],
    'ponta-g√™a': ['ponta-g√™a', 'ponta gea', 'pontagea'],
    'chipangara': ['chipangara'],
    'matacuane': ['matacuane'],
    'estoril': ['estoril'],
    'praia': ['praia']
  };

  for (const [neighborhood, variations] of Object.entries(neighborhoods)) {
    if (variations.some(variation => msg.includes(variation))) {
      return neighborhood;
    }
  }

  return null;
}

async function generateNeighborhoodAdvice(neighborhood, weatherData, context, originalMessage) {
  const temp = parseInt(weatherData.temperature);
  const isRaining = weatherData.description.toLowerCase().includes('chuva');
  const humidity = weatherData.humidity;
  const feelsLike = weatherData.feelsLike ? parseInt(weatherData.feelsLike) : temp;

  let advice = `üèòÔ∏è *Conselhos para ${neighborhood.toUpperCase()}*\n`;
  advice += `üìç Cidade da Beira, Mo√ßambique\n\n`;
  
  // Informa√ß√µes clim√°ticas atuais
  advice += `üå§Ô∏è *CONDI√á√ïES ATUAIS:*\n`;
  advice += `üå°Ô∏è Temperatura: ${temp}¬∞C (sensa√ß√£o ${feelsLike}¬∞C)\n`;
  advice += `üíß Umidade: ${humidity}%\n`;
  advice += `üìù Tempo: ${weatherData.description}\n\n`;

  // Caracter√≠sticas espec√≠ficas do bairro
  advice += getNeighborhoodCharacteristics(neighborhood);

  // Riscos espec√≠ficos por bairro
  const risks = getNeighborhoodRisks(neighborhood, weatherData);
  if (risks.length > 0) {
    advice += `‚ö†Ô∏è *ALERTAS ESPEC√çFICOS:*\n`;
    risks.forEach(risk => advice += `‚Ä¢ ${risk}\n`);
    advice += `\n`;
  }

  // Recomenda√ß√µes de vestu√°rio espec√≠ficas para o bairro
  advice += generateNeighborhoodClothingAdvice(neighborhood, weatherData);

  // Conselhos espec√≠ficos por condi√ß√£o clim√°tica
  if (isRaining) {
    advice += generateRainAdvice(neighborhood, weatherData);
  } else if (temp > 30) {
    advice += generateHeatAdvice(neighborhood, weatherData);
  } else if (temp < 20) {
    advice += generateColdAdvice(neighborhood, weatherData);
  } else {
    advice += generateGeneralNeighborhoodAdvice(neighborhood, weatherData);
  }

  // Conselhos de transporte e locomo√ß√£o
  advice += generateTransportAdvice(neighborhood, weatherData);

  // Conselhos de seguran√ßa espec√≠ficos
  advice += `\nüõ°Ô∏è *SEGURAN√áA E PREVEN√á√ÉO:*\n`;
  advice += getNeighborhoodSafetyTips(neighborhood, weatherData);

  return advice;
}

function getNeighborhoodCharacteristics(neighborhood) {
  let characteristics = `üìç *CARACTER√çSTICAS DO BAIRRO:*\n`;
  
  switch (neighborhood.toLowerCase()) {
    case 'munhava':
      characteristics += `‚Ä¢ Bairro populoso e residencial\n`;
      characteristics += `‚Ä¢ Grande densidade populacional\n`;
      characteristics += `‚Ä¢ V√°rias escolas e mercados locais\n`;
      characteristics += `‚Ä¢ Sistema de drenagem em desenvolvimento\n\n`;
      break;
      
    case 'mac√∫ti':
      characteristics += `‚Ä¢ Bairro costeiro e tur√≠stico\n`;
      characteristics += `‚Ä¢ Pr√≥ximo √† praia e restaurantes\n`;
      characteristics += `‚Ä¢ Influ√™ncia direta da brisa mar√≠tima\n`;
      characteristics += `‚Ä¢ Zona de hot√©is e pousadas\n\n`;
      break;
      
    case 'manga':
      characteristics += `‚Ä¢ Centro comercial da cidade\n`;
      characteristics += `‚Ä¢ Alta concentra√ß√£o de lojas e servi√ßos\n`;
      characteristics += `‚Ä¢ Tr√¢nsito intenso durante o dia\n`;
      characteristics += `‚Ä¢ Boa infraestrutura urbana\n\n`;
      break;
      
    case 'goto':
      characteristics += `‚Ä¢ Bairro residencial em crescimento\n`;
      characteristics += `‚Ä¢ Mistura de casas tradicionais e modernas\n`;
      characteristics += `‚Ä¢ Algumas √°reas com drenagem limitada\n`;
      characteristics += `‚Ä¢ Comunidade bem estabelecida\n\n`;
      break;
      
    case 'chaimite':
      characteristics += `‚Ä¢ Um dos maiores bairros da Beira\n`;
      characteristics += `‚Ä¢ Principalmente residencial\n`;
      characteristics += `‚Ä¢ V√°rias estradas de terra\n`;
      characteristics += `‚Ä¢ Centro de atividades comunit√°rias\n\n`;
      break;
      
    case 'ndunda':
      characteristics += `‚Ä¢ Bairro em r√°pida expans√£o\n`;
      characteristics += `‚Ä¢ Muitas constru√ß√µes novas\n`;
      characteristics += `‚Ä¢ Infraestrutura em desenvolvimento\n`;
      characteristics += `‚Ä¢ Jovem popula√ß√£o urbana\n\n`;
      break;
      
    default:
      characteristics += `‚Ä¢ Bairro residencial da Beira\n`;
      characteristics += `‚Ä¢ Caracter√≠sticas t√≠picas da cidade\n`;
      characteristics += `‚Ä¢ Comunidade local ativa\n\n`;
  }
  
  return characteristics;
}

function generateNeighborhoodClothingAdvice(neighborhood, weatherData) {
  const temp = parseInt(weatherData.temperature);
  const isRaining = weatherData.description.toLowerCase().includes('chuva');
  
  let advice = `üëï *VESTU√ÅRIO RECOMENDADO:*\n`;
  
  // Conselhos baseados na temperatura
  if (temp > 30) {
    advice += `üå°Ô∏è Calor (${temp}¬∞C):\n`;
    advice += `‚Ä¢ Roupas leves e claras\n`;
    advice += `‚Ä¢ Tecidos que respiram (algod√£o)\n`;
    advice += `‚Ä¢ Chap√©u ou bon√©\n`;
    advice += `‚Ä¢ Protetor solar\n`;
  } else if (temp < 20) {
    advice += `üßä Fresco (${temp}¬∞C):\n`;
    advice += `‚Ä¢ Roupas em camadas\n`;
    advice += `‚Ä¢ Casaco leve ou sweatshirt\n`;
    advice += `‚Ä¢ Cal√ßa comprida\n`;
    advice += `‚Ä¢ Sapato fechado\n`;
  } else {
    advice += `üòä Agrad√°vel (${temp}¬∞C):\n`;
    advice += `‚Ä¢ Roupa confort√°vel\n`;
    advice += `‚Ä¢ Camiseta e cal√ßa leve\n`;
    advice += `‚Ä¢ Casaco leve para a noite\n`;
  }
  
  // Conselhos espec√≠ficos por bairro
  switch (neighborhood.toLowerCase()) {
    case 'mac√∫ti':
      if (!isRaining) {
        advice += `üèñÔ∏è Espec√≠fico para Mac√∫ti:\n`;
        advice += `‚Ä¢ Roupa de banho se for √† praia\n`;
        advice += `‚Ä¢ Chinelos para a areia\n`;
        advice += `‚Ä¢ √ìculos de sol (reflexo do mar)\n`;
      }
      break;
      
    case 'manga':
      advice += `üè™ Espec√≠fico para Manga:\n`;
      advice += `‚Ä¢ Roupa adequada para compras\n`;
      advice += `‚Ä¢ Sapato confort√°vel para caminhar\n`;
      advice += `‚Ä¢ Bolsa segura para valores\n`;
      break;
      
    case 'munhava':
    case 'goto':
    case 'chaimite':
    case 'ndunda':
      advice += `üèòÔ∏è Espec√≠fico para bairro residencial:\n`;
      advice += `‚Ä¢ Sapato adequado para ruas locais\n`;
      advice += `‚Ä¢ Roupa pr√°tica para o dia a dia\n`;
      if (isRaining) {
        advice += `‚Ä¢ Sapato fechado (evitar chinelos)\n`;
      }
      break;
  }
  
  if (isRaining) {
    advice += `‚òî Para chuva:\n`;
    advice += `‚Ä¢ Guarda-chuva ou capa de chuva\n`;
    advice += `‚Ä¢ Sapato imperme√°vel\n`;
    advice += `‚Ä¢ Evite roupas claras\n`;
  }
  
  advice += `\n`;
  return advice;
}

function generateTransportAdvice(neighborhood, weatherData) {
  const isRaining = weatherData.description.toLowerCase().includes('chuva');
  const temp = parseInt(weatherData.temperature);
  
  let advice = `üöó *TRANSPORTE E LOCOMO√á√ÉO:*\n`;
  
  switch (neighborhood.toLowerCase()) {
    case 'mac√∫ti':
      advice += `üèñÔ∏è Em Mac√∫ti:\n`;
      if (isRaining) {
        advice += `‚Ä¢ Evite caminhar na praia (ondas agitadas)\n`;
        advice += `‚Ä¢ Use transporte coberto\n`;
        advice += `‚Ä¢ Cuidado com pisos molhados em restaurantes\n`;
      } else if (temp > 32) {
        advice += `‚Ä¢ Caminhe na sombra sempre que poss√≠vel\n`;
        advice += `‚Ä¢ Evite asfalto quente\n`;
        advice += `‚Ä¢ Use transporte com ar condicionado\n`;
      } else {
        advice += `‚Ä¢ √ìtimo para caminhadas na orla\n`;
        advice += `‚Ä¢ Aproveite a brisa mar√≠tima\n`;
        advice += `‚Ä¢ Bicicleta √© uma boa op√ß√£o\n`;
      }
      break;
      
    case 'manga':
      advice += `üè™ No centro (Manga):\n`;
      if (isRaining) {
        advice += `‚Ä¢ Tr√¢nsito mais lento - saia mais cedo\n`;
        advice += `‚Ä¢ Use coberturas dos edif√≠cios\n`;
        advice += `‚Ä¢ Aten√ß√£o com po√ßas nas ruas principais\n`;
      } else {
        advice += `‚Ä¢ Tr√¢nsito normal durante o dia\n`;
        advice += `‚Ä¢ Estacionamento limitado - chegue cedo\n`;
        advice += `‚Ä¢ Boa conectividade de transportes p√∫blicos\n`;
      }
      break;
      
    case 'munhava':
      advice += `üèòÔ∏è Em Munhava:\n`;
      if (isRaining) {
        advice += `‚Ä¢ Algumas vias podem alagar\n`;
        advice += `‚Ä¢ Evite √°reas baixas do bairro\n`;
        advice += `‚Ä¢ Transporte p√∫blico pode atrasar\n`;
        advice += `‚Ä¢ Caminhe com cuidado em ruas n√£o pavimentadas\n`;
      } else {
        advice += `‚Ä¢ Transporte p√∫blico funciona normalmente\n`;
        advice += `‚Ä¢ Boa para caminhadas no bairro\n`;
        advice += `‚Ä¢ Chapas (transporte local) dispon√≠veis\n`;
      }
      break;
      
    case 'goto':
    case 'chaimite':
    case 'ndunda':
      advice += `üèòÔ∏è Em bairro residencial:\n`;
      if (isRaining) {
        advice += `‚Ä¢ Estradas de terra podem ficar escorregadias\n`;
        advice += `‚Ä¢ Evite zonas de acumula√ß√£o de √°gua\n`;
        advice += `‚Ä¢ Prefira chapas ou transporte coberto\n`;
      } else {
        advice += `‚Ä¢ Boa acessibilidade no bairro\n`;
        advice += `‚Ä¢ Transporte local (chapas) dispon√≠vel\n`;
        advice += `‚Ä¢ Adequado para bicicletas\n`;
      }
      break;
  }
  
  advice += `\n`;
  return advice;
}

function getNeighborhoodRisks(neighborhood, weatherData) {
  const risks = [];
  const isRaining = weatherData.description.toLowerCase().includes('chuva');
  const temp = parseInt(weatherData.temperature);

  switch (neighborhood.toLowerCase()) {
    case 'mac√∫ti':
      if (isRaining) {
        risks.push('Eros√£o costeira - evite a beira-mar');
        risks.push('Alagamentos em vias baixas perto da praia');
      }
      if (temp > 32) {
        risks.push('Insola√ß√£o intensa na zona da praia');
      }
      break;

    case 'manga':
      if (isRaining) {
        risks.push('Alagamentos no centro comercial');
        risks.push('Tr√¢nsito complicado nas vias principais');
      }
      break;

    case 'goto':
      if (isRaining) {
        risks.push('Drenagem deficiente - evite zonas baixas');
        risks.push('Estradas de terra podem ficar intransit√°veis');
      }
      break;

    case 'munhava':
      if (isRaining) {
        risks.push('Alagamentos nas zonas baixas');
        risks.push('Dificuldades no transporte p√∫blico');
      }
      break;

    case 'chaimite':
      if (isRaining) {
        risks.push('Estradas de terra em mau estado');
        risks.push('Poss√≠vel acumula√ß√£o de √°gua em baixadas');
      }
      break;

    case 'ndunda':
      if (isRaining) {
        risks.push('Vias n√£o pavimentadas podem alagar');
        risks.push('Dificulta acesso aos transportes');
      }
      break;

    case 'cidade de cimento':
      if (isRaining) {
        risks.push('Poss√≠vel congestionamento no centro');
      }
      if (temp > 33) {
        risks.push('Efeito ilha de calor urbano intenso');
      }
      break;

    case 'palmeiras':
      if (isRaining) {
        risks.push('Drenagem limitada em algumas √°reas');
      }
      break;
  }

  return risks;
}

function generateRainAdvice(neighborhood, weatherData) {
  let advice = `‚òî *CONSELHOS PARA CHUVA:*\n`;

  switch (neighborhood.toLowerCase()) {
    case 'mac√∫ti':
      advice += `‚Ä¢ Evite caminhadas na praia - ondas podem estar agitadas\n`;
      advice += `‚Ä¢ Use rotas alternativas longe da costa\n`;
      advice += `‚Ä¢ Cuidado com o piso molhado nas zonas de restaurantes\n`;
      break;

    case 'manga':
      advice += `‚Ä¢ Evite o centro comercial se poss√≠vel\n`;
      advice += `‚Ä¢ Use transporte coberto\n`;
      advice += `‚Ä¢ Tenha paci√™ncia com o tr√¢nsito intenso\n`;
      break;

    case 'goto':
    case 'munhava':
    case 'chaimite':
    case 'ndunda':
      advice += `‚Ä¢ Evite estradas de terra\n`;
      advice += `‚Ä¢ Use sapatos imperme√°veis\n`;
      advice += `‚Ä¢ Planifique rotas alternativas\n`;
      advice += `‚Ä¢ Guarde √°gua pot√°vel (poss√≠veis interrup√ß√µes)\n`;
      break;

    case 'cidade de cimento':
      advice += `‚Ä¢ Evite o centro nas horas de pico\n`;
      advice += `‚Ä¢ Use edif√≠cios cobertos para locomo√ß√£o\n`;
      advice += `‚Ä¢ Cuidado com bueiros entupidos\n`;
      break;

    default:
      advice += `‚Ä¢ Mantenha-se em locais seguros e cobertos\n`;
      advice += `‚Ä¢ Evite √°reas propensas a alagamentos\n`;
      advice += `‚Ä¢ Tenha sempre guarda-chuva\n`;
  }

  return advice;
}

function generateHeatAdvice(neighborhood, weatherData) {
  let advice = `üî• *CONSELHOS PARA CALOR INTENSO:*\n`;

  switch (neighborhood.toLowerCase()) {
    case 'mac√∫ti':
      advice += `‚Ä¢ Aproveite a brisa mar√≠tima\n`;
      advice += `‚Ä¢ Evite a praia entre 10h-16h\n`;
      advice += `‚Ä¢ Use protetor solar sempre\n`;
      advice += `‚Ä¢ Hidrate-se constantemente\n`;
      break;

    case 'cidade de cimento':
      advice += `‚Ä¢ Procure edif√≠cios com ar condicionado\n`;
      advice += `‚Ä¢ Evite o asfalto quente\n`;
      advice += `‚Ä¢ Use roupas claras e leves\n`;
      advice += `‚Ä¢ Mantenha-se na sombra\n`;
      break;

    default:
      advice += `‚Ä¢ Procure sombra e locais ventilados\n`;
      advice += `‚Ä¢ Beba √°gua regularmente\n`;
      advice += `‚Ä¢ Evite atividades f√≠sicas intensas\n`;
      advice += `‚Ä¢ Use chap√©u e roupas leves\n`;
  }

  return advice;
}

function generateColdAdvice(neighborhood, weatherData) {
  let advice = `üßä *CONSELHOS PARA TEMPO FRESCO:*\n`;

  switch (neighborhood.toLowerCase()) {
    case 'mac√∫ti':
      advice += `‚Ä¢ Vento mar√≠timo pode intensificar a sensa√ß√£o de frio\n`;
      advice += `‚Ä¢ Use casaco corta-vento\n`;
      advice += `‚Ä¢ Evite exposi√ß√£o prolongada √† brisa\n`;
      break;

    default:
      advice += `‚Ä¢ Vista roupas em camadas\n`;
      advice += `‚Ä¢ Mantenha-se aquecido em ambientes fechados\n`;
      advice += `‚Ä¢ Beba l√≠quidos quentes\n`;
      advice += `‚Ä¢ Proteja extremidades (m√£os, p√©s)\n`;
  }

  return advice;
}

function generateGeneralNeighborhoodAdvice(neighborhood, weatherData) {
  let advice = `üòä *CONDI√á√ïES FAVOR√ÅVEIS:*\n`;

  switch (neighborhood.toLowerCase()) {
    case 'mac√∫ti':
      advice += `‚Ä¢ Perfeito para atividades na praia\n`;
      advice += `‚Ä¢ √ìtimo para restaurantes com vista mar\n`;
      advice += `‚Ä¢ Ideal para caminhadas costeiras\n`;
      break;

    case 'manga':
      advice += `‚Ä¢ Bom para compras no centro comercial\n`;
      advice += `‚Ä¢ Tr√¢nsito fluindo normalmente\n`;
      advice += `‚Ä¢ Atividades comerciais em pleno funcionamento\n`;
      break;

    default:
      advice += `‚Ä¢ Clima agrad√°vel para atividades ao ar livre\n`;
      advice += `‚Ä¢ Bom para desloca√ß√µes a p√©\n`;
      advice += `‚Ä¢ Condi√ß√µes normais de transporte\n`;
  }

  return advice;
}

function getNeighborhoodSafetyTips(neighborhood, weatherData) {
  const isRaining = weatherData.description.toLowerCase().includes('chuva');
  let tips = '';

  if (isRaining) {
    switch (neighborhood.toLowerCase()) {
      case 'mac√∫ti':
        tips += `‚Ä¢ Mantenha dist√¢ncia segura do mar\n`;
        tips += `‚Ä¢ Evite zonas rochosas escorregadias\n`;
        break;

      case 'manga':
        tips += `‚Ä¢ Cuidado com po√ßas nos mercados\n`;
        tips += `‚Ä¢ Aten√ß√£o ao tr√¢nsito intenso\n`;
        break;

      default:
        tips += `‚Ä¢ Evite caminhar em √°reas alagadas\n`;
        tips += `‚Ä¢ Cuidado com fios el√©tricos ca√≠dos\n`;
    }
  } else {
    tips += `‚Ä¢ Mantenha comunica√ß√£o com familiares\n`;
    tips += `‚Ä¢ Tenha sempre √°gua e contactos de emerg√™ncia\n`;
  }

  return tips;
}

async function handleReminderRequest(analysis, phoneNumber, user) {
  try {
    const { city, context } = analysis;
    const targetCity = city || user?.preferred_city || 'sua cidade';

    const reminderMessage = `üîî *Lembrete Configurado!*

Vou te avisar sobre mudan√ßas clim√°ticas em ${targetCity}.

‚öôÔ∏è *Alertas Ativados:*
‚Ä¢ üåßÔ∏è Chuva iminente
‚Ä¢ üå°Ô∏è Mudan√ßas bruscas de temperatura
‚Ä¢ ‚ö†Ô∏è Condi√ß√µes clim√°ticas extremas

‚è∞ *Hor√°rio preferido:* ${user?.preferred_notification_time || '08:00'}

Para ajustar configura√ß√µes, digite "configurar alertas".

*Nota:* Este √© um recurso premium. Em breve voc√™ receber√° notifica√ß√µes inteligentes!`;

    await whatsappApi.enviarMensagemUsandoWhatsappAPI(reminderMessage, phoneNumber);

    // Salvar prefer√™ncia de notifica√ß√£o
    await saveOrUpdateAdvancedUser(phoneNumber, { notifications: true });

    return reminderMessage;

  } catch (error) {
    console.error('‚ùå Erro no lembrete:', error);
    return null;
  }
}

async function handleOffTopicAdvanced(analysis, phoneNumber, user) {
  const offTopicMessage = `ü§ñ Sou especializado em clima e meteorologia! 

üå§Ô∏è *Posso ajudar com:*
‚Ä¢ Temperatura atual de qualquer cidade
‚Ä¢ Previs√µes meteorol√≥gicas
‚Ä¢ Explica√ß√µes sobre fen√¥menos clim√°ticos
‚Ä¢ Compara√ß√µes entre cidades
‚Ä¢ Alertas clim√°ticos personalizados
‚Ä¢ Conselhos espec√≠ficos para bairros da Beira

‚≠ê *COMANDOS ESPECIAIS:*
‚Ä¢ \`/sugestoes\` - Dicas personalizadas baseadas no seu perfil
‚Ä¢ \`/conselhos\` - Menu interativo de conselhos por bairro da Beira

üèòÔ∏è *Conselhos por bairro da Beira dispon√≠veis!*
üìç Exemplo: "Conselhos para Mac√∫ti se chover" ou use \`/conselhos\`

üí¨ Tente perguntar: "Como est√° o clima em Maputo?" ou \`/sugestoes\``;

  await whatsappApi.enviarMensagemUsandoWhatsappAPI(offTopicMessage, phoneNumber);
  return offTopicMessage;
}

// ===============================================
// SUGEST√ïES INTELIGENTES
// ===============================================

async function sendIntelligentSuggestions(phoneNumber, suggestions, city) {
  try {
    if (!suggestions || suggestions.length === 0) return;

    const suggestionButtons = {
      messaging_product: 'whatsapp',
      recipient_type: "individual",
      to: phoneNumber,
      type: "interactive",
      interactive: {
        type: "button",
        header: {
          type: "text",
          text: "üí° Sugest√µes Inteligentes"
        },
        body: {
          text: "Baseado na sua consulta, voc√™ pode se interessar por:"
        },
        action: {
          buttons: suggestions.slice(0, 3).map((suggestion, index) => {
            // Criar um mapeamento mais inteligente para bot√µes
            let buttonText = suggestion;
            let buttonId = `suggestion_${index}`;

            // Mapear sugest√µes espec√≠ficas para comandos mais claros
            if (suggestion.toLowerCase().includes('previs√£o') || suggestion.toLowerCase().includes('7 dias')) {
              buttonText = "Previs√£o 7 dias";
              buttonId = `forecast_7days_${city || 'current'}`;
            } else if (suggestion.toLowerCase().includes('amanh√£')) {
              buttonText = "Tempo amanh√£";
              buttonId = `forecast_tomorrow_${city || 'current'}`;
            } else if (suggestion.toLowerCase().includes('roupa')) {
              buttonText = "Que roupa usar";
              buttonId = `clothing_tips_${city || 'current'}`;
            } else if (suggestion.toLowerCase().includes('comparar')) {
              buttonText = "Comparar cidades";
              buttonId = `compare_cities`;
            } else {
              // Limitar caracteres para outras sugest√µes
              buttonText = suggestion.substring(0, 20);
              buttonId = `suggestion_${index}`;
            }

            return {
              type: "reply",
              reply: {
                id: buttonId,
                title: buttonText
              }
            };
          })
        }
      }
    };

    // Delay para n√£o sobrepor com resposta principal
    setTimeout(async () => {
      await whatsappApi.enviarMensagemInterativaUsandoWhatsappAPI(suggestionButtons);
    }, 2000);

  } catch (error) {
    console.error('‚ùå Erro ao enviar sugest√µes:', error);
  }
}

async function processAdvancedInteractiveMessage(interactive, phoneNumber) {
  const user = await getUserByContact(phoneNumber);

  if (interactive.type === "button_reply") {
    const buttonId = interactive.button_reply.id;
    const buttonTitle = interactive.button_reply.title;

    console.log(`üîò Bot√£o pressionado: ${buttonId} - "${buttonTitle}"`);

    // Processar bot√µes espec√≠ficos primeiro
    if (buttonId.startsWith("forecast_7days_")) {
      const city = buttonId.replace("forecast_7days_", "") === "current" ?
        (user?.preferred_city || user?.last_city || "Maputo") :
        buttonId.replace("forecast_7days_", "");
      await processAdvancedTextMessage(`previs√£o de 7 dias ${city}`, phoneNumber);
      return;
    }

    if (buttonId.startsWith("forecast_tomorrow_")) {
      const city = buttonId.replace("forecast_tomorrow_", "") === "current" ?
        (user?.preferred_city || user?.last_city || "Maputo") :
        buttonId.replace("forecast_tomorrow_", "");
      await processAdvancedTextMessage(`tempo amanh√£ em ${city}`, phoneNumber);
      return;
    }

    if (buttonId.startsWith("clothing_tips_")) {
      const city = buttonId.replace("clothing_tips_", "") === "current" ?
        (user?.preferred_city || user?.last_city || "Maputo") :
        buttonId.replace("clothing_tips_", "");
      await processAdvancedTextMessage(`que roupa usar em ${city}`, phoneNumber);
      return;
    }

    if (buttonId === "compare_cities") {
      await processAdvancedTextMessage("comparar clima entre cidades", phoneNumber);
      return;
    }

    // Tratamento espec√≠fico para bot√µes de bairros da Beira
    if (buttonId.startsWith("bairro_")) {
      const bairroMap = {
        "bairro_macuti": "Mac√∫ti",
        "bairro_manga": "Manga", 
        "bairro_goto": "Goto",
        "bairro_munhava": "Munhava",
        "bairro_chaimite": "Chaimite",
        "bairro_ndunda": "Ndunda",
        "bairro_palmeiras": "Palmeiras",
        "bairro_cidade_cimento": "Cidade de Cimento"
      };
      
      const bairro = bairroMap[buttonId] || buttonTitle;
      await processAdvancedTextMessage(`conselhos para ${bairro}`, phoneNumber, false); // false = n√£o detectar automaticamente
      return;
    }

    if (buttonId.startsWith("neighborhood_")) {
      const neighborhood = buttonId.replace("neighborhood_", "").replace(/_/g, " ");
      await processAdvancedTextMessage(`conselhos para ${neighborhood} tempo atual`, phoneNumber);
      return;
    }

    if (buttonId.startsWith("suggestion_")) {
      // Usu√°rio clicou numa sugest√£o gen√©rica - usar o t√≠tulo do bot√£o
      await processAdvancedTextMessage(buttonTitle, phoneNumber);
      return;
    }

    if (buttonId.startsWith("cmd_suggestion_")) {
      // Sugest√£o gerada pelo comando /sugestoes - usar o t√≠tulo do bot√£o
      await processAdvancedTextMessage(buttonTitle, phoneNumber);
      return;
    }

    if (buttonId.startsWith("activity_tips_")) {
      const city = buttonId.replace("activity_tips_", "") === "current" ?
        (user?.preferred_city || user?.last_city || "Maputo") :
        buttonId.replace("activity_tips_", "");
      await processAdvancedTextMessage(`atividades para hoje em ${city}`, phoneNumber);
      return;
    }

    if (buttonId.startsWith("conselho_")) {
      // Extrair bairro do ID do bot√£o: conselho_macuti_clima
      const parts = buttonId.split('_');
      if (parts.length >= 2) {
        const neighborhood = parts[1].replace(/_/g, ' ');
        const weatherContext = parts[2] || 'atual';

        // Construir mensagem espec√≠fica para conselhos por bairro
        const conselhosMessage = `conselhos para ${neighborhood} com ${weatherContext}`;
        console.log(`üèòÔ∏è Processando conselho de bairro via bot√£o: ${conselhosMessage}`);

        // Chamar diretamente a fun√ß√£o de conselhos de bairro (sem detec√ß√£o autom√°tica)
        const mockAnalysis = {
          type: 'neighborhood_advice',
          city: 'Beira',
          neighborhood: neighborhood,
          intent: 'conselhos_bairro_direto',
          action: 'show_neighborhood_advice',
          context: { weatherContext, isFromButton: true }
        };

        await handleNeighborhoodAdvice(mockAnalysis, phoneNumber, user);
        return;
      }
    }

    // Outros bot√µes interativos (mantidos do c√≥digo original)
    switch (buttonId) {
      case "quick_weather":
        const city = user?.preferred_city || "Maputo";
        await processAdvancedTextMessage(`clima em ${city}`, phoneNumber);
        break;

      case "forecast_7days":
        const forecastCity = user?.preferred_city || "Maputo";
        await processAdvancedTextMessage(`previs√£o 7 dias ${forecastCity}`, phoneNumber);
        break;

      case "settings_menu":
        await whatsappApi.enviarMenuConfiguracoes(phoneNumber, user);
        break;

      default:
        await processAdvancedTextMessage(buttonId, phoneNumber);
    }
  }

  if (interactive.type === "list_reply") {
    const listId = interactive.list_reply.id;

    // Processar como texto normal
    await processAdvancedTextMessage(listId, phoneNumber);
  }
}

async function processLocationMessage(location, phoneNumber) {
  try {
    const { latitude, longitude } = location;

    await whatsappApi.enviarMensagemCarregamento(phoneNumber, 'Identificando localiza√ß√£o');

    // Aqui voc√™ poderia usar uma API de geocoding reverso
    // Por exemplo, OpenWeatherMap, Google Maps, etc.

    const locationMessage = `üìç *Localiza√ß√£o Recebida*

Latitude: ${latitude}
Longitude: ${longitude}

üí° Para obter o clima da sua localiza√ß√£o, me diga o nome da cidade mais pr√≥xima.

Exemplo: "clima aqui" ou "temperatura atual"`;

    await whatsappApi.enviarMensagemUsandoWhatsappAPI(locationMessage, phoneNumber);

  } catch (error) {
    console.error('‚ùå Erro ao processar localiza√ß√£o:', error);
    await whatsappApi.enviarMensagemErro(phoneNumber, "Erro ao processar localiza√ß√£o");
  }
}

// ===============================================
// UTILIT√ÅRIOS AVAN√áADOS
// ===============================================

function getContextualLoadingMessage(context, city) {
  const { timeframe, weatherAspect } = context || {};

  if (timeframe === 'amanha') return `üîç Verificando previs√£o para amanh√£ em ${city}...`;
  if (weatherAspect === 'chuva') return `‚òî Analisando possibilidade de chuva em ${city}...`;
  if (weatherAspect === 'temperatura') return `üå°Ô∏è Consultando temperatura atual em ${city}...`;

  return `üîç Buscando informa√ß√µes meteorol√≥gicas de ${city}...`;
}

function createSimpleWeatherMessage(weatherData) {
  const emoji = getWeatherEmoji(weatherData.description);

  if (weatherData.isForecast) {
    return `${emoji} *Previs√£o para amanh√£ em ${weatherData.city}*\n\nüå°Ô∏è ${weatherData.minTemp}${weatherData.units} - ${weatherData.maxTemp}${weatherData.units}\nüìÖ ${weatherData.date}\nüìù ${weatherData.description}`;
  }

  return `${emoji} *${weatherData.city}*\n\nüå°Ô∏è ${weatherData.temperature}${weatherData.units} (sensa√ß√£o de ${weatherData.feelsLike}${weatherData.units})\nüíß Umidade: ${weatherData.humidity}%\nüìù ${weatherData.description}`;
}

function extractCitiesForComparison(analysis, user) {
  const cities = [];

  // Tentar extrair da an√°lise
  if (analysis.city) cities.push(analysis.city);

  // Adicionar cidade do usu√°rio se dispon√≠vel
  if (user?.last_city && !cities.includes(user.last_city)) {
    cities.push(user.last_city);
  }

  if (user?.preferred_city && !cities.includes(user.preferred_city)) {
    cities.push(user.preferred_city);
  }

  return cities.slice(0, 2);
}

function getWeatherEmoji(description) {
  const desc = description.toLowerCase();
  if (desc.includes('sol') || desc.includes('clear')) return '‚òÄÔ∏è';
  if (desc.includes('chuva') || desc.includes('rain')) return 'üåßÔ∏è';
  if (desc.includes('nuvem') || desc.includes('cloud')) return '‚òÅÔ∏è';
  if (desc.includes('tempest') || desc.includes('storm')) return '‚õàÔ∏è';
  return 'üå§Ô∏è';
}

async function processBasicFallback(messageText, phoneNumber) {
  const user = await getUserByContact(phoneNumber);
  console.log('üîÑ Usando fallback b√°sico para:', messageText);

  await whatsappApi.enviarMensagemUsandoWhatsappAPI(
    "ü§ñ Desculpe, n√£o consegui entender completamente sua mensagem.\n\nüí¨ Voc√™ pode tentar:\n‚Ä¢ 'Clima em [cidade]'\n‚Ä¢ 'Previs√£o para amanh√£'\n‚Ä¢ 'O que √© [termo meteorol√≥gico]?'\n\nComo posso ajudar?",
    phoneNumber
  );
}

async function sendAdvancedHelp(phoneNumber, user) {
  const language = user?.language || 'pt';
  const expertiseLevel = user?.expertise_level || 'basic';

  let helpMessage = `ü§ñ *Assistente Meteorol√≥gico Avan√ßado*\n\n`;

  helpMessage += `‚≠ê *COMANDOS ESPECIAIS:*\n`;
  helpMessage += `‚Ä¢ \`/sugestoes\` - Sugest√µes inteligentes personalizadas\n`;
  helpMessage += `‚Ä¢ \`/conselhos\` - Menu de conselhos por bairro da Beira\n\n`;

  if (expertiseLevel === 'basic') {
    helpMessage += `üí¨ *Comandos Simples:*\n‚Ä¢ "Clima em [cidade]"\n‚Ä¢ "Vai chover amanh√£?"\n‚Ä¢ "O que √© umidade?"\n‚Ä¢ "Conselhos para Mac√∫ti se chover"\n\n`;
  } else if (expertiseLevel === 'intermediate') {
    helpMessage += `üí¨ *Comandos Dispon√≠veis:*\n‚Ä¢ Consultas: "Temperatura Maputo"\n‚Ä¢ Compara√ß√µes: "Compare Maputo e Beira"\n‚Ä¢ Educa√ß√£o: "Como se forma a chuva?"\n‚Ä¢ Previs√µes: "Resumo da semana"\n‚Ä¢ Bairros: "Dicas para Manga com calor"\n\n`;
  } else {
    helpMessage += `üí¨ *Comandos Avan√ßados:*\n‚Ä¢ An√°lises t√©cnicas meteorol√≥gicas\n‚Ä¢ Compara√ß√µes multi-cidade\n‚Ä¢ Alertas personalizados\n‚Ä¢ Dados hist√≥ricos e tend√™ncias\n‚Ä¢ Conselhos espec√≠ficos por bairro da Beira\n\n`;
  }

  helpMessage += `üèòÔ∏è *Conselhos por Bairro da Beira:*\n`;
  helpMessage += `üìç *Bairros suportados:* Mac√∫ti, Manga, Goto, Munhava, Chaimite, Ndunda, Cidade de Cimento, Palmeiras\n`;
  helpMessage += `üí° *Como usar:* Digite \`/conselhos\` para menu interativo ou "conselhos para [bairro]"\n\n`;
  helpMessage += `üéØ *Seu N√≠vel:* ${expertiseLevel.toUpperCase()}\nüìä *Consultas:* ${user?.query_count || 0}\n\nComo posso ajudar hoje?`;

  await whatsappApi.enviarMensagemUsandoWhatsappAPI(helpMessage, phoneNumber);
}

// ===============================================
// ROTAS DE ESTAT√çSTICAS E ADMIN
// ===============================================

app.get("/stats", async (req, res) => {
  try {
    const stats = await dbService.getStats();

    if (!stats) {
      return res.status(500).json({ error: "Erro ao obter estat√≠sticas" });
    }

    const activeUsers = await dbService.getActiveUsers(7);

    res.json({
      success: true,
      timestamp: new Date().toISOString(),
      stats: stats,
      recentUsers: activeUsers.slice(0, 10).map(user => ({
        contact: user.contact.substring(0, 6) + "****", // Ofuscar contato
        lastAccess: user.last_access,
        queryCount: user.query_count,
        expertiseLevel: user.expertise_level,
        preferredCity: user.preferred_city
      }))
    });

  } catch (error) {
    console.error('‚ùå Erro ao obter estat√≠sticas:', error);
    res.status(500).json({ error: "Erro interno do servidor" });
  }
});

app.get("/health", async (req, res) => {
  try {
    // Testar conex√µes
    const dbOk = await dbService.testConnection();
    const openaiOk = await openaiService.testConnection();

    res.json({
      status: "ok",
      timestamp: new Date().toISOString(),
      services: {
        database: dbOk ? "ok" : "error",
        openai: openaiOk.success ? "ok" : "error",
        whatsapp: token && phoneNumberID ? "configured" : "not configured"
      }
    });

  } catch (error) {
    console.error('‚ùå Erro no health check:', error);
    res.status(500).json({ status: "error", error: error.message });
  }
});

// ===============================================
// INICIALIZA√á√ÉO DO SERVIDOR
// ===============================================

app.listen(port, async () => {
  console.log(`üå°Ô∏è Temperature Bot com SUPABASE running on port ${port}`);
  console.log(`üìÖ Started at: ${new Date().toLocaleString()}`);

  // Testar conex√µes na inicializa√ß√£o
  try {
    const dbTest = await dbService.testConnection();
    console.log(`üóÑÔ∏è  Database (Supabase): ${dbTest ? '‚úÖ OK' : '‚ùå ERRO'}`);

    const aiTest = await openaiService.testConnection();
    console.log(`üß† OpenAI: ${aiTest.success ? '‚úÖ OK' : '‚ùå ERRO'}`);

    console.log(`üí° Funcionalidades ativas:`);
    console.log(`   ‚Ä¢ Mem√≥ria Contextual: ‚úÖ`);
    console.log(`   ‚Ä¢ Progress√£o de Expertise: ‚úÖ`);
    console.log(`   ‚Ä¢ Sugest√µes Inteligentes: ‚úÖ`);
    console.log(`   ‚Ä¢ Armazenamento Persistente: ‚úÖ Supabase`);

  } catch (error) {
    console.error('‚ùå Erro na inicializa√ß√£o:', error);
  }
});

// ===============================================
// FUN√á√ïES AUXILIARES PARA DICAS PR√ÅTICAS
// ===============================================

function generateClothingTips(weatherData) {
  const temp = parseInt(weatherData.temperature);
  const isRaining = weatherData.description.toLowerCase().includes('chuva');

  let tips = `üëï *Que roupa usar hoje:*\n\n`;

  if (temp > 30) {
    tips += `üå°Ô∏è Faz ${temp}¬∞C - est√° quente!\n`;
    tips += `‚Ä¢ Roupas leves e claras\n`;
    tips += `‚Ä¢ Tecidos que respiram (algod√£o, linho)\n`;
    tips += `‚Ä¢ Chap√©u ou bon√©\n`;
    tips += `‚Ä¢ Protetor solar\n`;
  } else if (temp > 25) {
    tips += `üå°Ô∏è ${temp}¬∞C - temperatura agrad√°vel\n`;
    tips += `‚Ä¢ Roupas leves\n`;
    tips += `‚Ä¢ Camiseta e bermuda/saia\n`;
    tips += `‚Ä¢ T√™nis confort√°vel\n`;
  } else if (temp > 18) {
    tips += `üå°Ô∏è ${temp}¬∞C - fresquinho\n`;
    tips += `‚Ä¢ Cal√ßa leve e blusa\n`;
    tips += `‚Ä¢ Casaco leve para a noite\n`;
    tips += `‚Ä¢ Sapato fechado\n`;
  } else {
    tips += `üå°Ô∏è ${temp}¬∞C - est√° frio!\n`;
    tips += `‚Ä¢ Roupas em camadas\n`;
    tips += `‚Ä¢ Casaco quente\n`;
    tips += `‚Ä¢ Cal√ßa comprida\n`;
    tips += `‚Ä¢ Sapato fechado e meia\n`;
  }

  if (isRaining) {
    tips += `\n‚òî *Est√° chovendo:*\n`;
    tips += `‚Ä¢ Guarda-chuva ou capa de chuva\n`;
    tips += `‚Ä¢ Sapato √† prova d'√°gua\n`;
    tips += `‚Ä¢ Evite roupas claras\n`;
  }

  return tips;
}

function generateTemperatureTips(weatherData) {
  const temp = parseInt(weatherData.temperature);
  const humidity = weatherData.humidity;

  let tips = '';

  if (temp > 30) {
    tips += `üî• *Dicas para o calor (${temp}¬∞C):*\n\n`;
    tips += `üíß Hidrate-se constantemente\n`;
    tips += `üè† Fique em locais frescos nas horas mais quentes\n`;
    tips += `‚è∞ Evite o sol das 10h √†s 16h\n`;
    tips += `üöø Tome banhos frescos\n`;
    tips += `ü•ó Prefira alimentos leves\n`;

    if (humidity > 70) {
      tips += `\nüå´Ô∏è Umidade alta (${humidity}%) - sensa√ß√£o de abafado\n`;
      tips += `üí® Use ventilador ou ar condicionado\n`;
    }
  } else if (temp < 15) {
    tips += `üßä *Dicas para o frio (${temp}¬∞C):*\n\n`;
    tips += `üçµ Beba l√≠quidos quentes\n`;
    tips += `üèÉ‚Äç‚ôÄÔ∏è Mantenha-se ativo para aquecer\n`;
    tips += `üß¶ Proteja extremidades (m√£os, p√©s, orelhas)\n`;
    tips += `üç≤ Prefira alimentos quentes\n`;
    tips += `üè† Mantenha ambientes aquecidos\n`;
  } else {
    tips += `üå°Ô∏è *Temperatura agrad√°vel (${temp}¬∞C):*\n\n`;
    tips += `üòä Perfeito para atividades ao ar livre\n`;
    tips += `üö∂‚Äç‚ôÄÔ∏è √ìtimo para caminhadas\n`;
    tips += `üå≥ Aproveite parques e pra√ßas\n`;
    tips += `üì∏ Dia ideal para fotos\n`;
  }

  return tips;
}

function generateRainTips(weatherData) {
  const isRaining = weatherData.description.toLowerCase().includes('chuva');

  let tips = '';

  if (isRaining) {
    tips += `‚òî *Est√° chovendo em ${weatherData.city}:*\n\n`;
    tips += `üåÇ Leve guarda-chuva sempre\n`;
    tips += `üëü Use sapato antiderrapante\n`;
    tips += `üöó Dirija com cuidado redobrado\n`;
    tips += `üè† Prefira atividades internas\n`;
    tips += `üì± Tenha guarda-chuva no carro\n`;
  } else {
    tips += `‚òÄÔ∏è *Sem chuva em ${weatherData.city}:*\n\n`;
    tips += `üòä Dia livre para atividades externas\n`;
    tips += `üß∫ Bom para estender roupas\n`;
    tips += `üö≤ Perfeito para exerc√≠cios ao ar livre\n`;
    tips += `üå≥ Aproveite para ir ao parque\n`;
  }

  return tips;
}

function generateActivityTips(weatherData) {
  const temp = parseInt(weatherData.temperature);
  const isRaining = weatherData.description.toLowerCase().includes('chuva');

  let tips = `üèÉ‚Äç‚ôÄÔ∏è *Atividades recomendadas:*\n\n`;

  if (isRaining) {
    tips += `‚òî *Atividades internas:*\n`;
    tips += `üèãÔ∏è‚Äç‚ôÄÔ∏è Academia ou exerc√≠cios em casa\n`;
    tips += `üõçÔ∏è Shopping centers\n`;
    tips += `üìö Biblioteca ou estudo\n`;
    tips += `üé¨ Cinema\n`;
    tips += `‚òï Caf√© com amigos\n`;
  } else if (temp > 30) {
    tips += `üå°Ô∏è *Calor (${temp}¬∞C) - atividades na sombra:*\n`;
    tips += `üèä‚Äç‚ôÄÔ∏è Piscina ou praia\n`;
    tips += `üå≥ Parque com sombra\n`;
    tips += `üïï Exerc√≠cios antes das 9h ou ap√≥s 17h\n`;
    tips += `üõçÔ∏è Shopping (ar condicionado)\n`;
    tips += `üç¶ Sorveteria\n`;
  } else if (temp < 15) {
    tips += `üßä *Frio (${temp}¬∞C) - atividades aquecidas:*\n`;
    tips += `‚òï Caf√© ou ch√° quente\n`;
    tips += `üèãÔ∏è‚Äç‚ôÄÔ∏è Academia\n`;
    tips += `üõçÔ∏è Shopping centers\n`;
    tips += `üìö Leitura em casa\n`;
    tips += `üéÆ Jogos em casa\n`;
  } else {
    tips += `üòä *Clima perfeito (${temp}¬∞C):*\n`;
    tips += `üö∂‚Äç‚ôÄÔ∏è Caminhada ou corrida\n`;
    tips += `üö≤ Ciclismo\n`;
    tips += `üå≥ Piquenique no parque\n`;
    tips += `‚öΩ Esportes ao ar livre\n`;
    tips += `üì∏ Fotografia\n`;
  }

  return tips;
}

function generateGeneralTips(weatherData) {
  const temp = parseInt(weatherData.temperature);
  const isRaining = weatherData.description.toLowerCase().includes('chuva');

  let tips = `üí° *Dicas gerais para hoje:*\n\n`;

  // Dicas de vestu√°rio
  tips += generateClothingTips(weatherData).replace('üëï *Que roupa usar hoje:*\n\n', 'üëï *Vestu√°rio:*\n');

  // Dicas de atividades
  tips += `\nüèÉ‚Äç‚ôÄÔ∏è *Atividades:*\n`;
  if (isRaining) {
    tips += `‚Ä¢ Prefira atividades internas\n`;
  } else if (temp > 25 && temp < 30) {
    tips += `‚Ä¢ √ìtimo para atividades ao ar livre\n`;
  } else if (temp > 30) {
    tips += `‚Ä¢ Evite sol forte (10h-16h)\n`;
  } else {
    tips += `‚Ä¢ Vista-se adequadamente para o frio\n`;
  }

  return tips;
}