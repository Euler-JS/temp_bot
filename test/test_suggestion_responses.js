const OPENAI = require('../open_ai/open_ai');
require('dotenv').config();

// Teste espec√≠fico para processamento de respostas de sugest√µes
async function testSuggestionResponseProcessing() {
    console.log('üß™ TESTE PROCESSAMENTO DE RESPOSTAS DE SUGEST√ïES');
    console.log('================================================\n');

    // Inicializar OpenAI
    const openai = new OPENAI(process.env.OPENAI_API_KEY);

    // Dados mockados para testes
    const mockWeatherData = {
        city: "Beira",
        temperature: "28",
        description: "c√©u claro",
        humidity: "65",
        isForecast: false
    };

    const mockUserContext = {
        queryCount: 5,
        lastCity: "beira",
        preferredCity: "beira",
        expertiseLevel: "basic"
    };

    // Cen√°rios de teste
    const testScenarios = [
        {
            name: "Atividades (problema original)",
            suggestion: "H√° alguma atividade",
            expectedType: "practical_tips_activities"
        },
        {
            name: "Atividades varia√ß√£o",
            suggestion: "Atividades hoje",
            expectedType: "practical_tips_activities"
        },
        {
            name: "Que roupa usar",
            suggestion: "Que roupa usar?",
            expectedType: "practical_tips_clothing"
        },
        {
            name: "Dicas para calor",
            suggestion: "Dicas calor",
            expectedType: "practical_tips_hot"
        },
        {
            name: "Tempo amanh√£",
            suggestion: "Tempo amanh√£?",
            expectedType: "weather_forecast_tomorrow"
        },
        {
            name: "Vai chover",
            suggestion: "Vai chover?",
            expectedType: "weather_forecast_rain"
        },
        {
            name: "Previs√£o 7 dias",
            suggestion: "Previs√£o 7 dias",
            expectedType: "weather_forecast_week"
        },
        {
            name: "Comparar cidades",
            suggestion: "Comparar cidades",
            expectedType: "weather_comparison_cities"
        },
        {
            name: "Ajuda",
            suggestion: "Ajuda",
            expectedType: "system_help"
        }
    ];

    console.log('1Ô∏è‚É£ Testando diferentes tipos de sugest√µes...\n');

    for (const scenario of testScenarios) {
        console.log(`üîπ Testando: ${scenario.name}`);
        console.log(`   Texto: "${scenario.suggestion}"`);

        try {
            const result = await openai.processSuggestionResponse(
                scenario.suggestion,
                mockWeatherData,
                mockUserContext
            );

            console.log(`   ‚úÖ Tipo identificado: ${result.suggestionType}`);
            console.log(`   üìù Resposta: ${result.response.substring(0, 100)}...`);
            console.log(`   üí° Sugest√µes follow-up: ${result.suggestions.join(', ')}`);

            // Verificar se o tipo est√° correto
            if (result.suggestionType === scenario.expectedType) {
                console.log(`   ‚úÖ Tipo correto!`);
            } else {
                console.log(`   ‚ö†Ô∏è  Esperado: ${scenario.expectedType}, Obtido: ${result.suggestionType}`);
            }

        } catch (error) {
            console.log(`   ‚ùå Erro: ${error.message}`);
        }

        console.log('');
    }

    // Teste espec√≠fico com dados de chuva
    console.log('2Ô∏è‚É£ Testando com condi√ß√µes de chuva...\n');

    const rainyWeather = {
        ...mockWeatherData,
        temperature: "22",
        description: "chuva moderada"
    };

    const rainScenarios = [
        "H√° alguma atividade",
        "Que roupa usar?",
        "Dicas chuva"
    ];

    for (const suggestion of rainScenarios) {
        console.log(`üåßÔ∏è Testando "${suggestion}" com chuva:`);

        const result = await openai.processSuggestionResponse(
            suggestion,
            rainyWeather,
            mockUserContext
        );

        console.log(`   üìù Resposta: ${result.response.substring(0, 150)}...`);
        console.log(`   üí° Sugest√µes: ${result.suggestions.join(', ')}`);
        console.log('');
    }

    // Teste espec√≠fico com calor extremo
    console.log('3Ô∏è‚É£ Testando com calor extremo...\n');

    const hotWeather = {
        ...mockWeatherData,
        temperature: "36",
        description: "sol intenso"
    };

    const hotScenarios = [
        "H√° alguma atividade",
        "Dicas calor",
        "Que roupa usar?"
    ];

    for (const suggestion of hotScenarios) {
        console.log(`üî• Testando "${suggestion}" com calor extremo:`);

        const result = await openai.processSuggestionResponse(
            suggestion,
            hotWeather,
            mockUserContext
        );

        console.log(`   üìù Resposta: ${result.response.substring(0, 150)}...`);
        console.log(`   üí° Sugest√µes: ${result.suggestions.join(', ')}`);
        console.log('');
    }

    // Teste de sugest√µes mal interpretadas
    console.log('4Ô∏è‚É£ Testando corre√ß√£o de interpreta√ß√µes incorretas...\n');

    const problematicSuggestions = [
        "H√° alguma atividade",          // Era interpretado como reminder
        "Alguma atividade",             // Varia√ß√£o
        "Atividades dispon√≠veis",       // Outra varia√ß√£o
        "O que posso fazer",            // Pergunta similar
        "Recomenda√ß√µes atividade"       // Outro formato
    ];

    for (const suggestion of problematicSuggestions) {
        console.log(`üîß Corrigindo interpreta√ß√£o de: "${suggestion}"`);

        const result = await openai.processSuggestionResponse(
            suggestion,
            mockWeatherData,
            mockUserContext
        );

        // Verificar se n√£o √© mais interpretado como reminder
        const isCorrect = result.suggestionType.includes('practical_tips') ||
            result.suggestionType.includes('activities');

        console.log(`   ${isCorrect ? '‚úÖ' : '‚ùå'} Tipo: ${result.suggestionType}`);
        console.log(`   üìù Primeira linha: ${result.response.split('\n')[0]}`);
        console.log('');
    }

    // Teste de performance
    console.log('5Ô∏è‚É£ Testando performance do sistema...\n');

    const startTime = Date.now();

    for (let i = 0; i < 5; i++) {
        await openai.processSuggestionResponse(
            "H√° alguma atividade",
            mockWeatherData,
            mockUserContext
        );
    }

    const endTime = Date.now();
    const averageTime = (endTime - startTime) / 5;

    console.log(`‚è±Ô∏è Tempo m√©dio de processamento: ${averageTime.toFixed(2)}ms`);
    console.log('');

    // Teste de fallback
    console.log('6Ô∏è‚É£ Testando fallback com dados inv√°lidos...\n');

    const invalidScenarios = [
        { suggestion: "", weatherData: null, context: null },
        { suggestion: "texto inv√°lido muito longo que n√£o deveria ser uma sugest√£o", weatherData: {}, context: {} },
        { suggestion: null, weatherData: mockWeatherData, context: mockUserContext }
    ];

    for (let i = 0; i < invalidScenarios.length; i++) {
        console.log(`üö® Teste fallback ${i + 1}:`);

        try {
            const result = await openai.processSuggestionResponse(
                invalidScenarios[i].suggestion,
                invalidScenarios[i].weatherData,
                invalidScenarios[i].context
            );

            console.log(`   ‚úÖ Fallback funcionou: ${result.success ? 'Sucesso' : 'Erro controlado'}`);
            console.log(`   üìù Resposta: ${result.response.substring(0, 100)}...`);

        } catch (error) {
            console.log(`   ‚ùå Erro n√£o tratado: ${error.message}`);
        }

        console.log('');
    }

    console.log('‚úÖ TESTE COMPLETO!');
    console.log('==================');
}

// Executar teste se chamado diretamente
if (require.main === module) {
    testSuggestionResponseProcessing().catch(console.error);
}

module.exports = { testSuggestionResponseProcessing };
